/*
 * Copyright 2020 RA Consulting
 *
 * RA Consulting GmbH licenses this file under the Apache License, 
 * Version 2.0 (the "License"); you may not use this file except 
 * in compliance with the License. 
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
#pragma once

#include "ApiClassInterfacesV1_0.h"
#include "ApiClassWriterInterfacesV1_0.h"
#include "BaseImpl.h"
#include "IParserMessageLogger.h"
#include "ParserHelper.h"
#include "ParameterValue.h"
#include "INamedReference.h"
#include "MemLeakDetection.h"
#include "KeyNotSupportedException.h"
#include "OscConstantsV1_0.h"
#include "ExportDefinitions.h"

// helper.getTypeImportCpp(element,packageName).each{importedType->%>import =importedType%>

namespace NET_ASAM_OPENSCENARIO
{
    namespace v1_0
    {
        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAbsoluteSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteSpeedImpl: public BaseImpl, public IAbsoluteSpeedWriter, public std::enable_shared_from_this<AbsoluteSpeedImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP AbsoluteSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AbsoluteSpeedImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAbsoluteSpeed).name())
                    return std::dynamic_pointer_cast<IAbsoluteSpeed>(shared_from_this());
                else if (classifier == typeid(IAbsoluteSpeedWriter).name())
                    return std::dynamic_pointer_cast<IAbsoluteSpeedWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AbsoluteSpeed";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAbsoluteTargetLane. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetLane)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetLaneImpl: public BaseImpl, public IAbsoluteTargetLaneWriter, public std::enable_shared_from_this<AbsoluteTargetLaneImpl> 
        {
        private:
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP AbsoluteTargetLaneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AbsoluteTargetLaneImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAbsoluteTargetLane).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetLane>(shared_from_this());
                else if (classifier == typeid(IAbsoluteTargetLaneWriter).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetLaneWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AbsoluteTargetLane";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAbsoluteTargetLaneOffset. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetLaneOffset)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetLaneOffsetImpl: public BaseImpl, public IAbsoluteTargetLaneOffsetWriter, public std::enable_shared_from_this<AbsoluteTargetLaneOffsetImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP AbsoluteTargetLaneOffsetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AbsoluteTargetLaneOffsetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAbsoluteTargetLaneOffset).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetLaneOffset>(shared_from_this());
                else if (classifier == typeid(IAbsoluteTargetLaneOffsetWriter).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetLaneOffsetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AbsoluteTargetLaneOffset";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAbsoluteTargetSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetSpeedImpl: public BaseImpl, public IAbsoluteTargetSpeedWriter, public std::enable_shared_from_this<AbsoluteTargetSpeedImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP AbsoluteTargetSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AbsoluteTargetSpeedImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAbsoluteTargetSpeed).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetSpeed>(shared_from_this());
                else if (classifier == typeid(IAbsoluteTargetSpeedWriter).name())
                    return std::dynamic_pointer_cast<IAbsoluteTargetSpeedWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AbsoluteTargetSpeed";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAccelerationCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAccelerationCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AccelerationConditionImpl: public BaseImpl, public IAccelerationConditionWriter, public std::enable_shared_from_this<AccelerationConditionImpl> 
        {
        private:
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP AccelerationConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AccelerationConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAccelerationCondition).name())
                    return std::dynamic_pointer_cast<IAccelerationCondition>(shared_from_this());
                else if (classifier == typeid(IAccelerationConditionWriter).name())
                    return std::dynamic_pointer_cast<IAccelerationConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AccelerationCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAcquirePositionAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAcquirePositionAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AcquirePositionActionImpl: public BaseImpl, public IAcquirePositionActionWriter, public std::enable_shared_from_this<AcquirePositionActionImpl> 
        {
        private:
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP AcquirePositionActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AcquirePositionActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAcquirePositionAction).name())
                    return std::dynamic_pointer_cast<IAcquirePositionAction>(shared_from_this());
                else if (classifier == typeid(IAcquirePositionActionWriter).name())
                    return std::dynamic_pointer_cast<IAcquirePositionActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AcquirePositionAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAct. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAct)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActImpl: public BaseImpl, public IActWriter, public std::enable_shared_from_this<ActImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IManeuverGroupWriter>> _maneuverGroups {};
            std::shared_ptr<ITriggerWriter> _startTrigger {};
            std::shared_ptr<ITriggerWriter> _stopTrigger {};
        public:

            OPENSCENARIOLIB_EXP ActImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverGroup>> GetManeuverGroups() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverGroupWriter>> GetWriterManeuverGroups() const override
            {
                return _maneuverGroups;
            }

            OPENSCENARIOLIB_EXP int GetManeuverGroupsSize() const override
            {
                return static_cast<int>(_maneuverGroups.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverGroup> GetManeuverGroupsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _maneuverGroups.size() > index)
                {
                    return _maneuverGroups[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStartTrigger() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStopTrigger() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetManeuverGroups(std::vector<std::shared_ptr<IManeuverGroupWriter>>& maneuverGroups) override
            {
                _maneuverGroups = maneuverGroups;
            }

            OPENSCENARIOLIB_EXP void SetStartTrigger(std::shared_ptr<ITriggerWriter> startTrigger) override
            {
                _startTrigger = startTrigger;
            }

            OPENSCENARIOLIB_EXP void SetStopTrigger(std::shared_ptr<ITriggerWriter> stopTrigger) override
            {
                _stopTrigger = stopTrigger;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ActImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAct).name())
                    return std::dynamic_pointer_cast<IAct>(shared_from_this());
                else if (classifier == typeid(IActWriter).name())
                    return std::dynamic_pointer_cast<IActWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Act";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStartTrigger() const override
            {
                return std::dynamic_pointer_cast<ITriggerWriter>(_startTrigger);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStopTrigger() const override
            {
                return std::dynamic_pointer_cast<ITriggerWriter>(_stopTrigger);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActionImpl: public BaseImpl, public IActionWriter, public std::enable_shared_from_this<ActionImpl> 
        {
        private:
            std::string _name {};
            std::shared_ptr<IGlobalActionWriter> _globalAction {};
            std::shared_ptr<IUserDefinedActionWriter> _userDefinedAction {};
            std::shared_ptr<IPrivateActionWriter> _privateAction {};
        public:

            OPENSCENARIOLIB_EXP ActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalAction> GetGlobalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAction> GetUserDefinedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateAction> GetPrivateAction() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetGlobalAction(std::shared_ptr<IGlobalActionWriter> globalAction) override
            {
                _globalAction = globalAction;
                _userDefinedAction = {};
                _privateAction = {};
            }

            OPENSCENARIOLIB_EXP void SetUserDefinedAction(std::shared_ptr<IUserDefinedActionWriter> userDefinedAction) override
            {
                _userDefinedAction = userDefinedAction;
                _globalAction = {};
                _privateAction = {};
            }

            OPENSCENARIOLIB_EXP void SetPrivateAction(std::shared_ptr<IPrivateActionWriter> privateAction) override
            {
                _privateAction = privateAction;
                _globalAction = {};
                _userDefinedAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAction).name())
                    return std::dynamic_pointer_cast<IAction>(shared_from_this());
                else if (classifier == typeid(IActionWriter).name())
                    return std::dynamic_pointer_cast<IActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Action";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalActionWriter> GetWriterGlobalAction() const override
            {
                return std::dynamic_pointer_cast<IGlobalActionWriter>(_globalAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedActionWriter> GetWriterUserDefinedAction() const override
            {
                return std::dynamic_pointer_cast<IUserDefinedActionWriter>(_userDefinedAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateActionWriter> GetWriterPrivateAction() const override
            {
                return std::dynamic_pointer_cast<IPrivateActionWriter>(_privateAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IActivateControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IActivateControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActivateControllerActionImpl: public BaseImpl, public IActivateControllerActionWriter, public std::enable_shared_from_this<ActivateControllerActionImpl> 
        {
        private:
            bool _lateral {};
            bool _longitudinal {};
        public:

            OPENSCENARIOLIB_EXP ActivateControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetLateral() const override;
            OPENSCENARIOLIB_EXP bool GetLongitudinal() const override;


            OPENSCENARIOLIB_EXP void SetLateral(const bool lateral) override
            {
                _lateral = lateral;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LATERAL);
            }

            OPENSCENARIOLIB_EXP void SetLongitudinal(const bool longitudinal) override
            {
                _longitudinal = longitudinal;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LONGITUDINAL);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ActivateControllerActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IActivateControllerAction).name())
                    return std::dynamic_pointer_cast<IActivateControllerAction>(shared_from_this());
                else if (classifier == typeid(IActivateControllerActionWriter).name())
                    return std::dynamic_pointer_cast<IActivateControllerActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__LATERAL)
                {
                    return GetLateral();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__LONGITUDINAL)
                {
                    return GetLongitudinal();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ActivateControllerAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLateral(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LATERAL, parameterName, nullTextMarker /*no textmarker*/);
                _lateral = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLongitudinal(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LONGITUDINAL, parameterName, nullTextMarker /*no textmarker*/);
                _longitudinal = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLateral() const override
            {
                auto lateral = OSC_CONSTANTS::ATTRIBUTE__LATERAL;
                return GetParameterNameFromAttribute(lateral);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLongitudinal() const override
            {
                auto longitudinal = OSC_CONSTANTS::ATTRIBUTE__LONGITUDINAL;
                return GetParameterNameFromAttribute(longitudinal);
            }

            OPENSCENARIOLIB_EXP bool IsLateralParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LATERAL);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsLongitudinalParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LONGITUDINAL);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IActors. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IActors)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActorsImpl: public BaseImpl, public IActorsWriter, public std::enable_shared_from_this<ActorsImpl> 
        {
        private:
            bool _selectTriggeringEntities {};
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRefs {};
        public:

            OPENSCENARIOLIB_EXP ActorsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetSelectTriggeringEntities() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRefs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRefs() const override
            {
                return _entityRefs;
            }

            OPENSCENARIOLIB_EXP int GetEntityRefsSize() const override
            {
                return static_cast<int>(_entityRefs.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _entityRefs.size() > index)
                {
                    return _entityRefs[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetSelectTriggeringEntities(const bool selectTriggeringEntities) override
            {
                _selectTriggeringEntities = selectTriggeringEntities;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SELECT_TRIGGERING_ENTITIES);
            }

            OPENSCENARIOLIB_EXP void SetEntityRefs(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRefs) override
            {
                _entityRefs = entityRefs;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ActorsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IActors).name())
                    return std::dynamic_pointer_cast<IActors>(shared_from_this());
                else if (classifier == typeid(IActorsWriter).name())
                    return std::dynamic_pointer_cast<IActorsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__SELECT_TRIGGERING_ENTITIES)
                {
                    return GetSelectTriggeringEntities();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Actors";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSelectTriggeringEntities(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SELECT_TRIGGERING_ENTITIES, parameterName, nullTextMarker /*no textmarker*/);
                _selectTriggeringEntities = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSelectTriggeringEntities() const override
            {
                auto selectTriggeringEntities = OSC_CONSTANTS::ATTRIBUTE__SELECT_TRIGGERING_ENTITIES;
                return GetParameterNameFromAttribute(selectTriggeringEntities);
            }

            OPENSCENARIOLIB_EXP bool IsSelectTriggeringEntitiesParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SELECT_TRIGGERING_ENTITIES);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAddEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAddEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AddEntityActionImpl: public BaseImpl, public IAddEntityActionWriter, public std::enable_shared_from_this<AddEntityActionImpl> 
        {
        private:
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP AddEntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AddEntityActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAddEntityAction).name())
                    return std::dynamic_pointer_cast<IAddEntityAction>(shared_from_this());
                else if (classifier == typeid(IAddEntityActionWriter).name())
                    return std::dynamic_pointer_cast<IAddEntityActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AddEntityAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAssignControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAssignControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AssignControllerActionImpl: public BaseImpl, public IAssignControllerActionWriter, public std::enable_shared_from_this<AssignControllerActionImpl> 
        {
        private:
            std::shared_ptr<IControllerWriter> _controller {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
        public:

            OPENSCENARIOLIB_EXP AssignControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override
            {
                _controller = controller;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _controller = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AssignControllerActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAssignControllerAction).name())
                    return std::dynamic_pointer_cast<IAssignControllerAction>(shared_from_this());
                else if (classifier == typeid(IAssignControllerActionWriter).name())
                    return std::dynamic_pointer_cast<IAssignControllerActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AssignControllerAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override
            {
                return std::dynamic_pointer_cast<IControllerWriter>(_controller);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAssignRouteAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAssignRouteAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AssignRouteActionImpl: public BaseImpl, public IAssignRouteActionWriter, public std::enable_shared_from_this<AssignRouteActionImpl> 
        {
        private:
            std::shared_ptr<IRouteWriter> _route {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
        public:

            OPENSCENARIOLIB_EXP AssignRouteActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetRoute(std::shared_ptr<IRouteWriter> route) override
            {
                _route = route;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _route = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AssignRouteActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAssignRouteAction).name())
                    return std::dynamic_pointer_cast<IAssignRouteAction>(shared_from_this());
                else if (classifier == typeid(IAssignRouteActionWriter).name())
                    return std::dynamic_pointer_cast<IAssignRouteActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "AssignRouteAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteWriter> GetWriterRoute() const override
            {
                return std::dynamic_pointer_cast<IRouteWriter>(_route);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAxle. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAxle)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AxleImpl: public BaseImpl, public IAxleWriter, public std::enable_shared_from_this<AxleImpl> 
        {
        private:
            double _maxSteering {};
            double _positionX {};
            double _positionZ {};
            double _trackWidth {};
            double _wheelDiameter {};
        public:

            OPENSCENARIOLIB_EXP AxleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetMaxSteering() const override;
            OPENSCENARIOLIB_EXP double GetPositionX() const override;
            OPENSCENARIOLIB_EXP double GetPositionZ() const override;
            OPENSCENARIOLIB_EXP double GetTrackWidth() const override;
            OPENSCENARIOLIB_EXP double GetWheelDiameter() const override;


            OPENSCENARIOLIB_EXP void SetMaxSteering(const double maxSteering) override
            {
                _maxSteering = maxSteering;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_STEERING);
            }

            OPENSCENARIOLIB_EXP void SetPositionX(const double positionX) override
            {
                _positionX = positionX;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__POSITION_X);
            }

            OPENSCENARIOLIB_EXP void SetPositionZ(const double positionZ) override
            {
                _positionZ = positionZ;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__POSITION_Z);
            }

            OPENSCENARIOLIB_EXP void SetTrackWidth(const double trackWidth) override
            {
                _trackWidth = trackWidth;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRACK_WIDTH);
            }

            OPENSCENARIOLIB_EXP void SetWheelDiameter(const double wheelDiameter) override
            {
                _wheelDiameter = wheelDiameter;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WHEEL_DIAMETER);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AxleImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAxle).name())
                    return std::dynamic_pointer_cast<IAxle>(shared_from_this());
                else if (classifier == typeid(IAxleWriter).name())
                    return std::dynamic_pointer_cast<IAxleWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_STEERING)
                {
                    return GetMaxSteering();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__POSITION_X)
                {
                    return GetPositionX();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__POSITION_Z)
                {
                    return GetPositionZ();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__TRACK_WIDTH)
                {
                    return GetTrackWidth();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__WHEEL_DIAMETER)
                {
                    return GetWheelDiameter();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Axle";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSteering(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_STEERING, parameterName, nullTextMarker /*no textmarker*/);
                _maxSteering = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPositionX(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__POSITION_X, parameterName, nullTextMarker /*no textmarker*/);
                _positionX = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPositionZ(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__POSITION_Z, parameterName, nullTextMarker /*no textmarker*/);
                _positionZ = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTrackWidth(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRACK_WIDTH, parameterName, nullTextMarker /*no textmarker*/);
                _trackWidth = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToWheelDiameter(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WHEEL_DIAMETER, parameterName, nullTextMarker /*no textmarker*/);
                _wheelDiameter = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSteering() const override
            {
                auto maxSteering = OSC_CONSTANTS::ATTRIBUTE__MAX_STEERING;
                return GetParameterNameFromAttribute(maxSteering);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPositionX() const override
            {
                auto positionX = OSC_CONSTANTS::ATTRIBUTE__POSITION_X;
                return GetParameterNameFromAttribute(positionX);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPositionZ() const override
            {
                auto positionZ = OSC_CONSTANTS::ATTRIBUTE__POSITION_Z;
                return GetParameterNameFromAttribute(positionZ);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrackWidth() const override
            {
                auto trackWidth = OSC_CONSTANTS::ATTRIBUTE__TRACK_WIDTH;
                return GetParameterNameFromAttribute(trackWidth);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromWheelDiameter() const override
            {
                auto wheelDiameter = OSC_CONSTANTS::ATTRIBUTE__WHEEL_DIAMETER;
                return GetParameterNameFromAttribute(wheelDiameter);
            }

            OPENSCENARIOLIB_EXP bool IsMaxSteeringParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_STEERING);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPositionXParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__POSITION_X);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPositionZParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__POSITION_Z);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTrackWidthParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRACK_WIDTH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsWheelDiameterParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__WHEEL_DIAMETER);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IAxles. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAxles)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AxlesImpl: public BaseImpl, public IAxlesWriter, public std::enable_shared_from_this<AxlesImpl> 
        {
        private:
            std::shared_ptr<IAxleWriter> _frontAxle {};
            std::shared_ptr<IAxleWriter> _rearAxle {};
            std::vector<std::shared_ptr<IAxleWriter>> _additionalAxles {};
        public:

            OPENSCENARIOLIB_EXP AxlesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetFrontAxle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetRearAxle() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAxle>> GetAdditionalAxles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAxleWriter>> GetWriterAdditionalAxles() const override
            {
                return _additionalAxles;
            }

            OPENSCENARIOLIB_EXP int GetAdditionalAxlesSize() const override
            {
                return static_cast<int>(_additionalAxles.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetAdditionalAxlesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _additionalAxles.size() > index)
                {
                    return _additionalAxles[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetFrontAxle(std::shared_ptr<IAxleWriter> frontAxle) override
            {
                _frontAxle = frontAxle;
            }

            OPENSCENARIOLIB_EXP void SetRearAxle(std::shared_ptr<IAxleWriter> rearAxle) override
            {
                _rearAxle = rearAxle;
            }

            OPENSCENARIOLIB_EXP void SetAdditionalAxles(std::vector<std::shared_ptr<IAxleWriter>>& additionalAxles) override
            {
                _additionalAxles = additionalAxles;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(AxlesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IAxles).name())
                    return std::dynamic_pointer_cast<IAxles>(shared_from_this());
                else if (classifier == typeid(IAxlesWriter).name())
                    return std::dynamic_pointer_cast<IAxlesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Axles";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxleWriter> GetWriterFrontAxle() const override
            {
                return std::dynamic_pointer_cast<IAxleWriter>(_frontAxle);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxleWriter> GetWriterRearAxle() const override
            {
                return std::dynamic_pointer_cast<IAxleWriter>(_rearAxle);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IBoundingBox. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IBoundingBox)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class BoundingBoxImpl: public BaseImpl, public IBoundingBoxWriter, public std::enable_shared_from_this<BoundingBoxImpl> 
        {
        private:
            std::shared_ptr<ICenterWriter> _center {};
            std::shared_ptr<IDimensionsWriter> _dimensions {};
        public:

            OPENSCENARIOLIB_EXP BoundingBoxImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICenter> GetCenter() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDimensions> GetDimensions() const override;


            OPENSCENARIOLIB_EXP void SetCenter(std::shared_ptr<ICenterWriter> center) override
            {
                _center = center;
            }

            OPENSCENARIOLIB_EXP void SetDimensions(std::shared_ptr<IDimensionsWriter> dimensions) override
            {
                _dimensions = dimensions;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(BoundingBoxImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IBoundingBox).name())
                    return std::dynamic_pointer_cast<IBoundingBox>(shared_from_this());
                else if (classifier == typeid(IBoundingBoxWriter).name())
                    return std::dynamic_pointer_cast<IBoundingBoxWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "BoundingBox";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICenterWriter> GetWriterCenter() const override
            {
                return std::dynamic_pointer_cast<ICenterWriter>(_center);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IDimensionsWriter> GetWriterDimensions() const override
            {
                return std::dynamic_pointer_cast<IDimensionsWriter>(_dimensions);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IByEntityCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByEntityCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByEntityConditionImpl: public BaseImpl, public IByEntityConditionWriter, public std::enable_shared_from_this<ByEntityConditionImpl> 
        {
        private:
            std::shared_ptr<ITriggeringEntitiesWriter> _triggeringEntities {};
            std::shared_ptr<IEntityConditionWriter> _entityCondition {};
        public:

            OPENSCENARIOLIB_EXP ByEntityConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggeringEntities> GetTriggeringEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityCondition> GetEntityCondition() const override;


            OPENSCENARIOLIB_EXP void SetTriggeringEntities(std::shared_ptr<ITriggeringEntitiesWriter> triggeringEntities) override
            {
                _triggeringEntities = triggeringEntities;
            }

            OPENSCENARIOLIB_EXP void SetEntityCondition(std::shared_ptr<IEntityConditionWriter> entityCondition) override
            {
                _entityCondition = entityCondition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ByEntityConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IByEntityCondition).name())
                    return std::dynamic_pointer_cast<IByEntityCondition>(shared_from_this());
                else if (classifier == typeid(IByEntityConditionWriter).name())
                    return std::dynamic_pointer_cast<IByEntityConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ByEntityCondition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggeringEntitiesWriter> GetWriterTriggeringEntities() const override
            {
                return std::dynamic_pointer_cast<ITriggeringEntitiesWriter>(_triggeringEntities);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityConditionWriter> GetWriterEntityCondition() const override
            {
                return std::dynamic_pointer_cast<IEntityConditionWriter>(_entityCondition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IByObjectType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByObjectType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByObjectTypeImpl: public BaseImpl, public IByObjectTypeWriter, public std::enable_shared_from_this<ByObjectTypeImpl> 
        {
        private:
            ObjectType _type {};
        public:

            OPENSCENARIOLIB_EXP ByObjectTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP ObjectType GetType() const override;


            OPENSCENARIOLIB_EXP void SetType(const ObjectType type) override
            {
                _type = type;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ByObjectTypeImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IByObjectType).name())
                    return std::dynamic_pointer_cast<IByObjectType>(shared_from_this());
                else if (classifier == typeid(IByObjectTypeWriter).name())
                    return std::dynamic_pointer_cast<IByObjectTypeWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ByObjectType";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _type = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override
            {
                auto type = OSC_CONSTANTS::ATTRIBUTE__TYPE;
                return GetParameterNameFromAttribute(type);
            }

            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IByType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByTypeImpl: public BaseImpl, public IByTypeWriter, public std::enable_shared_from_this<ByTypeImpl> 
        {
        private:
            ObjectType _objectType {};
        public:

            OPENSCENARIOLIB_EXP ByTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP ObjectType GetObjectType() const override;


            OPENSCENARIOLIB_EXP void SetObjectType(const ObjectType objectType) override
            {
                _objectType = objectType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OBJECT_TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ByTypeImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IByType).name())
                    return std::dynamic_pointer_cast<IByType>(shared_from_this());
                else if (classifier == typeid(IByTypeWriter).name())
                    return std::dynamic_pointer_cast<IByTypeWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ByType";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToObjectType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OBJECT_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _objectType = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromObjectType() const override
            {
                auto objectType = OSC_CONSTANTS::ATTRIBUTE__OBJECT_TYPE;
                return GetParameterNameFromAttribute(objectType);
            }

            OPENSCENARIOLIB_EXP bool IsObjectTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__OBJECT_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IByValueCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByValueCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByValueConditionImpl: public BaseImpl, public IByValueConditionWriter, public std::enable_shared_from_this<ByValueConditionImpl> 
        {
        private:
            std::shared_ptr<IParameterConditionWriter> _parameterCondition {};
            std::shared_ptr<ITimeOfDayConditionWriter> _timeOfDayCondition {};
            std::shared_ptr<ISimulationTimeConditionWriter> _simulationTimeCondition {};
            std::shared_ptr<IStoryboardElementStateConditionWriter> _storyboardElementStateCondition {};
            std::shared_ptr<IUserDefinedValueConditionWriter> _userDefinedValueCondition {};
            std::shared_ptr<ITrafficSignalConditionWriter> _trafficSignalCondition {};
            std::shared_ptr<ITrafficSignalControllerConditionWriter> _trafficSignalControllerCondition {};
        public:

            OPENSCENARIOLIB_EXP ByValueConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterCondition> GetParameterCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayCondition> GetTimeOfDayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISimulationTimeCondition> GetSimulationTimeCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardElementStateCondition> GetStoryboardElementStateCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedValueCondition> GetUserDefinedValueCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalCondition> GetTrafficSignalCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerCondition> GetTrafficSignalControllerCondition() const override;


            OPENSCENARIOLIB_EXP void SetParameterCondition(std::shared_ptr<IParameterConditionWriter> parameterCondition) override
            {
                _parameterCondition = parameterCondition;
                _timeOfDayCondition = {};
                _simulationTimeCondition = {};
                _storyboardElementStateCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTimeOfDayCondition(std::shared_ptr<ITimeOfDayConditionWriter> timeOfDayCondition) override
            {
                _timeOfDayCondition = timeOfDayCondition;
                _parameterCondition = {};
                _simulationTimeCondition = {};
                _storyboardElementStateCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetSimulationTimeCondition(std::shared_ptr<ISimulationTimeConditionWriter> simulationTimeCondition) override
            {
                _simulationTimeCondition = simulationTimeCondition;
                _parameterCondition = {};
                _timeOfDayCondition = {};
                _storyboardElementStateCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetStoryboardElementStateCondition(std::shared_ptr<IStoryboardElementStateConditionWriter> storyboardElementStateCondition) override
            {
                _storyboardElementStateCondition = storyboardElementStateCondition;
                _parameterCondition = {};
                _timeOfDayCondition = {};
                _simulationTimeCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetUserDefinedValueCondition(std::shared_ptr<IUserDefinedValueConditionWriter> userDefinedValueCondition) override
            {
                _userDefinedValueCondition = userDefinedValueCondition;
                _parameterCondition = {};
                _timeOfDayCondition = {};
                _simulationTimeCondition = {};
                _storyboardElementStateCondition = {};
                _trafficSignalCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalCondition(std::shared_ptr<ITrafficSignalConditionWriter> trafficSignalCondition) override
            {
                _trafficSignalCondition = trafficSignalCondition;
                _parameterCondition = {};
                _timeOfDayCondition = {};
                _simulationTimeCondition = {};
                _storyboardElementStateCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalControllerCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerCondition(std::shared_ptr<ITrafficSignalControllerConditionWriter> trafficSignalControllerCondition) override
            {
                _trafficSignalControllerCondition = trafficSignalControllerCondition;
                _parameterCondition = {};
                _timeOfDayCondition = {};
                _simulationTimeCondition = {};
                _storyboardElementStateCondition = {};
                _userDefinedValueCondition = {};
                _trafficSignalCondition = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ByValueConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IByValueCondition).name())
                    return std::dynamic_pointer_cast<IByValueCondition>(shared_from_this());
                else if (classifier == typeid(IByValueConditionWriter).name())
                    return std::dynamic_pointer_cast<IByValueConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ByValueCondition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterConditionWriter> GetWriterParameterCondition() const override
            {
                return std::dynamic_pointer_cast<IParameterConditionWriter>(_parameterCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayConditionWriter> GetWriterTimeOfDayCondition() const override
            {
                return std::dynamic_pointer_cast<ITimeOfDayConditionWriter>(_timeOfDayCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ISimulationTimeConditionWriter> GetWriterSimulationTimeCondition() const override
            {
                return std::dynamic_pointer_cast<ISimulationTimeConditionWriter>(_simulationTimeCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardElementStateConditionWriter> GetWriterStoryboardElementStateCondition() const override
            {
                return std::dynamic_pointer_cast<IStoryboardElementStateConditionWriter>(_storyboardElementStateCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedValueConditionWriter> GetWriterUserDefinedValueCondition() const override
            {
                return std::dynamic_pointer_cast<IUserDefinedValueConditionWriter>(_userDefinedValueCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalConditionWriter> GetWriterTrafficSignalCondition() const override
            {
                return std::dynamic_pointer_cast<ITrafficSignalConditionWriter>(_trafficSignalCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerConditionWriter> GetWriterTrafficSignalControllerCondition() const override
            {
                return std::dynamic_pointer_cast<ITrafficSignalControllerConditionWriter>(_trafficSignalControllerCondition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICatalog. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalog)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogImpl: public BaseImpl, public ICatalogWriter, public std::enable_shared_from_this<CatalogImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IVehicleWriter>> _vehicles {};
            std::vector<std::shared_ptr<IControllerWriter>> _controllers {};
            std::vector<std::shared_ptr<IPedestrianWriter>> _pedestrians {};
            std::vector<std::shared_ptr<IMiscObjectWriter>> _miscObjects {};
            std::vector<std::shared_ptr<IEnvironmentWriter>> _environments {};
            std::vector<std::shared_ptr<IManeuverWriter>> _maneuvers {};
            std::vector<std::shared_ptr<ITrajectoryWriter>> _trajectories {};
            std::vector<std::shared_ptr<IRouteWriter>> _routes {};
        public:

            OPENSCENARIOLIB_EXP CatalogImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicle>> GetVehicles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleWriter>> GetWriterVehicles() const override
            {
                return _vehicles;
            }

            OPENSCENARIOLIB_EXP int GetVehiclesSize() const override
            {
                return static_cast<int>(_vehicles.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicle> GetVehiclesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _vehicles.size() > index)
                {
                    return _vehicles[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IController>> GetControllers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerWriter>> GetWriterControllers() const override
            {
                return _controllers;
            }

            OPENSCENARIOLIB_EXP int GetControllersSize() const override
            {
                return static_cast<int>(_controllers.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetControllersAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _controllers.size() > index)
                {
                    return _controllers[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrian>> GetPedestrians() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrianWriter>> GetWriterPedestrians() const override
            {
                return _pedestrians;
            }

            OPENSCENARIOLIB_EXP int GetPedestriansSize() const override
            {
                return static_cast<int>(_pedestrians.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrian> GetPedestriansAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _pedestrians.size() > index)
                {
                    return _pedestrians[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMiscObject>> GetMiscObjects() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMiscObjectWriter>> GetWriterMiscObjects() const override
            {
                return _miscObjects;
            }

            OPENSCENARIOLIB_EXP int GetMiscObjectsSize() const override
            {
                return static_cast<int>(_miscObjects.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObject> GetMiscObjectsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _miscObjects.size() > index)
                {
                    return _miscObjects[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEnvironment>> GetEnvironments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEnvironmentWriter>> GetWriterEnvironments() const override
            {
                return _environments;
            }

            OPENSCENARIOLIB_EXP int GetEnvironmentsSize() const override
            {
                return static_cast<int>(_environments.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironment> GetEnvironmentsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _environments.size() > index)
                {
                    return _environments[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuver>> GetManeuvers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverWriter>> GetWriterManeuvers() const override
            {
                return _maneuvers;
            }

            OPENSCENARIOLIB_EXP int GetManeuversSize() const override
            {
                return static_cast<int>(_maneuvers.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuver> GetManeuversAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _maneuvers.size() > index)
                {
                    return _maneuvers[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrajectory>> GetTrajectories() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrajectoryWriter>> GetWriterTrajectories() const override
            {
                return _trajectories;
            }

            OPENSCENARIOLIB_EXP int GetTrajectoriesSize() const override
            {
                return static_cast<int>(_trajectories.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectory> GetTrajectoriesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _trajectories.size() > index)
                {
                    return _trajectories[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoute>> GetRoutes() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRouteWriter>> GetWriterRoutes() const override
            {
                return _routes;
            }

            OPENSCENARIOLIB_EXP int GetRoutesSize() const override
            {
                return static_cast<int>(_routes.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoutesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _routes.size() > index)
                {
                    return _routes[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetVehicles(std::vector<std::shared_ptr<IVehicleWriter>>& vehicles) override
            {
                _vehicles = vehicles;
            }

            OPENSCENARIOLIB_EXP void SetControllers(std::vector<std::shared_ptr<IControllerWriter>>& controllers) override
            {
                _controllers = controllers;
            }

            OPENSCENARIOLIB_EXP void SetPedestrians(std::vector<std::shared_ptr<IPedestrianWriter>>& pedestrians) override
            {
                _pedestrians = pedestrians;
            }

            OPENSCENARIOLIB_EXP void SetMiscObjects(std::vector<std::shared_ptr<IMiscObjectWriter>>& miscObjects) override
            {
                _miscObjects = miscObjects;
            }

            OPENSCENARIOLIB_EXP void SetEnvironments(std::vector<std::shared_ptr<IEnvironmentWriter>>& environments) override
            {
                _environments = environments;
            }

            OPENSCENARIOLIB_EXP void SetManeuvers(std::vector<std::shared_ptr<IManeuverWriter>>& maneuvers) override
            {
                _maneuvers = maneuvers;
            }

            OPENSCENARIOLIB_EXP void SetTrajectories(std::vector<std::shared_ptr<ITrajectoryWriter>>& trajectories) override
            {
                _trajectories = trajectories;
            }

            OPENSCENARIOLIB_EXP void SetRoutes(std::vector<std::shared_ptr<IRouteWriter>>& routes) override
            {
                _routes = routes;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CatalogImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICatalog).name())
                    return std::dynamic_pointer_cast<ICatalog>(shared_from_this());
                else if (classifier == typeid(ICatalogWriter).name())
                    return std::dynamic_pointer_cast<ICatalogWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Catalog";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICatalogDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogDefinitionImpl: public BaseImpl, public ICatalogDefinitionWriter, public std::enable_shared_from_this<CatalogDefinitionImpl> 
        {
        private:
            std::shared_ptr<ICatalogWriter> _catalog {};
        public:

            OPENSCENARIOLIB_EXP CatalogDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalog> GetCatalog() const override;


            OPENSCENARIOLIB_EXP void SetCatalog(std::shared_ptr<ICatalogWriter> catalog) override
            {
                _catalog = catalog;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CatalogDefinitionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICatalogDefinition).name())
                    return std::dynamic_pointer_cast<ICatalogDefinition>(shared_from_this());
                else if (classifier == typeid(ICatalogDefinitionWriter).name())
                    return std::dynamic_pointer_cast<ICatalogDefinitionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CatalogDefinition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogWriter> GetWriterCatalog() const override
            {
                return std::dynamic_pointer_cast<ICatalogWriter>(_catalog);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICatalogLocations. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogLocations)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogLocationsImpl: public BaseImpl, public ICatalogLocationsWriter, public std::enable_shared_from_this<CatalogLocationsImpl> 
        {
        private:
            std::shared_ptr<IVehicleCatalogLocationWriter> _vehicleCatalog {};
            std::shared_ptr<IControllerCatalogLocationWriter> _controllerCatalog {};
            std::shared_ptr<IPedestrianCatalogLocationWriter> _pedestrianCatalog {};
            std::shared_ptr<IMiscObjectCatalogLocationWriter> _miscObjectCatalog {};
            std::shared_ptr<IEnvironmentCatalogLocationWriter> _environmentCatalog {};
            std::shared_ptr<IManeuverCatalogLocationWriter> _maneuverCatalog {};
            std::shared_ptr<ITrajectoryCatalogLocationWriter> _trajectoryCatalog {};
            std::shared_ptr<IRouteCatalogLocationWriter> _routeCatalog {};
        public:

            OPENSCENARIOLIB_EXP CatalogLocationsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCatalogLocation> GetVehicleCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerCatalogLocation> GetControllerCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianCatalogLocation> GetPedestrianCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectCatalogLocation> GetMiscObjectCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentCatalogLocation> GetEnvironmentCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverCatalogLocation> GetManeuverCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryCatalogLocation> GetTrajectoryCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteCatalogLocation> GetRouteCatalog() const override;


            OPENSCENARIOLIB_EXP void SetVehicleCatalog(std::shared_ptr<IVehicleCatalogLocationWriter> vehicleCatalog) override
            {
                _vehicleCatalog = vehicleCatalog;
            }

            OPENSCENARIOLIB_EXP void SetControllerCatalog(std::shared_ptr<IControllerCatalogLocationWriter> controllerCatalog) override
            {
                _controllerCatalog = controllerCatalog;
            }

            OPENSCENARIOLIB_EXP void SetPedestrianCatalog(std::shared_ptr<IPedestrianCatalogLocationWriter> pedestrianCatalog) override
            {
                _pedestrianCatalog = pedestrianCatalog;
            }

            OPENSCENARIOLIB_EXP void SetMiscObjectCatalog(std::shared_ptr<IMiscObjectCatalogLocationWriter> miscObjectCatalog) override
            {
                _miscObjectCatalog = miscObjectCatalog;
            }

            OPENSCENARIOLIB_EXP void SetEnvironmentCatalog(std::shared_ptr<IEnvironmentCatalogLocationWriter> environmentCatalog) override
            {
                _environmentCatalog = environmentCatalog;
            }

            OPENSCENARIOLIB_EXP void SetManeuverCatalog(std::shared_ptr<IManeuverCatalogLocationWriter> maneuverCatalog) override
            {
                _maneuverCatalog = maneuverCatalog;
            }

            OPENSCENARIOLIB_EXP void SetTrajectoryCatalog(std::shared_ptr<ITrajectoryCatalogLocationWriter> trajectoryCatalog) override
            {
                _trajectoryCatalog = trajectoryCatalog;
            }

            OPENSCENARIOLIB_EXP void SetRouteCatalog(std::shared_ptr<IRouteCatalogLocationWriter> routeCatalog) override
            {
                _routeCatalog = routeCatalog;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CatalogLocationsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICatalogLocations).name())
                    return std::dynamic_pointer_cast<ICatalogLocations>(shared_from_this());
                else if (classifier == typeid(ICatalogLocationsWriter).name())
                    return std::dynamic_pointer_cast<ICatalogLocationsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CatalogLocations";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCatalogLocationWriter> GetWriterVehicleCatalog() const override
            {
                return std::dynamic_pointer_cast<IVehicleCatalogLocationWriter>(_vehicleCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerCatalogLocationWriter> GetWriterControllerCatalog() const override
            {
                return std::dynamic_pointer_cast<IControllerCatalogLocationWriter>(_controllerCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianCatalogLocationWriter> GetWriterPedestrianCatalog() const override
            {
                return std::dynamic_pointer_cast<IPedestrianCatalogLocationWriter>(_pedestrianCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectCatalogLocationWriter> GetWriterMiscObjectCatalog() const override
            {
                return std::dynamic_pointer_cast<IMiscObjectCatalogLocationWriter>(_miscObjectCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentCatalogLocationWriter> GetWriterEnvironmentCatalog() const override
            {
                return std::dynamic_pointer_cast<IEnvironmentCatalogLocationWriter>(_environmentCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverCatalogLocationWriter> GetWriterManeuverCatalog() const override
            {
                return std::dynamic_pointer_cast<IManeuverCatalogLocationWriter>(_maneuverCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryCatalogLocationWriter> GetWriterTrajectoryCatalog() const override
            {
                return std::dynamic_pointer_cast<ITrajectoryCatalogLocationWriter>(_trajectoryCatalog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteCatalogLocationWriter> GetWriterRouteCatalog() const override
            {
                return std::dynamic_pointer_cast<IRouteCatalogLocationWriter>(_routeCatalog);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICatalogReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogReferenceImpl: public BaseImpl, public ICatalogReferenceWriter, public std::enable_shared_from_this<CatalogReferenceImpl> 
        {
        private:
            std::string _catalogName {};
            std::string _entryName {};
            std::vector<std::shared_ptr<IParameterAssignmentWriter>> _parameterAssignments {};
            std::shared_ptr<ICatalogElement> _ref {};
        public:

            OPENSCENARIOLIB_EXP CatalogReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetCatalogName() const override;
            OPENSCENARIOLIB_EXP std::string GetEntryName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignment>> GetParameterAssignments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignmentWriter>> GetWriterParameterAssignments() const override
            {
                return _parameterAssignments;
            }

            OPENSCENARIOLIB_EXP int GetParameterAssignmentsSize() const override
            {
                return static_cast<int>(_parameterAssignments.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAssignment> GetParameterAssignmentsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterAssignments.size() > index)
                {
                    return _parameterAssignments[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogElement> GetRef() const override;


            OPENSCENARIOLIB_EXP void SetCatalogName(const std::string catalogName) override
            {
                _catalogName = catalogName;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CATALOG_NAME);
            }

            OPENSCENARIOLIB_EXP void SetEntryName(const std::string entryName) override
            {
                _entryName = entryName;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTRY_NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterAssignments(std::vector<std::shared_ptr<IParameterAssignmentWriter>>& parameterAssignments) override
            {
                _parameterAssignments = parameterAssignments;
            }

            OPENSCENARIOLIB_EXP void SetRef(const std::shared_ptr<ICatalogElement> ref) override
            {
                _ref = ref;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CatalogReferenceImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICatalogReference).name())
                    return std::dynamic_pointer_cast<ICatalogReference>(shared_from_this());
                else if (classifier == typeid(ICatalogReferenceWriter).name())
                    return std::dynamic_pointer_cast<ICatalogReferenceWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CatalogReference";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToCatalogName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CATALOG_NAME, parameterName, nullTextMarker /*no textmarker*/);
                _catalogName = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntryName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTRY_NAME, parameterName, nullTextMarker /*no textmarker*/);
                _entryName = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromCatalogName() const override
            {
                auto catalogName = OSC_CONSTANTS::ATTRIBUTE__CATALOG_NAME;
                return GetParameterNameFromAttribute(catalogName);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntryName() const override
            {
                auto entryName = OSC_CONSTANTS::ATTRIBUTE__ENTRY_NAME;
                return GetParameterNameFromAttribute(entryName);
            }

            OPENSCENARIOLIB_EXP bool IsCatalogNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CATALOG_NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntryNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTRY_NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICenter. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICenter)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CenterImpl: public BaseImpl, public ICenterWriter, public std::enable_shared_from_this<CenterImpl> 
        {
        private:
            double _x {};
            double _y {};
            double _z {};
        public:

            OPENSCENARIOLIB_EXP CenterImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetX() const override;
            OPENSCENARIOLIB_EXP double GetY() const override;
            OPENSCENARIOLIB_EXP double GetZ() const override;


            OPENSCENARIOLIB_EXP void SetX(const double x) override
            {
                _x = x;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__X);
            }

            OPENSCENARIOLIB_EXP void SetY(const double y) override
            {
                _y = y;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Y);
            }

            OPENSCENARIOLIB_EXP void SetZ(const double z) override
            {
                _z = z;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Z);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CenterImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICenter).name())
                    return std::dynamic_pointer_cast<ICenter>(shared_from_this());
                else if (classifier == typeid(ICenterWriter).name())
                    return std::dynamic_pointer_cast<ICenterWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__X)
                {
                    return GetX();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__Y)
                {
                    return GetY();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__Z)
                {
                    return GetZ();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Center";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToX(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__X, parameterName, nullTextMarker /*no textmarker*/);
                _x = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToY(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Y, parameterName, nullTextMarker /*no textmarker*/);
                _y = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToZ(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Z, parameterName, nullTextMarker /*no textmarker*/);
                _z = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromX() const override
            {
                auto x = OSC_CONSTANTS::ATTRIBUTE__X;
                return GetParameterNameFromAttribute(x);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromY() const override
            {
                auto y = OSC_CONSTANTS::ATTRIBUTE__Y;
                return GetParameterNameFromAttribute(y);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromZ() const override
            {
                auto z = OSC_CONSTANTS::ATTRIBUTE__Z;
                return GetParameterNameFromAttribute(z);
            }

            OPENSCENARIOLIB_EXP bool IsXParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__X);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsYParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__Y);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsZParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__Z);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICentralSwarmObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICentralSwarmObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CentralSwarmObjectImpl: public BaseImpl, public ICentralSwarmObjectWriter, public std::enable_shared_from_this<CentralSwarmObjectImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
        public:

            OPENSCENARIOLIB_EXP CentralSwarmObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CentralSwarmObjectImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICentralSwarmObject).name())
                    return std::dynamic_pointer_cast<ICentralSwarmObject>(shared_from_this());
                else if (classifier == typeid(ICentralSwarmObjectWriter).name())
                    return std::dynamic_pointer_cast<ICentralSwarmObjectWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CentralSwarmObject";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IClothoid. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IClothoid)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ClothoidImpl: public BaseImpl, public IClothoidWriter, public std::enable_shared_from_this<ClothoidImpl> 
        {
        private:
            double _curvature {};
            double _curvatureDot {};
            double _length {};
            double _startTime {};
            double _stopTime {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP ClothoidImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetCurvature() const override;
            OPENSCENARIOLIB_EXP double GetCurvatureDot() const override;
            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP double GetStartTime() const override;
            OPENSCENARIOLIB_EXP double GetStopTime() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetCurvature(const double curvature) override
            {
                _curvature = curvature;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CURVATURE);
            }

            OPENSCENARIOLIB_EXP void SetCurvatureDot(const double curvatureDot) override
            {
                _curvatureDot = curvatureDot;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CURVATURE_DOT);
            }

            OPENSCENARIOLIB_EXP void SetLength(const double length) override
            {
                _length = length;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LENGTH);
            }

            OPENSCENARIOLIB_EXP void SetStartTime(const double startTime) override
            {
                _startTime = startTime;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__START_TIME);
            }

            OPENSCENARIOLIB_EXP void SetStopTime(const double stopTime) override
            {
                _stopTime = stopTime;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STOP_TIME);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ClothoidImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IClothoid).name())
                    return std::dynamic_pointer_cast<IClothoid>(shared_from_this());
                else if (classifier == typeid(IClothoidWriter).name())
                    return std::dynamic_pointer_cast<IClothoidWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CURVATURE)
                {
                    return GetCurvature();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__CURVATURE_DOT)
                {
                    return GetCurvatureDot();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__LENGTH)
                {
                    return GetLength();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__START_TIME)
                {
                    return GetStartTime();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__STOP_TIME)
                {
                    return GetStopTime();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Clothoid";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvature(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CURVATURE, parameterName, nullTextMarker /*no textmarker*/);
                _curvature = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvatureDot(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CURVATURE_DOT, parameterName, nullTextMarker /*no textmarker*/);
                _curvatureDot = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LENGTH, parameterName, nullTextMarker /*no textmarker*/);
                _length = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToStartTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__START_TIME, parameterName, nullTextMarker /*no textmarker*/);
                _startTime = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToStopTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STOP_TIME, parameterName, nullTextMarker /*no textmarker*/);
                _stopTime = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvature() const override
            {
                auto curvature = OSC_CONSTANTS::ATTRIBUTE__CURVATURE;
                return GetParameterNameFromAttribute(curvature);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvatureDot() const override
            {
                auto curvatureDot = OSC_CONSTANTS::ATTRIBUTE__CURVATURE_DOT;
                return GetParameterNameFromAttribute(curvatureDot);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override
            {
                auto length = OSC_CONSTANTS::ATTRIBUTE__LENGTH;
                return GetParameterNameFromAttribute(length);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromStartTime() const override
            {
                auto startTime = OSC_CONSTANTS::ATTRIBUTE__START_TIME;
                return GetParameterNameFromAttribute(startTime);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromStopTime() const override
            {
                auto stopTime = OSC_CONSTANTS::ATTRIBUTE__STOP_TIME;
                return GetParameterNameFromAttribute(stopTime);
            }

            OPENSCENARIOLIB_EXP bool IsCurvatureParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CURVATURE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsCurvatureDotParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CURVATURE_DOT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LENGTH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStartTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__START_TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStopTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STOP_TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICollisionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICollisionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CollisionConditionImpl: public BaseImpl, public ICollisionConditionWriter, public std::enable_shared_from_this<CollisionConditionImpl> 
        {
        private:
            std::shared_ptr<IEntityRefWriter> _entityRef {};
            std::shared_ptr<IByObjectTypeWriter> _byType {};
        public:

            OPENSCENARIOLIB_EXP CollisionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByObjectType> GetByType() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<IEntityRefWriter> entityRef) override
            {
                _entityRef = entityRef;
                _byType = {};
            }

            OPENSCENARIOLIB_EXP void SetByType(std::shared_ptr<IByObjectTypeWriter> byType) override
            {
                _byType = byType;
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CollisionConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICollisionCondition).name())
                    return std::dynamic_pointer_cast<ICollisionCondition>(shared_from_this());
                else if (classifier == typeid(ICollisionConditionWriter).name())
                    return std::dynamic_pointer_cast<ICollisionConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CollisionCondition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRefWriter> GetWriterEntityRef() const override
            {
                return std::dynamic_pointer_cast<IEntityRefWriter>(_entityRef);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IByObjectTypeWriter> GetWriterByType() const override
            {
                return std::dynamic_pointer_cast<IByObjectTypeWriter>(_byType);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ConditionImpl: public BaseImpl, public IConditionWriter, public std::enable_shared_from_this<ConditionImpl> 
        {
        private:
            ConditionEdge _conditionEdge {};
            double _delay {};
            std::string _name {};
            std::shared_ptr<IByEntityConditionWriter> _byEntityCondition {};
            std::shared_ptr<IByValueConditionWriter> _byValueCondition {};
        public:

            OPENSCENARIOLIB_EXP ConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP ConditionEdge GetConditionEdge() const override;
            OPENSCENARIOLIB_EXP double GetDelay() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByEntityCondition> GetByEntityCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByValueCondition> GetByValueCondition() const override;


            OPENSCENARIOLIB_EXP void SetConditionEdge(const ConditionEdge conditionEdge) override
            {
                _conditionEdge = conditionEdge;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONDITION_EDGE);
            }

            OPENSCENARIOLIB_EXP void SetDelay(const double delay) override
            {
                _delay = delay;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DELAY);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetByEntityCondition(std::shared_ptr<IByEntityConditionWriter> byEntityCondition) override
            {
                _byEntityCondition = byEntityCondition;
                _byValueCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetByValueCondition(std::shared_ptr<IByValueConditionWriter> byValueCondition) override
            {
                _byValueCondition = byValueCondition;
                _byEntityCondition = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICondition).name())
                    return std::dynamic_pointer_cast<ICondition>(shared_from_this());
                else if (classifier == typeid(IConditionWriter).name())
                    return std::dynamic_pointer_cast<IConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DELAY)
                {
                    return GetDelay();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Condition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToConditionEdge(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONDITION_EDGE, parameterName, nullTextMarker /*no textmarker*/);
                _conditionEdge = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDelay(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DELAY, parameterName, nullTextMarker /*no textmarker*/);
                _delay = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromConditionEdge() const override
            {
                auto conditionEdge = OSC_CONSTANTS::ATTRIBUTE__CONDITION_EDGE;
                return GetParameterNameFromAttribute(conditionEdge);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDelay() const override
            {
                auto delay = OSC_CONSTANTS::ATTRIBUTE__DELAY;
                return GetParameterNameFromAttribute(delay);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsConditionEdgeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONDITION_EDGE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDelayParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DELAY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IByEntityConditionWriter> GetWriterByEntityCondition() const override
            {
                return std::dynamic_pointer_cast<IByEntityConditionWriter>(_byEntityCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IByValueConditionWriter> GetWriterByValueCondition() const override
            {
                return std::dynamic_pointer_cast<IByValueConditionWriter>(_byValueCondition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IConditionGroup. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IConditionGroup)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ConditionGroupImpl: public BaseImpl, public IConditionGroupWriter, public std::enable_shared_from_this<ConditionGroupImpl> 
        {
        private:
            std::vector<std::shared_ptr<IConditionWriter>> _conditions {};
        public:

            OPENSCENARIOLIB_EXP ConditionGroupImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICondition>> GetConditions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionWriter>> GetWriterConditions() const override
            {
                return _conditions;
            }

            OPENSCENARIOLIB_EXP int GetConditionsSize() const override
            {
                return static_cast<int>(_conditions.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICondition> GetConditionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _conditions.size() > index)
                {
                    return _conditions[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetConditions(std::vector<std::shared_ptr<IConditionWriter>>& conditions) override
            {
                _conditions = conditions;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ConditionGroupImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IConditionGroup).name())
                    return std::dynamic_pointer_cast<IConditionGroup>(shared_from_this());
                else if (classifier == typeid(IConditionGroupWriter).name())
                    return std::dynamic_pointer_cast<IConditionGroupWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ConditionGroup";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IControlPoint. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControlPoint)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControlPointImpl: public BaseImpl, public IControlPointWriter, public std::enable_shared_from_this<ControlPointImpl> 
        {
        private:
            double _time {};
            double _weight {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP ControlPointImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetTime() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTime(const double time) override
            {
                _time = time;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME);
            }

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override
            {
                _weight = weight;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControlPointImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IControlPoint).name())
                    return std::dynamic_pointer_cast<IControlPoint>(shared_from_this());
                else if (classifier == typeid(IControlPointWriter).name())
                    return std::dynamic_pointer_cast<IControlPointWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__TIME)
                {
                    return GetTime();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__WEIGHT)
                {
                    return GetWeight();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ControlPoint";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME, parameterName, nullTextMarker /*no textmarker*/);
                _time = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT, parameterName, nullTextMarker /*no textmarker*/);
                _weight = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override
            {
                auto time = OSC_CONSTANTS::ATTRIBUTE__TIME;
                return GetParameterNameFromAttribute(time);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override
            {
                auto weight = OSC_CONSTANTS::ATTRIBUTE__WEIGHT;
                return GetParameterNameFromAttribute(weight);
            }

            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerImpl: public BaseImpl, public IControllerWriter, public std::enable_shared_from_this<ControllerImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<IPropertiesWriter> _properties {};
        public:

            OPENSCENARIOLIB_EXP ControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControllerImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IController).name())
                    return std::dynamic_pointer_cast<IController>(shared_from_this());
                else if (classifier == typeid(IControllerWriter).name())
                    return std::dynamic_pointer_cast<IControllerWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Controller";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override
            {
                return std::dynamic_pointer_cast<IPropertiesWriter>(_properties);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerActionImpl: public BaseImpl, public IControllerActionWriter, public std::enable_shared_from_this<ControllerActionImpl> 
        {
        private:
            std::shared_ptr<IAssignControllerActionWriter> _assignControllerAction {};
            std::shared_ptr<IOverrideControllerValueActionWriter> _overrideControllerValueAction {};
        public:

            OPENSCENARIOLIB_EXP ControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignControllerAction> GetAssignControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideControllerValueAction> GetOverrideControllerValueAction() const override;


            OPENSCENARIOLIB_EXP void SetAssignControllerAction(std::shared_ptr<IAssignControllerActionWriter> assignControllerAction) override
            {
                _assignControllerAction = assignControllerAction;
            }

            OPENSCENARIOLIB_EXP void SetOverrideControllerValueAction(std::shared_ptr<IOverrideControllerValueActionWriter> overrideControllerValueAction) override
            {
                _overrideControllerValueAction = overrideControllerValueAction;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControllerActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IControllerAction).name())
                    return std::dynamic_pointer_cast<IControllerAction>(shared_from_this());
                else if (classifier == typeid(IControllerActionWriter).name())
                    return std::dynamic_pointer_cast<IControllerActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ControllerAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignControllerActionWriter> GetWriterAssignControllerAction() const override
            {
                return std::dynamic_pointer_cast<IAssignControllerActionWriter>(_assignControllerAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideControllerValueActionWriter> GetWriterOverrideControllerValueAction() const override
            {
                return std::dynamic_pointer_cast<IOverrideControllerValueActionWriter>(_overrideControllerValueAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IControllerCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerCatalogLocationImpl: public BaseImpl, public IControllerCatalogLocationWriter, public std::enable_shared_from_this<ControllerCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP ControllerCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControllerCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IControllerCatalogLocation).name())
                    return std::dynamic_pointer_cast<IControllerCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IControllerCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IControllerCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ControllerCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IControllerDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerDistributionImpl: public BaseImpl, public IControllerDistributionWriter, public std::enable_shared_from_this<ControllerDistributionImpl> 
        {
        private:
            std::vector<std::shared_ptr<IControllerDistributionEntryWriter>> _controllerDistributionEntries {};
        public:

            OPENSCENARIOLIB_EXP ControllerDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerDistributionEntry>> GetControllerDistributionEntries() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerDistributionEntryWriter>> GetWriterControllerDistributionEntries() const override
            {
                return _controllerDistributionEntries;
            }

            OPENSCENARIOLIB_EXP int GetControllerDistributionEntriesSize() const override
            {
                return static_cast<int>(_controllerDistributionEntries.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistributionEntry> GetControllerDistributionEntriesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _controllerDistributionEntries.size() > index)
                {
                    return _controllerDistributionEntries[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetControllerDistributionEntries(std::vector<std::shared_ptr<IControllerDistributionEntryWriter>>& controllerDistributionEntries) override
            {
                _controllerDistributionEntries = controllerDistributionEntries;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControllerDistributionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IControllerDistribution).name())
                    return std::dynamic_pointer_cast<IControllerDistribution>(shared_from_this());
                else if (classifier == typeid(IControllerDistributionWriter).name())
                    return std::dynamic_pointer_cast<IControllerDistributionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ControllerDistribution";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IControllerDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerDistributionEntryImpl: public BaseImpl, public IControllerDistributionEntryWriter, public std::enable_shared_from_this<ControllerDistributionEntryImpl> 
        {
        private:
            double _weight {};
            std::shared_ptr<IControllerWriter> _controller {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
        public:

            OPENSCENARIOLIB_EXP ControllerDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override
            {
                _weight = weight;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
            }

            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override
            {
                _controller = controller;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _controller = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ControllerDistributionEntryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IControllerDistributionEntry).name())
                    return std::dynamic_pointer_cast<IControllerDistributionEntry>(shared_from_this());
                else if (classifier == typeid(IControllerDistributionEntryWriter).name())
                    return std::dynamic_pointer_cast<IControllerDistributionEntryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__WEIGHT)
                {
                    return GetWeight();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ControllerDistributionEntry";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT, parameterName, nullTextMarker /*no textmarker*/);
                _weight = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override
            {
                auto weight = OSC_CONSTANTS::ATTRIBUTE__WEIGHT;
                return GetParameterNameFromAttribute(weight);
            }

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override
            {
                return std::dynamic_pointer_cast<IControllerWriter>(_controller);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ICustomCommandAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICustomCommandAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CustomCommandActionImpl: public BaseImpl, public ICustomCommandActionWriter, public std::enable_shared_from_this<CustomCommandActionImpl> 
        {
        private:
            std::string _content {};
            std::string _type {};
        public:

            OPENSCENARIOLIB_EXP CustomCommandActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetContent() const override;
            OPENSCENARIOLIB_EXP std::string GetType() const override;


            OPENSCENARIOLIB_EXP void SetContent(const std::string content) override
            {
                _content = content;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTENT);
            }

            OPENSCENARIOLIB_EXP void SetType(const std::string type) override
            {
                _type = type;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(CustomCommandActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ICustomCommandAction).name())
                    return std::dynamic_pointer_cast<ICustomCommandAction>(shared_from_this());
                else if (classifier == typeid(ICustomCommandActionWriter).name())
                    return std::dynamic_pointer_cast<ICustomCommandActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "CustomCommandAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToContent(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTENT, parameterName, nullTextMarker /*no textmarker*/);
                _content = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _type = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromContent() const override
            {
                auto content = OSC_CONSTANTS::ATTRIBUTE__CONTENT;
                return GetParameterNameFromAttribute(content);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override
            {
                auto type = OSC_CONSTANTS::ATTRIBUTE__TYPE;
                return GetParameterNameFromAttribute(type);
            }

            OPENSCENARIOLIB_EXP bool IsContentParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONTENT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IDeleteEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeleteEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeleteEntityActionImpl: public BaseImpl, public IDeleteEntityActionWriter, public std::enable_shared_from_this<DeleteEntityActionImpl> 
        {
        private:
        public:

            OPENSCENARIOLIB_EXP DeleteEntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(DeleteEntityActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IDeleteEntityAction).name())
                    return std::dynamic_pointer_cast<IDeleteEntityAction>(shared_from_this());
                else if (classifier == typeid(IDeleteEntityActionWriter).name())
                    return std::dynamic_pointer_cast<IDeleteEntityActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "DeleteEntityAction";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IDimensions. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDimensions)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DimensionsImpl: public BaseImpl, public IDimensionsWriter, public std::enable_shared_from_this<DimensionsImpl> 
        {
        private:
            double _height {};
            double _length {};
            double _width {};
        public:

            OPENSCENARIOLIB_EXP DimensionsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetHeight() const override;
            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP double GetWidth() const override;


            OPENSCENARIOLIB_EXP void SetHeight(const double height) override
            {
                _height = height;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__HEIGHT);
            }

            OPENSCENARIOLIB_EXP void SetLength(const double length) override
            {
                _length = length;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LENGTH);
            }

            OPENSCENARIOLIB_EXP void SetWidth(const double width) override
            {
                _width = width;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WIDTH);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(DimensionsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IDimensions).name())
                    return std::dynamic_pointer_cast<IDimensions>(shared_from_this());
                else if (classifier == typeid(IDimensionsWriter).name())
                    return std::dynamic_pointer_cast<IDimensionsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__HEIGHT)
                {
                    return GetHeight();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__LENGTH)
                {
                    return GetLength();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__WIDTH)
                {
                    return GetWidth();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Dimensions";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToHeight(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__HEIGHT, parameterName, nullTextMarker /*no textmarker*/);
                _height = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LENGTH, parameterName, nullTextMarker /*no textmarker*/);
                _length = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToWidth(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WIDTH, parameterName, nullTextMarker /*no textmarker*/);
                _width = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromHeight() const override
            {
                auto height = OSC_CONSTANTS::ATTRIBUTE__HEIGHT;
                return GetParameterNameFromAttribute(height);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override
            {
                auto length = OSC_CONSTANTS::ATTRIBUTE__LENGTH;
                return GetParameterNameFromAttribute(length);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromWidth() const override
            {
                auto width = OSC_CONSTANTS::ATTRIBUTE__WIDTH;
                return GetParameterNameFromAttribute(width);
            }

            OPENSCENARIOLIB_EXP bool IsHeightParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__HEIGHT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LENGTH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsWidthParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__WIDTH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IDirectory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDirectory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DirectoryImpl: public BaseImpl, public IDirectoryWriter, public std::enable_shared_from_this<DirectoryImpl> 
        {
        private:
            std::string _path {};
        public:

            OPENSCENARIOLIB_EXP DirectoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetPath() const override;


            OPENSCENARIOLIB_EXP void SetPath(const std::string path) override
            {
                _path = path;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(DirectoryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IDirectory).name())
                    return std::dynamic_pointer_cast<IDirectory>(shared_from_this());
                else if (classifier == typeid(IDirectoryWriter).name())
                    return std::dynamic_pointer_cast<IDirectoryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Directory";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPath(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH, parameterName, nullTextMarker /*no textmarker*/);
                _path = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPath() const override
            {
                auto path = OSC_CONSTANTS::ATTRIBUTE__PATH;
                return GetParameterNameFromAttribute(path);
            }

            OPENSCENARIOLIB_EXP bool IsPathParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PATH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistanceConditionImpl: public BaseImpl, public IDistanceConditionWriter, public std::enable_shared_from_this<DistanceConditionImpl> 
        {
        private:
            bool _alongRoute {};
            bool _freespace {};
            Rule _rule {};
            double _value {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP DistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override
            {
                _alongRoute = alongRoute;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(DistanceConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IDistanceCondition).name())
                    return std::dynamic_pointer_cast<IDistanceCondition>(shared_from_this());
                else if (classifier == typeid(IDistanceConditionWriter).name())
                    return std::dynamic_pointer_cast<IDistanceConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE)
                {
                    return GetAlongRoute();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "DistanceCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE, parameterName, nullTextMarker /*no textmarker*/);
                _alongRoute = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override
            {
                auto alongRoute = OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE;
                return GetParameterNameFromAttribute(alongRoute);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IDynamicConstraints. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDynamicConstraints)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DynamicConstraintsImpl: public BaseImpl, public IDynamicConstraintsWriter, public std::enable_shared_from_this<DynamicConstraintsImpl> 
        {
        private:
            double _maxAcceleration {};
            double _maxDeceleration {};
            double _maxSpeed {};
        public:

            OPENSCENARIOLIB_EXP DynamicConstraintsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetMaxAcceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxDeceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMaxAcceleration(const double maxAcceleration) override
            {
                _maxAcceleration = maxAcceleration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION);
            }

            OPENSCENARIOLIB_EXP void SetMaxDeceleration(const double maxDeceleration) override
            {
                _maxDeceleration = maxDeceleration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION);
            }

            OPENSCENARIOLIB_EXP void SetMaxSpeed(const double maxSpeed) override
            {
                _maxSpeed = maxSpeed;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(DynamicConstraintsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IDynamicConstraints).name())
                    return std::dynamic_pointer_cast<IDynamicConstraints>(shared_from_this());
                else if (classifier == typeid(IDynamicConstraintsWriter).name())
                    return std::dynamic_pointer_cast<IDynamicConstraintsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION)
                {
                    return GetMaxAcceleration();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION)
                {
                    return GetMaxDeceleration();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED)
                {
                    return GetMaxSpeed();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "DynamicConstraints";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAcceleration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION, parameterName, nullTextMarker /*no textmarker*/);
                _maxAcceleration = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDeceleration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION, parameterName, nullTextMarker /*no textmarker*/);
                _maxDeceleration = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSpeed(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED, parameterName, nullTextMarker /*no textmarker*/);
                _maxSpeed = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAcceleration() const override
            {
                auto maxAcceleration = OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION;
                return GetParameterNameFromAttribute(maxAcceleration);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDeceleration() const override
            {
                auto maxDeceleration = OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION;
                return GetParameterNameFromAttribute(maxDeceleration);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSpeed() const override
            {
                auto maxSpeed = OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED;
                return GetParameterNameFromAttribute(maxSpeed);
            }

            OPENSCENARIOLIB_EXP bool IsMaxAccelerationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMaxDecelerationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMaxSpeedParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEndOfRoadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEndOfRoadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EndOfRoadConditionImpl: public BaseImpl, public IEndOfRoadConditionWriter, public std::enable_shared_from_this<EndOfRoadConditionImpl> 
        {
        private:
            double _duration {};
        public:

            OPENSCENARIOLIB_EXP EndOfRoadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override
            {
                _duration = duration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EndOfRoadConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEndOfRoadCondition).name())
                    return std::dynamic_pointer_cast<IEndOfRoadCondition>(shared_from_this());
                else if (classifier == typeid(IEndOfRoadConditionWriter).name())
                    return std::dynamic_pointer_cast<IEndOfRoadConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DURATION)
                {
                    return GetDuration();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EndOfRoadCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION, parameterName, nullTextMarker /*no textmarker*/);
                _duration = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override
            {
                auto duration = OSC_CONSTANTS::ATTRIBUTE__DURATION;
                return GetParameterNameFromAttribute(duration);
            }

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DURATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntitiesImpl: public BaseImpl, public IEntitiesWriter, public std::enable_shared_from_this<EntitiesImpl> 
        {
        private:
            std::vector<std::shared_ptr<IScenarioObjectWriter>> _scenarioObjects {};
            std::vector<std::shared_ptr<IEntitySelectionWriter>> _entitySelections {};
        public:

            OPENSCENARIOLIB_EXP EntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IScenarioObject>> GetScenarioObjects() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IScenarioObjectWriter>> GetWriterScenarioObjects() const override
            {
                return _scenarioObjects;
            }

            OPENSCENARIOLIB_EXP int GetScenarioObjectsSize() const override
            {
                return static_cast<int>(_scenarioObjects.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObject> GetScenarioObjectsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _scenarioObjects.size() > index)
                {
                    return _scenarioObjects[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntitySelection>> GetEntitySelections() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntitySelectionWriter>> GetWriterEntitySelections() const override
            {
                return _entitySelections;
            }

            OPENSCENARIOLIB_EXP int GetEntitySelectionsSize() const override
            {
                return static_cast<int>(_entitySelections.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntitySelection> GetEntitySelectionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _entitySelections.size() > index)
                {
                    return _entitySelections[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetScenarioObjects(std::vector<std::shared_ptr<IScenarioObjectWriter>>& scenarioObjects) override
            {
                _scenarioObjects = scenarioObjects;
            }

            OPENSCENARIOLIB_EXP void SetEntitySelections(std::vector<std::shared_ptr<IEntitySelectionWriter>>& entitySelections) override
            {
                _entitySelections = entitySelections;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntitiesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntities).name())
                    return std::dynamic_pointer_cast<IEntities>(shared_from_this());
                else if (classifier == typeid(IEntitiesWriter).name())
                    return std::dynamic_pointer_cast<IEntitiesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Entities";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityActionImpl: public BaseImpl, public IEntityActionWriter, public std::enable_shared_from_this<EntityActionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            std::shared_ptr<IAddEntityActionWriter> _addEntityAction {};
            std::shared_ptr<IDeleteEntityActionWriter> _deleteEntityAction {};
        public:

            OPENSCENARIOLIB_EXP EntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAddEntityAction> GetAddEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeleteEntityAction> GetDeleteEntityAction() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetAddEntityAction(std::shared_ptr<IAddEntityActionWriter> addEntityAction) override
            {
                _addEntityAction = addEntityAction;
                _deleteEntityAction = {};
            }

            OPENSCENARIOLIB_EXP void SetDeleteEntityAction(std::shared_ptr<IDeleteEntityActionWriter> deleteEntityAction) override
            {
                _deleteEntityAction = deleteEntityAction;
                _addEntityAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntityActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntityAction).name())
                    return std::dynamic_pointer_cast<IEntityAction>(shared_from_this());
                else if (classifier == typeid(IEntityActionWriter).name())
                    return std::dynamic_pointer_cast<IEntityActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EntityAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAddEntityActionWriter> GetWriterAddEntityAction() const override
            {
                return std::dynamic_pointer_cast<IAddEntityActionWriter>(_addEntityAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeleteEntityActionWriter> GetWriterDeleteEntityAction() const override
            {
                return std::dynamic_pointer_cast<IDeleteEntityActionWriter>(_deleteEntityAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntityCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityConditionImpl: public BaseImpl, public IEntityConditionWriter, public std::enable_shared_from_this<EntityConditionImpl> 
        {
        private:
            std::shared_ptr<IEndOfRoadConditionWriter> _endOfRoadCondition {};
            std::shared_ptr<ICollisionConditionWriter> _collisionCondition {};
            std::shared_ptr<IOffroadConditionWriter> _offroadCondition {};
            std::shared_ptr<ITimeHeadwayConditionWriter> _timeHeadwayCondition {};
            std::shared_ptr<ITimeToCollisionConditionWriter> _timeToCollisionCondition {};
            std::shared_ptr<IAccelerationConditionWriter> _accelerationCondition {};
            std::shared_ptr<IStandStillConditionWriter> _standStillCondition {};
            std::shared_ptr<ISpeedConditionWriter> _speedCondition {};
            std::shared_ptr<IRelativeSpeedConditionWriter> _relativeSpeedCondition {};
            std::shared_ptr<ITraveledDistanceConditionWriter> _traveledDistanceCondition {};
            std::shared_ptr<IReachPositionConditionWriter> _reachPositionCondition {};
            std::shared_ptr<IDistanceConditionWriter> _distanceCondition {};
            std::shared_ptr<IRelativeDistanceConditionWriter> _relativeDistanceCondition {};
        public:

            OPENSCENARIOLIB_EXP EntityConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEndOfRoadCondition> GetEndOfRoadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICollisionCondition> GetCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOffroadCondition> GetOffroadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeHeadwayCondition> GetTimeHeadwayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionCondition> GetTimeToCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAccelerationCondition> GetAccelerationCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStandStillCondition> GetStandStillCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedCondition> GetSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedCondition> GetRelativeSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITraveledDistanceCondition> GetTraveledDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IReachPositionCondition> GetReachPositionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistanceCondition> GetDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeDistanceCondition> GetRelativeDistanceCondition() const override;


            OPENSCENARIOLIB_EXP void SetEndOfRoadCondition(std::shared_ptr<IEndOfRoadConditionWriter> endOfRoadCondition) override
            {
                _endOfRoadCondition = endOfRoadCondition;
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetCollisionCondition(std::shared_ptr<ICollisionConditionWriter> collisionCondition) override
            {
                _collisionCondition = collisionCondition;
                _endOfRoadCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetOffroadCondition(std::shared_ptr<IOffroadConditionWriter> offroadCondition) override
            {
                _offroadCondition = offroadCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTimeHeadwayCondition(std::shared_ptr<ITimeHeadwayConditionWriter> timeHeadwayCondition) override
            {
                _timeHeadwayCondition = timeHeadwayCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTimeToCollisionCondition(std::shared_ptr<ITimeToCollisionConditionWriter> timeToCollisionCondition) override
            {
                _timeToCollisionCondition = timeToCollisionCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetAccelerationCondition(std::shared_ptr<IAccelerationConditionWriter> accelerationCondition) override
            {
                _accelerationCondition = accelerationCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetStandStillCondition(std::shared_ptr<IStandStillConditionWriter> standStillCondition) override
            {
                _standStillCondition = standStillCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetSpeedCondition(std::shared_ptr<ISpeedConditionWriter> speedCondition) override
            {
                _speedCondition = speedCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeSpeedCondition(std::shared_ptr<IRelativeSpeedConditionWriter> relativeSpeedCondition) override
            {
                _relativeSpeedCondition = relativeSpeedCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetTraveledDistanceCondition(std::shared_ptr<ITraveledDistanceConditionWriter> traveledDistanceCondition) override
            {
                _traveledDistanceCondition = traveledDistanceCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetReachPositionCondition(std::shared_ptr<IReachPositionConditionWriter> reachPositionCondition) override
            {
                _reachPositionCondition = reachPositionCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _distanceCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetDistanceCondition(std::shared_ptr<IDistanceConditionWriter> distanceCondition) override
            {
                _distanceCondition = distanceCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _relativeDistanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeDistanceCondition(std::shared_ptr<IRelativeDistanceConditionWriter> relativeDistanceCondition) override
            {
                _relativeDistanceCondition = relativeDistanceCondition;
                _endOfRoadCondition = {};
                _collisionCondition = {};
                _offroadCondition = {};
                _timeHeadwayCondition = {};
                _timeToCollisionCondition = {};
                _accelerationCondition = {};
                _standStillCondition = {};
                _speedCondition = {};
                _relativeSpeedCondition = {};
                _traveledDistanceCondition = {};
                _reachPositionCondition = {};
                _distanceCondition = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntityConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntityCondition).name())
                    return std::dynamic_pointer_cast<IEntityCondition>(shared_from_this());
                else if (classifier == typeid(IEntityConditionWriter).name())
                    return std::dynamic_pointer_cast<IEntityConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EntityCondition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEndOfRoadConditionWriter> GetWriterEndOfRoadCondition() const override
            {
                return std::dynamic_pointer_cast<IEndOfRoadConditionWriter>(_endOfRoadCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICollisionConditionWriter> GetWriterCollisionCondition() const override
            {
                return std::dynamic_pointer_cast<ICollisionConditionWriter>(_collisionCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOffroadConditionWriter> GetWriterOffroadCondition() const override
            {
                return std::dynamic_pointer_cast<IOffroadConditionWriter>(_offroadCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeHeadwayConditionWriter> GetWriterTimeHeadwayCondition() const override
            {
                return std::dynamic_pointer_cast<ITimeHeadwayConditionWriter>(_timeHeadwayCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionWriter> GetWriterTimeToCollisionCondition() const override
            {
                return std::dynamic_pointer_cast<ITimeToCollisionConditionWriter>(_timeToCollisionCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAccelerationConditionWriter> GetWriterAccelerationCondition() const override
            {
                return std::dynamic_pointer_cast<IAccelerationConditionWriter>(_accelerationCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IStandStillConditionWriter> GetWriterStandStillCondition() const override
            {
                return std::dynamic_pointer_cast<IStandStillConditionWriter>(_standStillCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedConditionWriter> GetWriterSpeedCondition() const override
            {
                return std::dynamic_pointer_cast<ISpeedConditionWriter>(_speedCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedConditionWriter> GetWriterRelativeSpeedCondition() const override
            {
                return std::dynamic_pointer_cast<IRelativeSpeedConditionWriter>(_relativeSpeedCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITraveledDistanceConditionWriter> GetWriterTraveledDistanceCondition() const override
            {
                return std::dynamic_pointer_cast<ITraveledDistanceConditionWriter>(_traveledDistanceCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IReachPositionConditionWriter> GetWriterReachPositionCondition() const override
            {
                return std::dynamic_pointer_cast<IReachPositionConditionWriter>(_reachPositionCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistanceConditionWriter> GetWriterDistanceCondition() const override
            {
                return std::dynamic_pointer_cast<IDistanceConditionWriter>(_distanceCondition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeDistanceConditionWriter> GetWriterRelativeDistanceCondition() const override
            {
                return std::dynamic_pointer_cast<IRelativeDistanceConditionWriter>(_relativeDistanceCondition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntityObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityObjectImpl: public BaseImpl, public IEntityObjectWriter, public std::enable_shared_from_this<EntityObjectImpl> 
        {
        private:
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            std::shared_ptr<IVehicleWriter> _vehicle {};
            std::shared_ptr<IPedestrianWriter> _pedestrian {};
            std::shared_ptr<IMiscObjectWriter> _miscObject {};
        public:

            OPENSCENARIOLIB_EXP EntityObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicle> GetVehicle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrian> GetPedestrian() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObject> GetMiscObject() const override;


            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _vehicle = {};
                _pedestrian = {};
                _miscObject = {};
            }

            OPENSCENARIOLIB_EXP void SetVehicle(std::shared_ptr<IVehicleWriter> vehicle) override
            {
                _vehicle = vehicle;
                _catalogReference = {};
                _pedestrian = {};
                _miscObject = {};
            }

            OPENSCENARIOLIB_EXP void SetPedestrian(std::shared_ptr<IPedestrianWriter> pedestrian) override
            {
                _pedestrian = pedestrian;
                _catalogReference = {};
                _vehicle = {};
                _miscObject = {};
            }

            OPENSCENARIOLIB_EXP void SetMiscObject(std::shared_ptr<IMiscObjectWriter> miscObject) override
            {
                _miscObject = miscObject;
                _catalogReference = {};
                _vehicle = {};
                _pedestrian = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntityObjectImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntityObject).name())
                    return std::dynamic_pointer_cast<IEntityObject>(shared_from_this());
                else if (classifier == typeid(IEntityObjectWriter).name())
                    return std::dynamic_pointer_cast<IEntityObjectWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EntityObject";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleWriter> GetWriterVehicle() const override
            {
                return std::dynamic_pointer_cast<IVehicleWriter>(_vehicle);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianWriter> GetWriterPedestrian() const override
            {
                return std::dynamic_pointer_cast<IPedestrianWriter>(_pedestrian);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectWriter> GetWriterMiscObject() const override
            {
                return std::dynamic_pointer_cast<IMiscObjectWriter>(_miscObject);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntityRef. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityRef)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityRefImpl: public BaseImpl, public IEntityRefWriter, public std::enable_shared_from_this<EntityRefImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
        public:

            OPENSCENARIOLIB_EXP EntityRefImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntityRefImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntityRef).name())
                    return std::dynamic_pointer_cast<IEntityRef>(shared_from_this());
                else if (classifier == typeid(IEntityRefWriter).name())
                    return std::dynamic_pointer_cast<IEntityRefWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EntityRef";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEntitySelection. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntitySelection)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntitySelectionImpl: public BaseImpl, public IEntitySelectionWriter, public std::enable_shared_from_this<EntitySelectionImpl> 
        {
        private:
            std::string _name {};
            std::shared_ptr<ISelectedEntitiesWriter> _members {};
        public:

            OPENSCENARIOLIB_EXP EntitySelectionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISelectedEntities> GetMembers() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetMembers(std::shared_ptr<ISelectedEntitiesWriter> members) override
            {
                _members = members;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EntitySelectionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEntitySelection).name())
                    return std::dynamic_pointer_cast<IEntitySelection>(shared_from_this());
                else if (classifier == typeid(IEntitySelectionWriter).name())
                    return std::dynamic_pointer_cast<IEntitySelectionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EntitySelection";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISelectedEntitiesWriter> GetWriterMembers() const override
            {
                return std::dynamic_pointer_cast<ISelectedEntitiesWriter>(_members);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEnvironment. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironment)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentImpl: public BaseImpl, public IEnvironmentWriter, public std::enable_shared_from_this<EnvironmentImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<ITimeOfDayWriter> _timeOfDay {};
            std::shared_ptr<IWeatherWriter> _weather {};
            std::shared_ptr<IRoadConditionWriter> _roadCondition {};
        public:

            OPENSCENARIOLIB_EXP EnvironmentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDay> GetTimeOfDay() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWeather> GetWeather() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadCondition> GetRoadCondition() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetTimeOfDay(std::shared_ptr<ITimeOfDayWriter> timeOfDay) override
            {
                _timeOfDay = timeOfDay;
            }

            OPENSCENARIOLIB_EXP void SetWeather(std::shared_ptr<IWeatherWriter> weather) override
            {
                _weather = weather;
            }

            OPENSCENARIOLIB_EXP void SetRoadCondition(std::shared_ptr<IRoadConditionWriter> roadCondition) override
            {
                _roadCondition = roadCondition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EnvironmentImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEnvironment).name())
                    return std::dynamic_pointer_cast<IEnvironment>(shared_from_this());
                else if (classifier == typeid(IEnvironmentWriter).name())
                    return std::dynamic_pointer_cast<IEnvironmentWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Environment";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayWriter> GetWriterTimeOfDay() const override
            {
                return std::dynamic_pointer_cast<ITimeOfDayWriter>(_timeOfDay);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IWeatherWriter> GetWriterWeather() const override
            {
                return std::dynamic_pointer_cast<IWeatherWriter>(_weather);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadConditionWriter> GetWriterRoadCondition() const override
            {
                return std::dynamic_pointer_cast<IRoadConditionWriter>(_roadCondition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEnvironmentAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironmentAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentActionImpl: public BaseImpl, public IEnvironmentActionWriter, public std::enable_shared_from_this<EnvironmentActionImpl> 
        {
        private:
            std::shared_ptr<IEnvironmentWriter> _environment {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
        public:

            OPENSCENARIOLIB_EXP EnvironmentActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironment> GetEnvironment() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetEnvironment(std::shared_ptr<IEnvironmentWriter> environment) override
            {
                _environment = environment;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _environment = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EnvironmentActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEnvironmentAction).name())
                    return std::dynamic_pointer_cast<IEnvironmentAction>(shared_from_this());
                else if (classifier == typeid(IEnvironmentActionWriter).name())
                    return std::dynamic_pointer_cast<IEnvironmentActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EnvironmentAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentWriter> GetWriterEnvironment() const override
            {
                return std::dynamic_pointer_cast<IEnvironmentWriter>(_environment);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEnvironmentCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironmentCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentCatalogLocationImpl: public BaseImpl, public IEnvironmentCatalogLocationWriter, public std::enable_shared_from_this<EnvironmentCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP EnvironmentCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EnvironmentCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEnvironmentCatalogLocation).name())
                    return std::dynamic_pointer_cast<IEnvironmentCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IEnvironmentCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IEnvironmentCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "EnvironmentCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IEvent. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEvent)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EventImpl: public BaseImpl, public IEventWriter, public std::enable_shared_from_this<EventImpl> 
        {
        private:
            uint32_t _maximumExecutionCount {};
            std::string _name {};
            Priority _priority {};
            std::vector<std::shared_ptr<IActionWriter>> _actions {};
            std::shared_ptr<ITriggerWriter> _startTrigger {};
        public:

            OPENSCENARIOLIB_EXP EventImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP uint32_t GetMaximumExecutionCount() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP Priority GetPriority() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAction>> GetActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IActionWriter>> GetWriterActions() const override
            {
                return _actions;
            }

            OPENSCENARIOLIB_EXP int GetActionsSize() const override
            {
                return static_cast<int>(_actions.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAction> GetActionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _actions.size() > index)
                {
                    return _actions[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStartTrigger() const override;


            OPENSCENARIOLIB_EXP void SetMaximumExecutionCount(const uint32_t maximumExecutionCount) override
            {
                _maximumExecutionCount = maximumExecutionCount;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetPriority(const Priority priority) override
            {
                _priority = priority;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PRIORITY);
            }

            OPENSCENARIOLIB_EXP void SetActions(std::vector<std::shared_ptr<IActionWriter>>& actions) override
            {
                _actions = actions;
            }

            OPENSCENARIOLIB_EXP void SetStartTrigger(std::shared_ptr<ITriggerWriter> startTrigger) override
            {
                _startTrigger = startTrigger;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(EventImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IEvent).name())
                    return std::dynamic_pointer_cast<IEvent>(shared_from_this());
                else if (classifier == typeid(IEventWriter).name())
                    return std::dynamic_pointer_cast<IEventWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT)
                {
                    return GetMaximumExecutionCount();
                }
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Event";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaximumExecutionCount(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT, parameterName, nullTextMarker /*no textmarker*/);
                _maximumExecutionCount = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPriority(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PRIORITY, parameterName, nullTextMarker /*no textmarker*/);
                _priority = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaximumExecutionCount() const override
            {
                auto maximumExecutionCount = OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT;
                return GetParameterNameFromAttribute(maximumExecutionCount);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPriority() const override
            {
                auto priority = OSC_CONSTANTS::ATTRIBUTE__PRIORITY;
                return GetParameterNameFromAttribute(priority);
            }

            OPENSCENARIOLIB_EXP bool IsMaximumExecutionCountParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPriorityParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PRIORITY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStartTrigger() const override
            {
                return std::dynamic_pointer_cast<ITriggerWriter>(_startTrigger);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IFile. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFile)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FileImpl: public BaseImpl, public IFileWriter, public std::enable_shared_from_this<FileImpl> 
        {
        private:
            std::string _filepath {};
        public:

            OPENSCENARIOLIB_EXP FileImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetFilepath() const override;


            OPENSCENARIOLIB_EXP void SetFilepath(const std::string filepath) override
            {
                _filepath = filepath;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FILEPATH);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(FileImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IFile).name())
                    return std::dynamic_pointer_cast<IFile>(shared_from_this());
                else if (classifier == typeid(IFileWriter).name())
                    return std::dynamic_pointer_cast<IFileWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "File";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFilepath(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FILEPATH, parameterName, nullTextMarker /*no textmarker*/);
                _filepath = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFilepath() const override
            {
                auto filepath = OSC_CONSTANTS::ATTRIBUTE__FILEPATH;
                return GetParameterNameFromAttribute(filepath);
            }

            OPENSCENARIOLIB_EXP bool IsFilepathParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FILEPATH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IFileHeader. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFileHeader)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FileHeaderImpl: public BaseImpl, public IFileHeaderWriter, public std::enable_shared_from_this<FileHeaderImpl> 
        {
        private:
            std::string _author {};
            DateTime _date {};
            std::string _description {};
            uint16_t _revMajor {};
            uint16_t _revMinor {};
        public:

            OPENSCENARIOLIB_EXP FileHeaderImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetAuthor() const override;
            OPENSCENARIOLIB_EXP DateTime GetDate() const override;
            OPENSCENARIOLIB_EXP std::string GetDescription() const override;
            OPENSCENARIOLIB_EXP uint16_t GetRevMajor() const override;
            OPENSCENARIOLIB_EXP uint16_t GetRevMinor() const override;


            OPENSCENARIOLIB_EXP void SetAuthor(const std::string author) override
            {
                _author = author;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__AUTHOR);
            }

            OPENSCENARIOLIB_EXP void SetDate(const DateTime date) override
            {
                _date = date;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE);
            }

            OPENSCENARIOLIB_EXP void SetDescription(const std::string description) override
            {
                _description = description;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DESCRIPTION);
            }

            OPENSCENARIOLIB_EXP void SetRevMajor(const uint16_t revMajor) override
            {
                _revMajor = revMajor;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REV_MAJOR);
            }

            OPENSCENARIOLIB_EXP void SetRevMinor(const uint16_t revMinor) override
            {
                _revMinor = revMinor;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REV_MINOR);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(FileHeaderImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IFileHeader).name())
                    return std::dynamic_pointer_cast<IFileHeader>(shared_from_this());
                else if (classifier == typeid(IFileHeaderWriter).name())
                    return std::dynamic_pointer_cast<IFileHeaderWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__REV_MAJOR)
                {
                    return GetRevMajor();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__REV_MINOR)
                {
                    return GetRevMinor();
                }
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DATE)
                {
                    return GetDate();
                }
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "FileHeader";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAuthor(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__AUTHOR, parameterName, nullTextMarker /*no textmarker*/);
                _author = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDate(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE, parameterName, nullTextMarker /*no textmarker*/);
                _date = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDescription(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DESCRIPTION, parameterName, nullTextMarker /*no textmarker*/);
                _description = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRevMajor(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REV_MAJOR, parameterName, nullTextMarker /*no textmarker*/);
                _revMajor = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRevMinor(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REV_MINOR, parameterName, nullTextMarker /*no textmarker*/);
                _revMinor = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAuthor() const override
            {
                auto author = OSC_CONSTANTS::ATTRIBUTE__AUTHOR;
                return GetParameterNameFromAttribute(author);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDate() const override
            {
                auto date = OSC_CONSTANTS::ATTRIBUTE__DATE;
                return GetParameterNameFromAttribute(date);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDescription() const override
            {
                auto description = OSC_CONSTANTS::ATTRIBUTE__DESCRIPTION;
                return GetParameterNameFromAttribute(description);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRevMajor() const override
            {
                auto revMajor = OSC_CONSTANTS::ATTRIBUTE__REV_MAJOR;
                return GetParameterNameFromAttribute(revMajor);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRevMinor() const override
            {
                auto revMinor = OSC_CONSTANTS::ATTRIBUTE__REV_MINOR;
                return GetParameterNameFromAttribute(revMinor);
            }

            OPENSCENARIOLIB_EXP bool IsAuthorParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__AUTHOR);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDescriptionParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DESCRIPTION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRevMajorParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__REV_MAJOR);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRevMinorParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__REV_MINOR);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IFinalSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFinalSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FinalSpeedImpl: public BaseImpl, public IFinalSpeedWriter, public std::enable_shared_from_this<FinalSpeedImpl> 
        {
        private:
            std::shared_ptr<IAbsoluteSpeedWriter> _absoluteSpeed {};
            std::shared_ptr<IRelativeSpeedToMasterWriter> _relativeSpeedToMaster {};
        public:

            OPENSCENARIOLIB_EXP FinalSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteSpeed> GetAbsoluteSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedToMaster> GetRelativeSpeedToMaster() const override;


            OPENSCENARIOLIB_EXP void SetAbsoluteSpeed(std::shared_ptr<IAbsoluteSpeedWriter> absoluteSpeed) override
            {
                _absoluteSpeed = absoluteSpeed;
                _relativeSpeedToMaster = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeSpeedToMaster(std::shared_ptr<IRelativeSpeedToMasterWriter> relativeSpeedToMaster) override
            {
                _relativeSpeedToMaster = relativeSpeedToMaster;
                _absoluteSpeed = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(FinalSpeedImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IFinalSpeed).name())
                    return std::dynamic_pointer_cast<IFinalSpeed>(shared_from_this());
                else if (classifier == typeid(IFinalSpeedWriter).name())
                    return std::dynamic_pointer_cast<IFinalSpeedWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "FinalSpeed";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteSpeedWriter> GetWriterAbsoluteSpeed() const override
            {
                return std::dynamic_pointer_cast<IAbsoluteSpeedWriter>(_absoluteSpeed);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedToMasterWriter> GetWriterRelativeSpeedToMaster() const override
            {
                return std::dynamic_pointer_cast<IRelativeSpeedToMasterWriter>(_relativeSpeedToMaster);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IFog. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFog)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FogImpl: public BaseImpl, public IFogWriter, public std::enable_shared_from_this<FogImpl> 
        {
        private:
            double _visualRange {};
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
        public:

            OPENSCENARIOLIB_EXP FogImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetVisualRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;


            OPENSCENARIOLIB_EXP void SetVisualRange(const double visualRange) override
            {
                _visualRange = visualRange;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VISUAL_RANGE);
            }

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override
            {
                _boundingBox = boundingBox;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(FogImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IFog).name())
                    return std::dynamic_pointer_cast<IFog>(shared_from_this());
                else if (classifier == typeid(IFogWriter).name())
                    return std::dynamic_pointer_cast<IFogWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VISUAL_RANGE)
                {
                    return GetVisualRange();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Fog";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToVisualRange(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VISUAL_RANGE, parameterName, nullTextMarker /*no textmarker*/);
                _visualRange = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromVisualRange() const override
            {
                auto visualRange = OSC_CONSTANTS::ATTRIBUTE__VISUAL_RANGE;
                return GetParameterNameFromAttribute(visualRange);
            }

            OPENSCENARIOLIB_EXP bool IsVisualRangeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VISUAL_RANGE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override
            {
                return std::dynamic_pointer_cast<IBoundingBoxWriter>(_boundingBox);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IFollowTrajectoryAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFollowTrajectoryAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FollowTrajectoryActionImpl: public BaseImpl, public IFollowTrajectoryActionWriter, public std::enable_shared_from_this<FollowTrajectoryActionImpl> 
        {
        private:
            std::shared_ptr<ITrajectoryWriter> _trajectory {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            std::shared_ptr<ITimeReferenceWriter> _timeReference {};
            std::shared_ptr<ITrajectoryFollowingModeWriter> _trajectoryFollowingMode {};
        public:

            OPENSCENARIOLIB_EXP FollowTrajectoryActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectory> GetTrajectory() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeReference> GetTimeReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryFollowingMode> GetTrajectoryFollowingMode() const override;


            OPENSCENARIOLIB_EXP void SetTrajectory(std::shared_ptr<ITrajectoryWriter> trajectory) override
            {
                _trajectory = trajectory;
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
            }

            OPENSCENARIOLIB_EXP void SetTimeReference(std::shared_ptr<ITimeReferenceWriter> timeReference) override
            {
                _timeReference = timeReference;
            }

            OPENSCENARIOLIB_EXP void SetTrajectoryFollowingMode(std::shared_ptr<ITrajectoryFollowingModeWriter> trajectoryFollowingMode) override
            {
                _trajectoryFollowingMode = trajectoryFollowingMode;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(FollowTrajectoryActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IFollowTrajectoryAction).name())
                    return std::dynamic_pointer_cast<IFollowTrajectoryAction>(shared_from_this());
                else if (classifier == typeid(IFollowTrajectoryActionWriter).name())
                    return std::dynamic_pointer_cast<IFollowTrajectoryActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "FollowTrajectoryAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryWriter> GetWriterTrajectory() const override
            {
                return std::dynamic_pointer_cast<ITrajectoryWriter>(_trajectory);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeReferenceWriter> GetWriterTimeReference() const override
            {
                return std::dynamic_pointer_cast<ITimeReferenceWriter>(_timeReference);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryFollowingModeWriter> GetWriterTrajectoryFollowingMode() const override
            {
                return std::dynamic_pointer_cast<ITrajectoryFollowingModeWriter>(_trajectoryFollowingMode);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IGlobalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IGlobalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class GlobalActionImpl: public BaseImpl, public IGlobalActionWriter, public std::enable_shared_from_this<GlobalActionImpl> 
        {
        private:
            std::shared_ptr<IEnvironmentActionWriter> _environmentAction {};
            std::shared_ptr<IEntityActionWriter> _entityAction {};
            std::shared_ptr<IParameterActionWriter> _parameterAction {};
            std::shared_ptr<IInfrastructureActionWriter> _infrastructureAction {};
            std::shared_ptr<ITrafficActionWriter> _trafficAction {};
        public:

            OPENSCENARIOLIB_EXP GlobalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentAction> GetEnvironmentAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityAction> GetEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAction> GetParameterAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInfrastructureAction> GetInfrastructureAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficAction> GetTrafficAction() const override;


            OPENSCENARIOLIB_EXP void SetEnvironmentAction(std::shared_ptr<IEnvironmentActionWriter> environmentAction) override
            {
                _environmentAction = environmentAction;
                _entityAction = {};
                _parameterAction = {};
                _infrastructureAction = {};
                _trafficAction = {};
            }

            OPENSCENARIOLIB_EXP void SetEntityAction(std::shared_ptr<IEntityActionWriter> entityAction) override
            {
                _entityAction = entityAction;
                _environmentAction = {};
                _parameterAction = {};
                _infrastructureAction = {};
                _trafficAction = {};
            }

            OPENSCENARIOLIB_EXP void SetParameterAction(std::shared_ptr<IParameterActionWriter> parameterAction) override
            {
                _parameterAction = parameterAction;
                _environmentAction = {};
                _entityAction = {};
                _infrastructureAction = {};
                _trafficAction = {};
            }

            OPENSCENARIOLIB_EXP void SetInfrastructureAction(std::shared_ptr<IInfrastructureActionWriter> infrastructureAction) override
            {
                _infrastructureAction = infrastructureAction;
                _environmentAction = {};
                _entityAction = {};
                _parameterAction = {};
                _trafficAction = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficAction(std::shared_ptr<ITrafficActionWriter> trafficAction) override
            {
                _trafficAction = trafficAction;
                _environmentAction = {};
                _entityAction = {};
                _parameterAction = {};
                _infrastructureAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(GlobalActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IGlobalAction).name())
                    return std::dynamic_pointer_cast<IGlobalAction>(shared_from_this());
                else if (classifier == typeid(IGlobalActionWriter).name())
                    return std::dynamic_pointer_cast<IGlobalActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "GlobalAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentActionWriter> GetWriterEnvironmentAction() const override
            {
                return std::dynamic_pointer_cast<IEnvironmentActionWriter>(_environmentAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityActionWriter> GetWriterEntityAction() const override
            {
                return std::dynamic_pointer_cast<IEntityActionWriter>(_entityAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterActionWriter> GetWriterParameterAction() const override
            {
                return std::dynamic_pointer_cast<IParameterActionWriter>(_parameterAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IInfrastructureActionWriter> GetWriterInfrastructureAction() const override
            {
                return std::dynamic_pointer_cast<IInfrastructureActionWriter>(_infrastructureAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficActionWriter> GetWriterTrafficAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficActionWriter>(_trafficAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IInRoutePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInRoutePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InRoutePositionImpl: public BaseImpl, public IInRoutePositionWriter, public std::enable_shared_from_this<InRoutePositionImpl> 
        {
        private:
            std::shared_ptr<IPositionOfCurrentEntityWriter> _fromCurrentEntity {};
            std::shared_ptr<IPositionInRoadCoordinatesWriter> _fromRoadCoordinates {};
            std::shared_ptr<IPositionInLaneCoordinatesWriter> _fromLaneCoordinates {};
        public:

            OPENSCENARIOLIB_EXP InRoutePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionOfCurrentEntity> GetFromCurrentEntity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInRoadCoordinates> GetFromRoadCoordinates() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInLaneCoordinates> GetFromLaneCoordinates() const override;


            OPENSCENARIOLIB_EXP void SetFromCurrentEntity(std::shared_ptr<IPositionOfCurrentEntityWriter> fromCurrentEntity) override
            {
                _fromCurrentEntity = fromCurrentEntity;
                _fromRoadCoordinates = {};
                _fromLaneCoordinates = {};
            }

            OPENSCENARIOLIB_EXP void SetFromRoadCoordinates(std::shared_ptr<IPositionInRoadCoordinatesWriter> fromRoadCoordinates) override
            {
                _fromRoadCoordinates = fromRoadCoordinates;
                _fromCurrentEntity = {};
                _fromLaneCoordinates = {};
            }

            OPENSCENARIOLIB_EXP void SetFromLaneCoordinates(std::shared_ptr<IPositionInLaneCoordinatesWriter> fromLaneCoordinates) override
            {
                _fromLaneCoordinates = fromLaneCoordinates;
                _fromCurrentEntity = {};
                _fromRoadCoordinates = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(InRoutePositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IInRoutePosition).name())
                    return std::dynamic_pointer_cast<IInRoutePosition>(shared_from_this());
                else if (classifier == typeid(IInRoutePositionWriter).name())
                    return std::dynamic_pointer_cast<IInRoutePositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "InRoutePosition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionOfCurrentEntityWriter> GetWriterFromCurrentEntity() const override
            {
                return std::dynamic_pointer_cast<IPositionOfCurrentEntityWriter>(_fromCurrentEntity);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInRoadCoordinatesWriter> GetWriterFromRoadCoordinates() const override
            {
                return std::dynamic_pointer_cast<IPositionInRoadCoordinatesWriter>(_fromRoadCoordinates);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInLaneCoordinatesWriter> GetWriterFromLaneCoordinates() const override
            {
                return std::dynamic_pointer_cast<IPositionInLaneCoordinatesWriter>(_fromLaneCoordinates);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IInfrastructureAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInfrastructureAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InfrastructureActionImpl: public BaseImpl, public IInfrastructureActionWriter, public std::enable_shared_from_this<InfrastructureActionImpl> 
        {
        private:
            std::shared_ptr<ITrafficSignalActionWriter> _trafficSignalAction {};
        public:

            OPENSCENARIOLIB_EXP InfrastructureActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalAction> GetTrafficSignalAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficSignalAction(std::shared_ptr<ITrafficSignalActionWriter> trafficSignalAction) override
            {
                _trafficSignalAction = trafficSignalAction;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(InfrastructureActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IInfrastructureAction).name())
                    return std::dynamic_pointer_cast<IInfrastructureAction>(shared_from_this());
                else if (classifier == typeid(IInfrastructureActionWriter).name())
                    return std::dynamic_pointer_cast<IInfrastructureActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "InfrastructureAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalActionWriter> GetWriterTrafficSignalAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSignalActionWriter>(_trafficSignalAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IInit. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInit)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InitImpl: public BaseImpl, public IInitWriter, public std::enable_shared_from_this<InitImpl> 
        {
        private:
            std::shared_ptr<IInitActionsWriter> _actions {};
        public:

            OPENSCENARIOLIB_EXP InitImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IInitActions> GetActions() const override;


            OPENSCENARIOLIB_EXP void SetActions(std::shared_ptr<IInitActionsWriter> actions) override
            {
                _actions = actions;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(InitImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IInit).name())
                    return std::dynamic_pointer_cast<IInit>(shared_from_this());
                else if (classifier == typeid(IInitWriter).name())
                    return std::dynamic_pointer_cast<IInitWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Init";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IInitActionsWriter> GetWriterActions() const override
            {
                return std::dynamic_pointer_cast<IInitActionsWriter>(_actions);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IInitActions. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInitActions)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InitActionsImpl: public BaseImpl, public IInitActionsWriter, public std::enable_shared_from_this<InitActionsImpl> 
        {
        private:
            std::vector<std::shared_ptr<IGlobalActionWriter>> _globalActions {};
            std::vector<std::shared_ptr<IUserDefinedActionWriter>> _userDefinedActions {};
            std::vector<std::shared_ptr<IPrivateWriter>> _privates {};
        public:

            OPENSCENARIOLIB_EXP InitActionsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IGlobalAction>> GetGlobalActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IGlobalActionWriter>> GetWriterGlobalActions() const override
            {
                return _globalActions;
            }

            OPENSCENARIOLIB_EXP int GetGlobalActionsSize() const override
            {
                return static_cast<int>(_globalActions.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalAction> GetGlobalActionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _globalActions.size() > index)
                {
                    return _globalActions[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IUserDefinedAction>> GetUserDefinedActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IUserDefinedActionWriter>> GetWriterUserDefinedActions() const override
            {
                return _userDefinedActions;
            }

            OPENSCENARIOLIB_EXP int GetUserDefinedActionsSize() const override
            {
                return static_cast<int>(_userDefinedActions.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAction> GetUserDefinedActionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _userDefinedActions.size() > index)
                {
                    return _userDefinedActions[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivate>> GetPrivates() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateWriter>> GetWriterPrivates() const override
            {
                return _privates;
            }

            OPENSCENARIOLIB_EXP int GetPrivatesSize() const override
            {
                return static_cast<int>(_privates.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivate> GetPrivatesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _privates.size() > index)
                {
                    return _privates[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetGlobalActions(std::vector<std::shared_ptr<IGlobalActionWriter>>& globalActions) override
            {
                _globalActions = globalActions;
            }

            OPENSCENARIOLIB_EXP void SetUserDefinedActions(std::vector<std::shared_ptr<IUserDefinedActionWriter>>& userDefinedActions) override
            {
                _userDefinedActions = userDefinedActions;
            }

            OPENSCENARIOLIB_EXP void SetPrivates(std::vector<std::shared_ptr<IPrivateWriter>>& privates) override
            {
                _privates = privates;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(InitActionsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IInitActions).name())
                    return std::dynamic_pointer_cast<IInitActions>(shared_from_this());
                else if (classifier == typeid(IInitActionsWriter).name())
                    return std::dynamic_pointer_cast<IInitActionsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "InitActions";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IKnot. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IKnot)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class KnotImpl: public BaseImpl, public IKnotWriter, public std::enable_shared_from_this<KnotImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP KnotImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(KnotImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IKnot).name())
                    return std::dynamic_pointer_cast<IKnot>(shared_from_this());
                else if (classifier == typeid(IKnotWriter).name())
                    return std::dynamic_pointer_cast<IKnotWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Knot";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILaneChangeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneChangeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneChangeActionImpl: public BaseImpl, public ILaneChangeActionWriter, public std::enable_shared_from_this<LaneChangeActionImpl> 
        {
        private:
            double _targetLaneOffset {};
            std::shared_ptr<ITransitionDynamicsWriter> _laneChangeActionDynamics {};
            std::shared_ptr<ILaneChangeTargetWriter> _laneChangeTarget {};
        public:

            OPENSCENARIOLIB_EXP LaneChangeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamics> GetLaneChangeActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeTarget> GetLaneChangeTarget() const override;


            OPENSCENARIOLIB_EXP void SetTargetLaneOffset(const double targetLaneOffset) override
            {
                _targetLaneOffset = targetLaneOffset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TARGET_LANE_OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetLaneChangeActionDynamics(std::shared_ptr<ITransitionDynamicsWriter> laneChangeActionDynamics) override
            {
                _laneChangeActionDynamics = laneChangeActionDynamics;
            }

            OPENSCENARIOLIB_EXP void SetLaneChangeTarget(std::shared_ptr<ILaneChangeTargetWriter> laneChangeTarget) override
            {
                _laneChangeTarget = laneChangeTarget;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LaneChangeActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILaneChangeAction).name())
                    return std::dynamic_pointer_cast<ILaneChangeAction>(shared_from_this());
                else if (classifier == typeid(ILaneChangeActionWriter).name())
                    return std::dynamic_pointer_cast<ILaneChangeActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__TARGET_LANE_OFFSET)
                {
                    return GetTargetLaneOffset();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LaneChangeAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTargetLaneOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TARGET_LANE_OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _targetLaneOffset = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTargetLaneOffset() const override
            {
                auto targetLaneOffset = OSC_CONSTANTS::ATTRIBUTE__TARGET_LANE_OFFSET;
                return GetParameterNameFromAttribute(targetLaneOffset);
            }

            OPENSCENARIOLIB_EXP bool IsTargetLaneOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TARGET_LANE_OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamicsWriter> GetWriterLaneChangeActionDynamics() const override
            {
                return std::dynamic_pointer_cast<ITransitionDynamicsWriter>(_laneChangeActionDynamics);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeTargetWriter> GetWriterLaneChangeTarget() const override
            {
                return std::dynamic_pointer_cast<ILaneChangeTargetWriter>(_laneChangeTarget);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILaneChangeTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneChangeTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneChangeTargetImpl: public BaseImpl, public ILaneChangeTargetWriter, public std::enable_shared_from_this<LaneChangeTargetImpl> 
        {
        private:
            std::shared_ptr<IRelativeTargetLaneWriter> _relativeTargetLane {};
            std::shared_ptr<IAbsoluteTargetLaneWriter> _absoluteTargetLane {};
        public:

            OPENSCENARIOLIB_EXP LaneChangeTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLane> GetRelativeTargetLane() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLane> GetAbsoluteTargetLane() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetLane(std::shared_ptr<IRelativeTargetLaneWriter> relativeTargetLane) override
            {
                _relativeTargetLane = relativeTargetLane;
                _absoluteTargetLane = {};
            }

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetLane(std::shared_ptr<IAbsoluteTargetLaneWriter> absoluteTargetLane) override
            {
                _absoluteTargetLane = absoluteTargetLane;
                _relativeTargetLane = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LaneChangeTargetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILaneChangeTarget).name())
                    return std::dynamic_pointer_cast<ILaneChangeTarget>(shared_from_this());
                else if (classifier == typeid(ILaneChangeTargetWriter).name())
                    return std::dynamic_pointer_cast<ILaneChangeTargetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LaneChangeTarget";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneWriter> GetWriterRelativeTargetLane() const override
            {
                return std::dynamic_pointer_cast<IRelativeTargetLaneWriter>(_relativeTargetLane);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneWriter> GetWriterAbsoluteTargetLane() const override
            {
                return std::dynamic_pointer_cast<IAbsoluteTargetLaneWriter>(_absoluteTargetLane);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILaneOffsetAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetActionImpl: public BaseImpl, public ILaneOffsetActionWriter, public std::enable_shared_from_this<LaneOffsetActionImpl> 
        {
        private:
            bool _continuous {};
            std::shared_ptr<ILaneOffsetActionDynamicsWriter> _laneOffsetActionDynamics {};
            std::shared_ptr<ILaneOffsetTargetWriter> _laneOffsetTarget {};
        public:

            OPENSCENARIOLIB_EXP LaneOffsetActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionDynamics> GetLaneOffsetActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetTarget> GetLaneOffsetTarget() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override
            {
                _continuous = continuous;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
            }

            OPENSCENARIOLIB_EXP void SetLaneOffsetActionDynamics(std::shared_ptr<ILaneOffsetActionDynamicsWriter> laneOffsetActionDynamics) override
            {
                _laneOffsetActionDynamics = laneOffsetActionDynamics;
            }

            OPENSCENARIOLIB_EXP void SetLaneOffsetTarget(std::shared_ptr<ILaneOffsetTargetWriter> laneOffsetTarget) override
            {
                _laneOffsetTarget = laneOffsetTarget;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LaneOffsetActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILaneOffsetAction).name())
                    return std::dynamic_pointer_cast<ILaneOffsetAction>(shared_from_this());
                else if (classifier == typeid(ILaneOffsetActionWriter).name())
                    return std::dynamic_pointer_cast<ILaneOffsetActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS)
                {
                    return GetContinuous();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LaneOffsetAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS, parameterName, nullTextMarker /*no textmarker*/);
                _continuous = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override
            {
                auto continuous = OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS;
                return GetParameterNameFromAttribute(continuous);
            }

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionDynamicsWriter> GetWriterLaneOffsetActionDynamics() const override
            {
                return std::dynamic_pointer_cast<ILaneOffsetActionDynamicsWriter>(_laneOffsetActionDynamics);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetTargetWriter> GetWriterLaneOffsetTarget() const override
            {
                return std::dynamic_pointer_cast<ILaneOffsetTargetWriter>(_laneOffsetTarget);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILaneOffsetActionDynamics. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetActionDynamics)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetActionDynamicsImpl: public BaseImpl, public ILaneOffsetActionDynamicsWriter, public std::enable_shared_from_this<LaneOffsetActionDynamicsImpl> 
        {
        private:
            DynamicsShape _dynamicsShape {};
            double _maxLateralAcc {};
        public:

            OPENSCENARIOLIB_EXP LaneOffsetActionDynamicsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP DynamicsShape GetDynamicsShape() const override;
            OPENSCENARIOLIB_EXP double GetMaxLateralAcc() const override;


            OPENSCENARIOLIB_EXP void SetDynamicsShape(const DynamicsShape dynamicsShape) override
            {
                _dynamicsShape = dynamicsShape;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE);
            }

            OPENSCENARIOLIB_EXP void SetMaxLateralAcc(const double maxLateralAcc) override
            {
                _maxLateralAcc = maxLateralAcc;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_LATERAL_ACC);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LaneOffsetActionDynamicsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILaneOffsetActionDynamics).name())
                    return std::dynamic_pointer_cast<ILaneOffsetActionDynamics>(shared_from_this());
                else if (classifier == typeid(ILaneOffsetActionDynamicsWriter).name())
                    return std::dynamic_pointer_cast<ILaneOffsetActionDynamicsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_LATERAL_ACC)
                {
                    return GetMaxLateralAcc();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LaneOffsetActionDynamics";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsShape(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE, parameterName, nullTextMarker /*no textmarker*/);
                _dynamicsShape = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxLateralAcc(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_LATERAL_ACC, parameterName, nullTextMarker /*no textmarker*/);
                _maxLateralAcc = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsShape() const override
            {
                auto dynamicsShape = OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE;
                return GetParameterNameFromAttribute(dynamicsShape);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxLateralAcc() const override
            {
                auto maxLateralAcc = OSC_CONSTANTS::ATTRIBUTE__MAX_LATERAL_ACC;
                return GetParameterNameFromAttribute(maxLateralAcc);
            }

            OPENSCENARIOLIB_EXP bool IsDynamicsShapeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMaxLateralAccParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_LATERAL_ACC);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILaneOffsetTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetTargetImpl: public BaseImpl, public ILaneOffsetTargetWriter, public std::enable_shared_from_this<LaneOffsetTargetImpl> 
        {
        private:
            std::shared_ptr<IRelativeTargetLaneOffsetWriter> _relativeTargetLaneOffset {};
            std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> _absoluteTargetLaneOffset {};
        public:

            OPENSCENARIOLIB_EXP LaneOffsetTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneOffset> GetRelativeTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneOffset> GetAbsoluteTargetLaneOffset() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetLaneOffset(std::shared_ptr<IRelativeTargetLaneOffsetWriter> relativeTargetLaneOffset) override
            {
                _relativeTargetLaneOffset = relativeTargetLaneOffset;
                _absoluteTargetLaneOffset = {};
            }

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetLaneOffset(std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> absoluteTargetLaneOffset) override
            {
                _absoluteTargetLaneOffset = absoluteTargetLaneOffset;
                _relativeTargetLaneOffset = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LaneOffsetTargetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILaneOffsetTarget).name())
                    return std::dynamic_pointer_cast<ILaneOffsetTarget>(shared_from_this());
                else if (classifier == typeid(ILaneOffsetTargetWriter).name())
                    return std::dynamic_pointer_cast<ILaneOffsetTargetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LaneOffsetTarget";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneOffsetWriter> GetWriterRelativeTargetLaneOffset() const override
            {
                return std::dynamic_pointer_cast<IRelativeTargetLaneOffsetWriter>(_relativeTargetLaneOffset);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> GetWriterAbsoluteTargetLaneOffset() const override
            {
                return std::dynamic_pointer_cast<IAbsoluteTargetLaneOffsetWriter>(_absoluteTargetLaneOffset);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILanePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILanePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LanePositionImpl: public BaseImpl, public ILanePositionWriter, public std::enable_shared_from_this<LanePositionImpl> 
        {
        private:
            std::string _laneId {};
            double _offset {};
            std::string _roadId {};
            double _s {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP LanePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetLaneId() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP std::string GetRoadId() const override;
            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetLaneId(const std::string laneId) override
            {
                _laneId = laneId;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_ID);
            }

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override
            {
                _offset = offset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetRoadId(const std::string roadId) override
            {
                _roadId = roadId;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROAD_ID);
            }

            OPENSCENARIOLIB_EXP void SetS(const double s) override
            {
                _s = s;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__S);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LanePositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILanePosition).name())
                    return std::dynamic_pointer_cast<ILanePosition>(shared_from_this());
                else if (classifier == typeid(ILanePositionWriter).name())
                    return std::dynamic_pointer_cast<ILanePositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__OFFSET)
                {
                    return GetOffset();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__S)
                {
                    return GetS();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LanePosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneId(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_ID, parameterName, nullTextMarker /*no textmarker*/);
                _laneId = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _offset = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRoadId(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROAD_ID, parameterName, nullTextMarker /*no textmarker*/);
                _roadId = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__S, parameterName, nullTextMarker /*no textmarker*/);
                _s = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneId() const override
            {
                auto laneId = OSC_CONSTANTS::ATTRIBUTE__LANE_ID;
                return GetParameterNameFromAttribute(laneId);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override
            {
                auto offset = OSC_CONSTANTS::ATTRIBUTE__OFFSET;
                return GetParameterNameFromAttribute(offset);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoadId() const override
            {
                auto roadId = OSC_CONSTANTS::ATTRIBUTE__ROAD_ID;
                return GetParameterNameFromAttribute(roadId);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override
            {
                auto s = OSC_CONSTANTS::ATTRIBUTE__S;
                return GetParameterNameFromAttribute(s);
            }

            OPENSCENARIOLIB_EXP bool IsLaneIdParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LANE_ID);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRoadIdParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ROAD_ID);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__S);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILateralAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILateralAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LateralActionImpl: public BaseImpl, public ILateralActionWriter, public std::enable_shared_from_this<LateralActionImpl> 
        {
        private:
            std::shared_ptr<ILaneChangeActionWriter> _laneChangeAction {};
            std::shared_ptr<ILaneOffsetActionWriter> _laneOffsetAction {};
            std::shared_ptr<ILateralDistanceActionWriter> _lateralDistanceAction {};
        public:

            OPENSCENARIOLIB_EXP LateralActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeAction> GetLaneChangeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetAction> GetLaneOffsetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralDistanceAction> GetLateralDistanceAction() const override;


            OPENSCENARIOLIB_EXP void SetLaneChangeAction(std::shared_ptr<ILaneChangeActionWriter> laneChangeAction) override
            {
                _laneChangeAction = laneChangeAction;
                _laneOffsetAction = {};
                _lateralDistanceAction = {};
            }

            OPENSCENARIOLIB_EXP void SetLaneOffsetAction(std::shared_ptr<ILaneOffsetActionWriter> laneOffsetAction) override
            {
                _laneOffsetAction = laneOffsetAction;
                _laneChangeAction = {};
                _lateralDistanceAction = {};
            }

            OPENSCENARIOLIB_EXP void SetLateralDistanceAction(std::shared_ptr<ILateralDistanceActionWriter> lateralDistanceAction) override
            {
                _lateralDistanceAction = lateralDistanceAction;
                _laneChangeAction = {};
                _laneOffsetAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LateralActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILateralAction).name())
                    return std::dynamic_pointer_cast<ILateralAction>(shared_from_this());
                else if (classifier == typeid(ILateralActionWriter).name())
                    return std::dynamic_pointer_cast<ILateralActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LateralAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeActionWriter> GetWriterLaneChangeAction() const override
            {
                return std::dynamic_pointer_cast<ILaneChangeActionWriter>(_laneChangeAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionWriter> GetWriterLaneOffsetAction() const override
            {
                return std::dynamic_pointer_cast<ILaneOffsetActionWriter>(_laneOffsetAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralDistanceActionWriter> GetWriterLateralDistanceAction() const override
            {
                return std::dynamic_pointer_cast<ILateralDistanceActionWriter>(_lateralDistanceAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILateralDistanceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILateralDistanceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LateralDistanceActionImpl: public BaseImpl, public ILateralDistanceActionWriter, public std::enable_shared_from_this<LateralDistanceActionImpl> 
        {
        private:
            bool _continuous {};
            double _distance {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            bool _freespace {};
            std::shared_ptr<IDynamicConstraintsWriter> _dynamicConstraints {};
        public:

            OPENSCENARIOLIB_EXP LateralDistanceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP double GetDistance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraints> GetDynamicConstraints() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override
            {
                _continuous = continuous;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
            }

            OPENSCENARIOLIB_EXP void SetDistance(const double distance) override
            {
                _distance = distance;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DISTANCE);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetDynamicConstraints(std::shared_ptr<IDynamicConstraintsWriter> dynamicConstraints) override
            {
                _dynamicConstraints = dynamicConstraints;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LateralDistanceActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILateralDistanceAction).name())
                    return std::dynamic_pointer_cast<ILateralDistanceAction>(shared_from_this());
                else if (classifier == typeid(ILateralDistanceActionWriter).name())
                    return std::dynamic_pointer_cast<ILateralDistanceActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DISTANCE)
                {
                    return GetDistance();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS)
                {
                    return GetContinuous();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LateralDistanceAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS, parameterName, nullTextMarker /*no textmarker*/);
                _continuous = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDistance(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DISTANCE, parameterName, nullTextMarker /*no textmarker*/);
                _distance = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override
            {
                auto continuous = OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS;
                return GetParameterNameFromAttribute(continuous);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistance() const override
            {
                auto distance = OSC_CONSTANTS::ATTRIBUTE__DISTANCE;
                return GetParameterNameFromAttribute(distance);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDistanceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DISTANCE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraintsWriter> GetWriterDynamicConstraints() const override
            {
                return std::dynamic_pointer_cast<IDynamicConstraintsWriter>(_dynamicConstraints);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILongitudinalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILongitudinalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LongitudinalActionImpl: public BaseImpl, public ILongitudinalActionWriter, public std::enable_shared_from_this<LongitudinalActionImpl> 
        {
        private:
            std::shared_ptr<ISpeedActionWriter> _speedAction {};
            std::shared_ptr<ILongitudinalDistanceActionWriter> _longitudinalDistanceAction {};
        public:

            OPENSCENARIOLIB_EXP LongitudinalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedAction> GetSpeedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalDistanceAction> GetLongitudinalDistanceAction() const override;


            OPENSCENARIOLIB_EXP void SetSpeedAction(std::shared_ptr<ISpeedActionWriter> speedAction) override
            {
                _speedAction = speedAction;
                _longitudinalDistanceAction = {};
            }

            OPENSCENARIOLIB_EXP void SetLongitudinalDistanceAction(std::shared_ptr<ILongitudinalDistanceActionWriter> longitudinalDistanceAction) override
            {
                _longitudinalDistanceAction = longitudinalDistanceAction;
                _speedAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LongitudinalActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILongitudinalAction).name())
                    return std::dynamic_pointer_cast<ILongitudinalAction>(shared_from_this());
                else if (classifier == typeid(ILongitudinalActionWriter).name())
                    return std::dynamic_pointer_cast<ILongitudinalActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LongitudinalAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionWriter> GetWriterSpeedAction() const override
            {
                return std::dynamic_pointer_cast<ISpeedActionWriter>(_speedAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalDistanceActionWriter> GetWriterLongitudinalDistanceAction() const override
            {
                return std::dynamic_pointer_cast<ILongitudinalDistanceActionWriter>(_longitudinalDistanceAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ILongitudinalDistanceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILongitudinalDistanceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LongitudinalDistanceActionImpl: public BaseImpl, public ILongitudinalDistanceActionWriter, public std::enable_shared_from_this<LongitudinalDistanceActionImpl> 
        {
        private:
            bool _continuous {};
            double _distance {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            bool _freespace {};
            double _timeGap {};
            std::shared_ptr<IDynamicConstraintsWriter> _dynamicConstraints {};
        public:

            OPENSCENARIOLIB_EXP LongitudinalDistanceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP double GetDistance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP double GetTimeGap() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraints> GetDynamicConstraints() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override
            {
                _continuous = continuous;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
            }

            OPENSCENARIOLIB_EXP void SetDistance(const double distance) override
            {
                _distance = distance;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DISTANCE);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetTimeGap(const double timeGap) override
            {
                _timeGap = timeGap;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME_GAP);
            }

            OPENSCENARIOLIB_EXP void SetDynamicConstraints(std::shared_ptr<IDynamicConstraintsWriter> dynamicConstraints) override
            {
                _dynamicConstraints = dynamicConstraints;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(LongitudinalDistanceActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ILongitudinalDistanceAction).name())
                    return std::dynamic_pointer_cast<ILongitudinalDistanceAction>(shared_from_this());
                else if (classifier == typeid(ILongitudinalDistanceActionWriter).name())
                    return std::dynamic_pointer_cast<ILongitudinalDistanceActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DISTANCE)
                {
                    return GetDistance();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__TIME_GAP)
                {
                    return GetTimeGap();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS)
                {
                    return GetContinuous();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "LongitudinalDistanceAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS, parameterName, nullTextMarker /*no textmarker*/);
                _continuous = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDistance(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DISTANCE, parameterName, nullTextMarker /*no textmarker*/);
                _distance = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTimeGap(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME_GAP, parameterName, nullTextMarker /*no textmarker*/);
                _timeGap = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override
            {
                auto continuous = OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS;
                return GetParameterNameFromAttribute(continuous);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistance() const override
            {
                auto distance = OSC_CONSTANTS::ATTRIBUTE__DISTANCE;
                return GetParameterNameFromAttribute(distance);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTimeGap() const override
            {
                auto timeGap = OSC_CONSTANTS::ATTRIBUTE__TIME_GAP;
                return GetParameterNameFromAttribute(timeGap);
            }

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDistanceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DISTANCE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTimeGapParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TIME_GAP);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraintsWriter> GetWriterDynamicConstraints() const override
            {
                return std::dynamic_pointer_cast<IDynamicConstraintsWriter>(_dynamicConstraints);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IManeuver. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuver)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverImpl: public BaseImpl, public IManeuverWriter, public std::enable_shared_from_this<ManeuverImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::vector<std::shared_ptr<IEventWriter>> _events {};
        public:

            OPENSCENARIOLIB_EXP ManeuverImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEvent>> GetEvents() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEventWriter>> GetWriterEvents() const override
            {
                return _events;
            }

            OPENSCENARIOLIB_EXP int GetEventsSize() const override
            {
                return static_cast<int>(_events.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEvent> GetEventsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _events.size() > index)
                {
                    return _events[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetEvents(std::vector<std::shared_ptr<IEventWriter>>& events) override
            {
                _events = events;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ManeuverImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IManeuver).name())
                    return std::dynamic_pointer_cast<IManeuver>(shared_from_this());
                else if (classifier == typeid(IManeuverWriter).name())
                    return std::dynamic_pointer_cast<IManeuverWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Maneuver";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IManeuverCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuverCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverCatalogLocationImpl: public BaseImpl, public IManeuverCatalogLocationWriter, public std::enable_shared_from_this<ManeuverCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP ManeuverCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ManeuverCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IManeuverCatalogLocation).name())
                    return std::dynamic_pointer_cast<IManeuverCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IManeuverCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IManeuverCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ManeuverCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IManeuverGroup. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuverGroup)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverGroupImpl: public BaseImpl, public IManeuverGroupWriter, public std::enable_shared_from_this<ManeuverGroupImpl> 
        {
        private:
            uint32_t _maximumExecutionCount {};
            std::string _name {};
            std::shared_ptr<IActorsWriter> _actors {};
            std::vector<std::shared_ptr<ICatalogReferenceWriter>> _catalogReferences {};
            std::vector<std::shared_ptr<IManeuverWriter>> _maneuvers {};
        public:

            OPENSCENARIOLIB_EXP ManeuverGroupImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP uint32_t GetMaximumExecutionCount() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActors> GetActors() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICatalogReference>> GetCatalogReferences() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICatalogReferenceWriter>> GetWriterCatalogReferences() const override
            {
                return _catalogReferences;
            }

            OPENSCENARIOLIB_EXP int GetCatalogReferencesSize() const override
            {
                return static_cast<int>(_catalogReferences.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReferencesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _catalogReferences.size() > index)
                {
                    return _catalogReferences[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuver>> GetManeuvers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverWriter>> GetWriterManeuvers() const override
            {
                return _maneuvers;
            }

            OPENSCENARIOLIB_EXP int GetManeuversSize() const override
            {
                return static_cast<int>(_maneuvers.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuver> GetManeuversAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _maneuvers.size() > index)
                {
                    return _maneuvers[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetMaximumExecutionCount(const uint32_t maximumExecutionCount) override
            {
                _maximumExecutionCount = maximumExecutionCount;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetActors(std::shared_ptr<IActorsWriter> actors) override
            {
                _actors = actors;
            }

            OPENSCENARIOLIB_EXP void SetCatalogReferences(std::vector<std::shared_ptr<ICatalogReferenceWriter>>& catalogReferences) override
            {
                _catalogReferences = catalogReferences;
            }

            OPENSCENARIOLIB_EXP void SetManeuvers(std::vector<std::shared_ptr<IManeuverWriter>>& maneuvers) override
            {
                _maneuvers = maneuvers;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ManeuverGroupImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IManeuverGroup).name())
                    return std::dynamic_pointer_cast<IManeuverGroup>(shared_from_this());
                else if (classifier == typeid(IManeuverGroupWriter).name())
                    return std::dynamic_pointer_cast<IManeuverGroupWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT)
                {
                    return GetMaximumExecutionCount();
                }
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ManeuverGroup";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaximumExecutionCount(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT, parameterName, nullTextMarker /*no textmarker*/);
                _maximumExecutionCount = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaximumExecutionCount() const override
            {
                auto maximumExecutionCount = OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT;
                return GetParameterNameFromAttribute(maximumExecutionCount);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsMaximumExecutionCountParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAXIMUM_EXECUTION_COUNT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IActorsWriter> GetWriterActors() const override
            {
                return std::dynamic_pointer_cast<IActorsWriter>(_actors);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IMiscObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IMiscObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class MiscObjectImpl: public BaseImpl, public IMiscObjectWriter, public std::enable_shared_from_this<MiscObjectImpl> 
        {
        private:
            double _mass {};
            MiscObjectCategory _miscObjectCategory {};
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            std::shared_ptr<IPropertiesWriter> _properties {};
        public:

            OPENSCENARIOLIB_EXP MiscObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetMass() const override;
            OPENSCENARIOLIB_EXP MiscObjectCategory GetMiscObjectCategory() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetMass(const double mass) override
            {
                _mass = mass;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASS);
            }

            OPENSCENARIOLIB_EXP void SetMiscObjectCategory(const MiscObjectCategory miscObjectCategory) override
            {
                _miscObjectCategory = miscObjectCategory;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MISC_OBJECT_CATEGORY);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override
            {
                _boundingBox = boundingBox;
            }

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(MiscObjectImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IMiscObject).name())
                    return std::dynamic_pointer_cast<IMiscObject>(shared_from_this());
                else if (classifier == typeid(IMiscObjectWriter).name())
                    return std::dynamic_pointer_cast<IMiscObjectWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MASS)
                {
                    return GetMass();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "MiscObject";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMass(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASS, parameterName, nullTextMarker /*no textmarker*/);
                _mass = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMiscObjectCategory(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MISC_OBJECT_CATEGORY, parameterName, nullTextMarker /*no textmarker*/);
                _miscObjectCategory = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMass() const override
            {
                auto mass = OSC_CONSTANTS::ATTRIBUTE__MASS;
                return GetParameterNameFromAttribute(mass);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMiscObjectCategory() const override
            {
                auto miscObjectCategory = OSC_CONSTANTS::ATTRIBUTE__MISC_OBJECT_CATEGORY;
                return GetParameterNameFromAttribute(miscObjectCategory);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsMassParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MASS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMiscObjectCategoryParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MISC_OBJECT_CATEGORY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override
            {
                return std::dynamic_pointer_cast<IBoundingBoxWriter>(_boundingBox);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override
            {
                return std::dynamic_pointer_cast<IPropertiesWriter>(_properties);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IMiscObjectCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IMiscObjectCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class MiscObjectCatalogLocationImpl: public BaseImpl, public IMiscObjectCatalogLocationWriter, public std::enable_shared_from_this<MiscObjectCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP MiscObjectCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(MiscObjectCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IMiscObjectCatalogLocation).name())
                    return std::dynamic_pointer_cast<IMiscObjectCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IMiscObjectCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IMiscObjectCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "MiscObjectCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IModifyRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IModifyRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ModifyRuleImpl: public BaseImpl, public IModifyRuleWriter, public std::enable_shared_from_this<ModifyRuleImpl> 
        {
        private:
            std::shared_ptr<IParameterAddValueRuleWriter> _addValue {};
            std::shared_ptr<IParameterMultiplyByValueRuleWriter> _multiplyByValue {};
        public:

            OPENSCENARIOLIB_EXP ModifyRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAddValueRule> GetAddValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterMultiplyByValueRule> GetMultiplyByValue() const override;


            OPENSCENARIOLIB_EXP void SetAddValue(std::shared_ptr<IParameterAddValueRuleWriter> addValue) override
            {
                _addValue = addValue;
                _multiplyByValue = {};
            }

            OPENSCENARIOLIB_EXP void SetMultiplyByValue(std::shared_ptr<IParameterMultiplyByValueRuleWriter> multiplyByValue) override
            {
                _multiplyByValue = multiplyByValue;
                _addValue = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ModifyRuleImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IModifyRule).name())
                    return std::dynamic_pointer_cast<IModifyRule>(shared_from_this());
                else if (classifier == typeid(IModifyRuleWriter).name())
                    return std::dynamic_pointer_cast<IModifyRuleWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ModifyRule";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAddValueRuleWriter> GetWriterAddValue() const override
            {
                return std::dynamic_pointer_cast<IParameterAddValueRuleWriter>(_addValue);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterMultiplyByValueRuleWriter> GetWriterMultiplyByValue() const override
            {
                return std::dynamic_pointer_cast<IParameterMultiplyByValueRuleWriter>(_multiplyByValue);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements INone. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of INone)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class NoneImpl: public BaseImpl, public INoneWriter, public std::enable_shared_from_this<NoneImpl> 
        {
        private:
        public:

            OPENSCENARIOLIB_EXP NoneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(NoneImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(INone).name())
                    return std::dynamic_pointer_cast<INone>(shared_from_this());
                else if (classifier == typeid(INoneWriter).name())
                    return std::dynamic_pointer_cast<INoneWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "None";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements INurbs. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of INurbs)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class NurbsImpl: public BaseImpl, public INurbsWriter, public std::enable_shared_from_this<NurbsImpl> 
        {
        private:
            uint32_t _order {};
            std::vector<std::shared_ptr<IControlPointWriter>> _controlPoints {};
            std::vector<std::shared_ptr<IKnotWriter>> _knots {};
        public:

            OPENSCENARIOLIB_EXP NurbsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP uint32_t GetOrder() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControlPoint>> GetControlPoints() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControlPointWriter>> GetWriterControlPoints() const override
            {
                return _controlPoints;
            }

            OPENSCENARIOLIB_EXP int GetControlPointsSize() const override
            {
                return static_cast<int>(_controlPoints.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IControlPoint> GetControlPointsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _controlPoints.size() > index)
                {
                    return _controlPoints[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IKnot>> GetKnots() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IKnotWriter>> GetWriterKnots() const override
            {
                return _knots;
            }

            OPENSCENARIOLIB_EXP int GetKnotsSize() const override
            {
                return static_cast<int>(_knots.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IKnot> GetKnotsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _knots.size() > index)
                {
                    return _knots[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetOrder(const uint32_t order) override
            {
                _order = order;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ORDER);
            }

            OPENSCENARIOLIB_EXP void SetControlPoints(std::vector<std::shared_ptr<IControlPointWriter>>& controlPoints) override
            {
                _controlPoints = controlPoints;
            }

            OPENSCENARIOLIB_EXP void SetKnots(std::vector<std::shared_ptr<IKnotWriter>>& knots) override
            {
                _knots = knots;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(NurbsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(INurbs).name())
                    return std::dynamic_pointer_cast<INurbs>(shared_from_this());
                else if (classifier == typeid(INurbsWriter).name())
                    return std::dynamic_pointer_cast<INurbsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ORDER)
                {
                    return GetOrder();
                }
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Nurbs";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToOrder(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ORDER, parameterName, nullTextMarker /*no textmarker*/);
                _order = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromOrder() const override
            {
                auto order = OSC_CONSTANTS::ATTRIBUTE__ORDER;
                return GetParameterNameFromAttribute(order);
            }

            OPENSCENARIOLIB_EXP bool IsOrderParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ORDER);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IObjectController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IObjectController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ObjectControllerImpl: public BaseImpl, public IObjectControllerWriter, public std::enable_shared_from_this<ObjectControllerImpl> 
        {
        private:
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            std::shared_ptr<IControllerWriter> _controller {};
        public:

            OPENSCENARIOLIB_EXP ObjectControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;


            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _controller = {};
            }

            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override
            {
                _controller = controller;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ObjectControllerImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IObjectController).name())
                    return std::dynamic_pointer_cast<IObjectController>(shared_from_this());
                else if (classifier == typeid(IObjectControllerWriter).name())
                    return std::dynamic_pointer_cast<IObjectControllerWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ObjectController";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override
            {
                return std::dynamic_pointer_cast<IControllerWriter>(_controller);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOffroadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOffroadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OffroadConditionImpl: public BaseImpl, public IOffroadConditionWriter, public std::enable_shared_from_this<OffroadConditionImpl> 
        {
        private:
            double _duration {};
        public:

            OPENSCENARIOLIB_EXP OffroadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override
            {
                _duration = duration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OffroadConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOffroadCondition).name())
                    return std::dynamic_pointer_cast<IOffroadCondition>(shared_from_this());
                else if (classifier == typeid(IOffroadConditionWriter).name())
                    return std::dynamic_pointer_cast<IOffroadConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DURATION)
                {
                    return GetDuration();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OffroadCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION, parameterName, nullTextMarker /*no textmarker*/);
                _duration = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override
            {
                auto duration = OSC_CONSTANTS::ATTRIBUTE__DURATION;
                return GetParameterNameFromAttribute(duration);
            }

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DURATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOpenScenario. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOpenScenario)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OpenScenarioImpl: public BaseImpl, public IOpenScenarioWriter, public std::enable_shared_from_this<OpenScenarioImpl> 
        {
        private:
            std::shared_ptr<IFileHeaderWriter> _fileHeader {};
            std::shared_ptr<IOpenScenarioCategoryWriter> _openScenarioCategory {};
        public:

            OPENSCENARIOLIB_EXP OpenScenarioImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IFileHeader> GetFileHeader() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioCategory> GetOpenScenarioCategory() const override;


            OPENSCENARIOLIB_EXP void SetFileHeader(std::shared_ptr<IFileHeaderWriter> fileHeader) override
            {
                _fileHeader = fileHeader;
            }

            OPENSCENARIOLIB_EXP void SetOpenScenarioCategory(std::shared_ptr<IOpenScenarioCategoryWriter> openScenarioCategory) override
            {
                _openScenarioCategory = openScenarioCategory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OpenScenarioImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOpenScenario).name())
                    return std::dynamic_pointer_cast<IOpenScenario>(shared_from_this());
                else if (classifier == typeid(IOpenScenarioWriter).name())
                    return std::dynamic_pointer_cast<IOpenScenarioWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OpenScenario";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileHeaderWriter> GetWriterFileHeader() const override
            {
                return std::dynamic_pointer_cast<IFileHeaderWriter>(_fileHeader);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioCategoryWriter> GetWriterOpenScenarioCategory() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioCategoryWriter>(_openScenarioCategory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOpenScenarioCategory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOpenScenarioCategory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OpenScenarioCategoryImpl: public BaseImpl, public IOpenScenarioCategoryWriter, public std::enable_shared_from_this<OpenScenarioCategoryImpl> 
        {
        private:
            std::shared_ptr<IScenarioDefinitionWriter> _scenarioDefinition {};
            std::shared_ptr<ICatalogDefinitionWriter> _catalogDefinition {};
        public:

            OPENSCENARIOLIB_EXP OpenScenarioCategoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioDefinition> GetScenarioDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogDefinition> GetCatalogDefinition() const override;


            OPENSCENARIOLIB_EXP void SetScenarioDefinition(std::shared_ptr<IScenarioDefinitionWriter> scenarioDefinition) override
            {
                _scenarioDefinition = scenarioDefinition;
                _catalogDefinition = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogDefinition(std::shared_ptr<ICatalogDefinitionWriter> catalogDefinition) override
            {
                _catalogDefinition = catalogDefinition;
                _scenarioDefinition = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OpenScenarioCategoryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOpenScenarioCategory).name())
                    return std::dynamic_pointer_cast<IOpenScenarioCategory>(shared_from_this());
                else if (classifier == typeid(IOpenScenarioCategoryWriter).name())
                    return std::dynamic_pointer_cast<IOpenScenarioCategoryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OpenScenarioCategory";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioDefinitionWriter> GetWriterScenarioDefinition() const override
            {
                return std::dynamic_pointer_cast<IScenarioDefinitionWriter>(_scenarioDefinition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogDefinitionWriter> GetWriterCatalogDefinition() const override
            {
                return std::dynamic_pointer_cast<ICatalogDefinitionWriter>(_catalogDefinition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOrientation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOrientation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OrientationImpl: public BaseImpl, public IOrientationWriter, public std::enable_shared_from_this<OrientationImpl> 
        {
        private:
            double _h {};
            double _p {};
            double _r {};
            ReferenceContext _type {};
        public:

            OPENSCENARIOLIB_EXP OrientationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetH() const override;
            OPENSCENARIOLIB_EXP double GetP() const override;
            OPENSCENARIOLIB_EXP double GetR() const override;
            OPENSCENARIOLIB_EXP ReferenceContext GetType() const override;


            OPENSCENARIOLIB_EXP void SetH(const double h) override
            {
                _h = h;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__H);
            }

            OPENSCENARIOLIB_EXP void SetP(const double p) override
            {
                _p = p;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__P);
            }

            OPENSCENARIOLIB_EXP void SetR(const double r) override
            {
                _r = r;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__R);
            }

            OPENSCENARIOLIB_EXP void SetType(const ReferenceContext type) override
            {
                _type = type;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OrientationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOrientation).name())
                    return std::dynamic_pointer_cast<IOrientation>(shared_from_this());
                else if (classifier == typeid(IOrientationWriter).name())
                    return std::dynamic_pointer_cast<IOrientationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__H)
                {
                    return GetH();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__P)
                {
                    return GetP();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__R)
                {
                    return GetR();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Orientation";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToH(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__H, parameterName, nullTextMarker /*no textmarker*/);
                _h = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToP(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__P, parameterName, nullTextMarker /*no textmarker*/);
                _p = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToR(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__R, parameterName, nullTextMarker /*no textmarker*/);
                _r = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _type = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromH() const override
            {
                auto h = OSC_CONSTANTS::ATTRIBUTE__H;
                return GetParameterNameFromAttribute(h);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromP() const override
            {
                auto p = OSC_CONSTANTS::ATTRIBUTE__P;
                return GetParameterNameFromAttribute(p);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromR() const override
            {
                auto r = OSC_CONSTANTS::ATTRIBUTE__R;
                return GetParameterNameFromAttribute(r);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override
            {
                auto type = OSC_CONSTANTS::ATTRIBUTE__TYPE;
                return GetParameterNameFromAttribute(type);
            }

            OPENSCENARIOLIB_EXP bool IsHParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__H);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__P);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__R);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideBrakeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideBrakeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideBrakeActionImpl: public BaseImpl, public IOverrideBrakeActionWriter, public std::enable_shared_from_this<OverrideBrakeActionImpl> 
        {
        private:
            bool _active {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP OverrideBrakeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideBrakeActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideBrakeAction).name())
                    return std::dynamic_pointer_cast<IOverrideBrakeAction>(shared_from_this());
                else if (classifier == typeid(IOverrideBrakeActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideBrakeActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideBrakeAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideClutchAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideClutchAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideClutchActionImpl: public BaseImpl, public IOverrideClutchActionWriter, public std::enable_shared_from_this<OverrideClutchActionImpl> 
        {
        private:
            bool _active {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP OverrideClutchActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideClutchActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideClutchAction).name())
                    return std::dynamic_pointer_cast<IOverrideClutchAction>(shared_from_this());
                else if (classifier == typeid(IOverrideClutchActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideClutchActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideClutchAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideControllerValueAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideControllerValueAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideControllerValueActionImpl: public BaseImpl, public IOverrideControllerValueActionWriter, public std::enable_shared_from_this<OverrideControllerValueActionImpl> 
        {
        private:
            std::shared_ptr<IOverrideThrottleActionWriter> _throttle {};
            std::shared_ptr<IOverrideBrakeActionWriter> _brake {};
            std::shared_ptr<IOverrideClutchActionWriter> _clutch {};
            std::shared_ptr<IOverrideParkingBrakeActionWriter> _parkingBrake {};
            std::shared_ptr<IOverrideSteeringWheelActionWriter> _steeringWheel {};
            std::shared_ptr<IOverrideGearActionWriter> _gear {};
        public:

            OPENSCENARIOLIB_EXP OverrideControllerValueActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideThrottleAction> GetThrottle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideBrakeAction> GetBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideClutchAction> GetClutch() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideParkingBrakeAction> GetParkingBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideSteeringWheelAction> GetSteeringWheel() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideGearAction> GetGear() const override;


            OPENSCENARIOLIB_EXP void SetThrottle(std::shared_ptr<IOverrideThrottleActionWriter> throttle) override
            {
                _throttle = throttle;
            }

            OPENSCENARIOLIB_EXP void SetBrake(std::shared_ptr<IOverrideBrakeActionWriter> brake) override
            {
                _brake = brake;
            }

            OPENSCENARIOLIB_EXP void SetClutch(std::shared_ptr<IOverrideClutchActionWriter> clutch) override
            {
                _clutch = clutch;
            }

            OPENSCENARIOLIB_EXP void SetParkingBrake(std::shared_ptr<IOverrideParkingBrakeActionWriter> parkingBrake) override
            {
                _parkingBrake = parkingBrake;
            }

            OPENSCENARIOLIB_EXP void SetSteeringWheel(std::shared_ptr<IOverrideSteeringWheelActionWriter> steeringWheel) override
            {
                _steeringWheel = steeringWheel;
            }

            OPENSCENARIOLIB_EXP void SetGear(std::shared_ptr<IOverrideGearActionWriter> gear) override
            {
                _gear = gear;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideControllerValueActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideControllerValueAction).name())
                    return std::dynamic_pointer_cast<IOverrideControllerValueAction>(shared_from_this());
                else if (classifier == typeid(IOverrideControllerValueActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideControllerValueActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideControllerValueAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideThrottleActionWriter> GetWriterThrottle() const override
            {
                return std::dynamic_pointer_cast<IOverrideThrottleActionWriter>(_throttle);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideBrakeActionWriter> GetWriterBrake() const override
            {
                return std::dynamic_pointer_cast<IOverrideBrakeActionWriter>(_brake);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideClutchActionWriter> GetWriterClutch() const override
            {
                return std::dynamic_pointer_cast<IOverrideClutchActionWriter>(_clutch);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideParkingBrakeActionWriter> GetWriterParkingBrake() const override
            {
                return std::dynamic_pointer_cast<IOverrideParkingBrakeActionWriter>(_parkingBrake);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideSteeringWheelActionWriter> GetWriterSteeringWheel() const override
            {
                return std::dynamic_pointer_cast<IOverrideSteeringWheelActionWriter>(_steeringWheel);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideGearActionWriter> GetWriterGear() const override
            {
                return std::dynamic_pointer_cast<IOverrideGearActionWriter>(_gear);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideGearAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideGearAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideGearActionImpl: public BaseImpl, public IOverrideGearActionWriter, public std::enable_shared_from_this<OverrideGearActionImpl> 
        {
        private:
            bool _active {};
            double _number {};
        public:

            OPENSCENARIOLIB_EXP OverrideGearActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetNumber() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetNumber(const double number) override
            {
                _number = number;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NUMBER);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideGearActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideGearAction).name())
                    return std::dynamic_pointer_cast<IOverrideGearAction>(shared_from_this());
                else if (classifier == typeid(IOverrideGearActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideGearActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__NUMBER)
                {
                    return GetNumber();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideGearAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToNumber(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NUMBER, parameterName, nullTextMarker /*no textmarker*/);
                _number = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumber() const override
            {
                auto number = OSC_CONSTANTS::ATTRIBUTE__NUMBER;
                return GetParameterNameFromAttribute(number);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNumberParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NUMBER);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideParkingBrakeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideParkingBrakeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideParkingBrakeActionImpl: public BaseImpl, public IOverrideParkingBrakeActionWriter, public std::enable_shared_from_this<OverrideParkingBrakeActionImpl> 
        {
        private:
            bool _active {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP OverrideParkingBrakeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideParkingBrakeActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideParkingBrakeAction).name())
                    return std::dynamic_pointer_cast<IOverrideParkingBrakeAction>(shared_from_this());
                else if (classifier == typeid(IOverrideParkingBrakeActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideParkingBrakeActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideParkingBrakeAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideSteeringWheelAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideSteeringWheelAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideSteeringWheelActionImpl: public BaseImpl, public IOverrideSteeringWheelActionWriter, public std::enable_shared_from_this<OverrideSteeringWheelActionImpl> 
        {
        private:
            bool _active {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP OverrideSteeringWheelActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideSteeringWheelActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideSteeringWheelAction).name())
                    return std::dynamic_pointer_cast<IOverrideSteeringWheelAction>(shared_from_this());
                else if (classifier == typeid(IOverrideSteeringWheelActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideSteeringWheelActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideSteeringWheelAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IOverrideThrottleAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideThrottleAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideThrottleActionImpl: public BaseImpl, public IOverrideThrottleActionWriter, public std::enable_shared_from_this<OverrideThrottleActionImpl> 
        {
        private:
            bool _active {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP OverrideThrottleActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override
            {
                _active = active;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(OverrideThrottleActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IOverrideThrottleAction).name())
                    return std::dynamic_pointer_cast<IOverrideThrottleAction>(shared_from_this());
                else if (classifier == typeid(IOverrideThrottleActionWriter).name())
                    return std::dynamic_pointer_cast<IOverrideThrottleActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ACTIVE)
                {
                    return GetActive();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "OverrideThrottleAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ACTIVE, parameterName, nullTextMarker /*no textmarker*/);
                _active = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override
            {
                auto active = OSC_CONSTANTS::ATTRIBUTE__ACTIVE;
                return GetParameterNameFromAttribute(active);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ACTIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterActionImpl: public BaseImpl, public IParameterActionWriter, public std::enable_shared_from_this<ParameterActionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef {};
            std::shared_ptr<IParameterSetActionWriter> _setAction {};
            std::shared_ptr<IParameterModifyActionWriter> _modifyAction {};
        public:

            OPENSCENARIOLIB_EXP ParameterActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterSetAction> GetSetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterModifyAction> GetModifyAction() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override
            {
                _parameterRef = parameterRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF);
            }

            OPENSCENARIOLIB_EXP void SetSetAction(std::shared_ptr<IParameterSetActionWriter> setAction) override
            {
                _setAction = setAction;
                _modifyAction = {};
            }

            OPENSCENARIOLIB_EXP void SetModifyAction(std::shared_ptr<IParameterModifyActionWriter> modifyAction) override
            {
                _modifyAction = modifyAction;
                _setAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterAction).name())
                    return std::dynamic_pointer_cast<IParameterAction>(shared_from_this());
                else if (classifier == typeid(IParameterActionWriter).name())
                    return std::dynamic_pointer_cast<IParameterActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF, parameterName, nullTextMarker /*no textmarker*/);
                _parameterRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterRef() const override
            {
                auto parameterRef = OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF;
                return GetParameterNameFromAttribute(parameterRef);
            }

            OPENSCENARIOLIB_EXP bool IsParameterRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterSetActionWriter> GetWriterSetAction() const override
            {
                return std::dynamic_pointer_cast<IParameterSetActionWriter>(_setAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterModifyActionWriter> GetWriterModifyAction() const override
            {
                return std::dynamic_pointer_cast<IParameterModifyActionWriter>(_modifyAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterAddValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAddValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterAddValueRuleImpl: public BaseImpl, public IParameterAddValueRuleWriter, public std::enable_shared_from_this<ParameterAddValueRuleImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterAddValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterAddValueRuleImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterAddValueRule).name())
                    return std::dynamic_pointer_cast<IParameterAddValueRule>(shared_from_this());
                else if (classifier == typeid(IParameterAddValueRuleWriter).name())
                    return std::dynamic_pointer_cast<IParameterAddValueRuleWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterAddValueRule";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterAssignment. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAssignment)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterAssignmentImpl: public BaseImpl, public IParameterAssignmentWriter, public std::enable_shared_from_this<ParameterAssignmentImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef {};
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterAssignmentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override
            {
                _parameterRef = parameterRef;
            }

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterAssignmentImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterAssignment).name())
                    return std::dynamic_pointer_cast<IParameterAssignment>(shared_from_this());
                else if (classifier == typeid(IParameterAssignmentWriter).name())
                    return std::dynamic_pointer_cast<IParameterAssignmentWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterAssignment";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterConditionImpl: public BaseImpl, public IParameterConditionWriter, public std::enable_shared_from_this<ParameterConditionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef {};
            Rule _rule {};
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override
            {
                _parameterRef = parameterRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterCondition).name())
                    return std::dynamic_pointer_cast<IParameterCondition>(shared_from_this());
                else if (classifier == typeid(IParameterConditionWriter).name())
                    return std::dynamic_pointer_cast<IParameterConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF, parameterName, nullTextMarker /*no textmarker*/);
                _parameterRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterRef() const override
            {
                auto parameterRef = OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF;
                return GetParameterNameFromAttribute(parameterRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsParameterRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PARAMETER_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterDeclaration. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterDeclaration)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterDeclarationImpl: public BaseImpl, public IParameterDeclarationWriter, public std::enable_shared_from_this<ParameterDeclarationImpl> 
        {
        private:
            std::string _name {};
            ParameterType _parameterType {};
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterDeclarationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP ParameterType GetParameterType() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
            }

            OPENSCENARIOLIB_EXP void SetParameterType(const ParameterType parameterType) override
            {
                _parameterType = parameterType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_TYPE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterDeclarationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterDeclaration).name())
                    return std::dynamic_pointer_cast<IParameterDeclaration>(shared_from_this());
                else if (classifier == typeid(IParameterDeclarationWriter).name())
                    return std::dynamic_pointer_cast<IParameterDeclarationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterDeclaration";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PARAMETER_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _parameterType = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterType() const override
            {
                auto parameterType = OSC_CONSTANTS::ATTRIBUTE__PARAMETER_TYPE;
                return GetParameterNameFromAttribute(parameterType);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsParameterTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PARAMETER_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterModifyAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterModifyAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterModifyActionImpl: public BaseImpl, public IParameterModifyActionWriter, public std::enable_shared_from_this<ParameterModifyActionImpl> 
        {
        private:
            std::shared_ptr<IModifyRuleWriter> _rule {};
        public:

            OPENSCENARIOLIB_EXP ParameterModifyActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IModifyRule> GetRule() const override;


            OPENSCENARIOLIB_EXP void SetRule(std::shared_ptr<IModifyRuleWriter> rule) override
            {
                _rule = rule;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterModifyActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterModifyAction).name())
                    return std::dynamic_pointer_cast<IParameterModifyAction>(shared_from_this());
                else if (classifier == typeid(IParameterModifyActionWriter).name())
                    return std::dynamic_pointer_cast<IParameterModifyActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterModifyAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IModifyRuleWriter> GetWriterRule() const override
            {
                return std::dynamic_pointer_cast<IModifyRuleWriter>(_rule);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterMultiplyByValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterMultiplyByValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterMultiplyByValueRuleImpl: public BaseImpl, public IParameterMultiplyByValueRuleWriter, public std::enable_shared_from_this<ParameterMultiplyByValueRuleImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterMultiplyByValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterMultiplyByValueRuleImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterMultiplyByValueRule).name())
                    return std::dynamic_pointer_cast<IParameterMultiplyByValueRule>(shared_from_this());
                else if (classifier == typeid(IParameterMultiplyByValueRuleWriter).name())
                    return std::dynamic_pointer_cast<IParameterMultiplyByValueRuleWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterMultiplyByValueRule";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IParameterSetAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterSetAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterSetActionImpl: public BaseImpl, public IParameterSetActionWriter, public std::enable_shared_from_this<ParameterSetActionImpl> 
        {
        private:
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP ParameterSetActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ParameterSetActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IParameterSetAction).name())
                    return std::dynamic_pointer_cast<IParameterSetAction>(shared_from_this());
                else if (classifier == typeid(IParameterSetActionWriter).name())
                    return std::dynamic_pointer_cast<IParameterSetActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ParameterSetAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPedestrian. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrian)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianImpl: public BaseImpl, public IPedestrianWriter, public std::enable_shared_from_this<PedestrianImpl> 
        {
        private:
            double _mass {};
            std::string _model {};
            std::string _name {};
            PedestrianCategory _pedestrianCategory {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            std::shared_ptr<IPropertiesWriter> _properties {};
        public:

            OPENSCENARIOLIB_EXP PedestrianImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetMass() const override;
            OPENSCENARIOLIB_EXP std::string GetModel() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP PedestrianCategory GetPedestrianCategory() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetMass(const double mass) override
            {
                _mass = mass;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASS);
            }

            OPENSCENARIOLIB_EXP void SetModel(const std::string model) override
            {
                _model = model;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MODEL);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetPedestrianCategory(const PedestrianCategory pedestrianCategory) override
            {
                _pedestrianCategory = pedestrianCategory;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PEDESTRIAN_CATEGORY);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override
            {
                _boundingBox = boundingBox;
            }

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PedestrianImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPedestrian).name())
                    return std::dynamic_pointer_cast<IPedestrian>(shared_from_this());
                else if (classifier == typeid(IPedestrianWriter).name())
                    return std::dynamic_pointer_cast<IPedestrianWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MASS)
                {
                    return GetMass();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Pedestrian";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMass(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASS, parameterName, nullTextMarker /*no textmarker*/);
                _mass = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToModel(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MODEL, parameterName, nullTextMarker /*no textmarker*/);
                _model = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPedestrianCategory(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PEDESTRIAN_CATEGORY, parameterName, nullTextMarker /*no textmarker*/);
                _pedestrianCategory = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMass() const override
            {
                auto mass = OSC_CONSTANTS::ATTRIBUTE__MASS;
                return GetParameterNameFromAttribute(mass);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromModel() const override
            {
                auto model = OSC_CONSTANTS::ATTRIBUTE__MODEL;
                return GetParameterNameFromAttribute(model);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPedestrianCategory() const override
            {
                auto pedestrianCategory = OSC_CONSTANTS::ATTRIBUTE__PEDESTRIAN_CATEGORY;
                return GetParameterNameFromAttribute(pedestrianCategory);
            }

            OPENSCENARIOLIB_EXP bool IsMassParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MASS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsModelParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MODEL);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPedestrianCategoryParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PEDESTRIAN_CATEGORY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override
            {
                return std::dynamic_pointer_cast<IBoundingBoxWriter>(_boundingBox);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override
            {
                return std::dynamic_pointer_cast<IPropertiesWriter>(_properties);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPedestrianCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrianCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianCatalogLocationImpl: public BaseImpl, public IPedestrianCatalogLocationWriter, public std::enable_shared_from_this<PedestrianCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP PedestrianCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PedestrianCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPedestrianCatalogLocation).name())
                    return std::dynamic_pointer_cast<IPedestrianCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IPedestrianCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IPedestrianCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "PedestrianCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPerformance. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPerformance)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PerformanceImpl: public BaseImpl, public IPerformanceWriter, public std::enable_shared_from_this<PerformanceImpl> 
        {
        private:
            double _maxAcceleration {};
            double _maxDeceleration {};
            double _maxSpeed {};
        public:

            OPENSCENARIOLIB_EXP PerformanceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetMaxAcceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxDeceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMaxAcceleration(const double maxAcceleration) override
            {
                _maxAcceleration = maxAcceleration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION);
            }

            OPENSCENARIOLIB_EXP void SetMaxDeceleration(const double maxDeceleration) override
            {
                _maxDeceleration = maxDeceleration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION);
            }

            OPENSCENARIOLIB_EXP void SetMaxSpeed(const double maxSpeed) override
            {
                _maxSpeed = maxSpeed;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PerformanceImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPerformance).name())
                    return std::dynamic_pointer_cast<IPerformance>(shared_from_this());
                else if (classifier == typeid(IPerformanceWriter).name())
                    return std::dynamic_pointer_cast<IPerformanceWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION)
                {
                    return GetMaxAcceleration();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION)
                {
                    return GetMaxDeceleration();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED)
                {
                    return GetMaxSpeed();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Performance";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAcceleration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION, parameterName, nullTextMarker /*no textmarker*/);
                _maxAcceleration = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDeceleration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION, parameterName, nullTextMarker /*no textmarker*/);
                _maxDeceleration = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSpeed(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED, parameterName, nullTextMarker /*no textmarker*/);
                _maxSpeed = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAcceleration() const override
            {
                auto maxAcceleration = OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION;
                return GetParameterNameFromAttribute(maxAcceleration);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDeceleration() const override
            {
                auto maxDeceleration = OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION;
                return GetParameterNameFromAttribute(maxDeceleration);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSpeed() const override
            {
                auto maxSpeed = OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED;
                return GetParameterNameFromAttribute(maxSpeed);
            }

            OPENSCENARIOLIB_EXP bool IsMaxAccelerationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_ACCELERATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMaxDecelerationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_DECELERATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsMaxSpeedParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MAX_SPEED);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPhase. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPhase)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PhaseImpl: public BaseImpl, public IPhaseWriter, public std::enable_shared_from_this<PhaseImpl> 
        {
        private:
            double _duration {};
            std::string _name {};
            std::vector<std::shared_ptr<ITrafficSignalStateWriter>> _trafficSignalStates {};
        public:

            OPENSCENARIOLIB_EXP PhaseImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDuration() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalState>> GetTrafficSignalStates() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalStateWriter>> GetWriterTrafficSignalStates() const override
            {
                return _trafficSignalStates;
            }

            OPENSCENARIOLIB_EXP int GetTrafficSignalStatesSize() const override
            {
                return static_cast<int>(_trafficSignalStates.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalState> GetTrafficSignalStatesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _trafficSignalStates.size() > index)
                {
                    return _trafficSignalStates[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override
            {
                _duration = duration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalStates(std::vector<std::shared_ptr<ITrafficSignalStateWriter>>& trafficSignalStates) override
            {
                _trafficSignalStates = trafficSignalStates;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PhaseImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPhase).name())
                    return std::dynamic_pointer_cast<IPhase>(shared_from_this());
                else if (classifier == typeid(IPhaseWriter).name())
                    return std::dynamic_pointer_cast<IPhaseWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DURATION)
                {
                    return GetDuration();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Phase";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION, parameterName, nullTextMarker /*no textmarker*/);
                _duration = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override
            {
                auto duration = OSC_CONSTANTS::ATTRIBUTE__DURATION;
                return GetParameterNameFromAttribute(duration);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DURATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPolyline. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPolyline)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PolylineImpl: public BaseImpl, public IPolylineWriter, public std::enable_shared_from_this<PolylineImpl> 
        {
        private:
            std::vector<std::shared_ptr<IVertexWriter>> _vertices {};
        public:

            OPENSCENARIOLIB_EXP PolylineImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVertex>> GetVertices() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVertexWriter>> GetWriterVertices() const override
            {
                return _vertices;
            }

            OPENSCENARIOLIB_EXP int GetVerticesSize() const override
            {
                return static_cast<int>(_vertices.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IVertex> GetVerticesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _vertices.size() > index)
                {
                    return _vertices[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetVertices(std::vector<std::shared_ptr<IVertexWriter>>& vertices) override
            {
                _vertices = vertices;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PolylineImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPolyline).name())
                    return std::dynamic_pointer_cast<IPolyline>(shared_from_this());
                else if (classifier == typeid(IPolylineWriter).name())
                    return std::dynamic_pointer_cast<IPolylineWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Polyline";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionImpl: public BaseImpl, public IPositionWriter, public std::enable_shared_from_this<PositionImpl> 
        {
        private:
            std::shared_ptr<IWorldPositionWriter> _worldPosition {};
            std::shared_ptr<IRelativeWorldPositionWriter> _relativeWorldPosition {};
            std::shared_ptr<IRelativeObjectPositionWriter> _relativeObjectPosition {};
            std::shared_ptr<IRoadPositionWriter> _roadPosition {};
            std::shared_ptr<IRelativeRoadPositionWriter> _relativeRoadPosition {};
            std::shared_ptr<ILanePositionWriter> _lanePosition {};
            std::shared_ptr<IRelativeLanePositionWriter> _relativeLanePosition {};
            std::shared_ptr<IRoutePositionWriter> _routePosition {};
        public:

            OPENSCENARIOLIB_EXP PositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IWorldPosition> GetWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeWorldPosition> GetRelativeWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeObjectPosition> GetRelativeObjectPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadPosition> GetRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeRoadPosition> GetRelativeRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILanePosition> GetLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeLanePosition> GetRelativeLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutePosition> GetRoutePosition() const override;


            OPENSCENARIOLIB_EXP void SetWorldPosition(std::shared_ptr<IWorldPositionWriter> worldPosition) override
            {
                _worldPosition = worldPosition;
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeWorldPosition(std::shared_ptr<IRelativeWorldPositionWriter> relativeWorldPosition) override
            {
                _relativeWorldPosition = relativeWorldPosition;
                _worldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeObjectPosition(std::shared_ptr<IRelativeObjectPositionWriter> relativeObjectPosition) override
            {
                _relativeObjectPosition = relativeObjectPosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRoadPosition(std::shared_ptr<IRoadPositionWriter> roadPosition) override
            {
                _roadPosition = roadPosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeRoadPosition(std::shared_ptr<IRelativeRoadPositionWriter> relativeRoadPosition) override
            {
                _relativeRoadPosition = relativeRoadPosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetLanePosition(std::shared_ptr<ILanePositionWriter> lanePosition) override
            {
                _lanePosition = lanePosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _relativeLanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRelativeLanePosition(std::shared_ptr<IRelativeLanePositionWriter> relativeLanePosition) override
            {
                _relativeLanePosition = relativeLanePosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _routePosition = {};
            }

            OPENSCENARIOLIB_EXP void SetRoutePosition(std::shared_ptr<IRoutePositionWriter> routePosition) override
            {
                _routePosition = routePosition;
                _worldPosition = {};
                _relativeWorldPosition = {};
                _relativeObjectPosition = {};
                _roadPosition = {};
                _relativeRoadPosition = {};
                _lanePosition = {};
                _relativeLanePosition = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPosition).name())
                    return std::dynamic_pointer_cast<IPosition>(shared_from_this());
                else if (classifier == typeid(IPositionWriter).name())
                    return std::dynamic_pointer_cast<IPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Position";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IWorldPositionWriter> GetWriterWorldPosition() const override
            {
                return std::dynamic_pointer_cast<IWorldPositionWriter>(_worldPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeWorldPositionWriter> GetWriterRelativeWorldPosition() const override
            {
                return std::dynamic_pointer_cast<IRelativeWorldPositionWriter>(_relativeWorldPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeObjectPositionWriter> GetWriterRelativeObjectPosition() const override
            {
                return std::dynamic_pointer_cast<IRelativeObjectPositionWriter>(_relativeObjectPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadPositionWriter> GetWriterRoadPosition() const override
            {
                return std::dynamic_pointer_cast<IRoadPositionWriter>(_roadPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeRoadPositionWriter> GetWriterRelativeRoadPosition() const override
            {
                return std::dynamic_pointer_cast<IRelativeRoadPositionWriter>(_relativeRoadPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILanePositionWriter> GetWriterLanePosition() const override
            {
                return std::dynamic_pointer_cast<ILanePositionWriter>(_lanePosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeLanePositionWriter> GetWriterRelativeLanePosition() const override
            {
                return std::dynamic_pointer_cast<IRelativeLanePositionWriter>(_relativeLanePosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutePositionWriter> GetWriterRoutePosition() const override
            {
                return std::dynamic_pointer_cast<IRoutePositionWriter>(_routePosition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPositionInLaneCoordinates. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionInLaneCoordinates)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionInLaneCoordinatesImpl: public BaseImpl, public IPositionInLaneCoordinatesWriter, public std::enable_shared_from_this<PositionInLaneCoordinatesImpl> 
        {
        private:
            std::string _laneId {};
            double _laneOffset {};
            double _pathS {};
        public:

            OPENSCENARIOLIB_EXP PositionInLaneCoordinatesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetLaneId() const override;
            OPENSCENARIOLIB_EXP double GetLaneOffset() const override;
            OPENSCENARIOLIB_EXP double GetPathS() const override;


            OPENSCENARIOLIB_EXP void SetLaneId(const std::string laneId) override
            {
                _laneId = laneId;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_ID);
            }

            OPENSCENARIOLIB_EXP void SetLaneOffset(const double laneOffset) override
            {
                _laneOffset = laneOffset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetPathS(const double pathS) override
            {
                _pathS = pathS;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH_S);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PositionInLaneCoordinatesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPositionInLaneCoordinates).name())
                    return std::dynamic_pointer_cast<IPositionInLaneCoordinates>(shared_from_this());
                else if (classifier == typeid(IPositionInLaneCoordinatesWriter).name())
                    return std::dynamic_pointer_cast<IPositionInLaneCoordinatesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__LANE_OFFSET)
                {
                    return GetLaneOffset();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__PATH_S)
                {
                    return GetPathS();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "PositionInLaneCoordinates";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneId(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_ID, parameterName, nullTextMarker /*no textmarker*/);
                _laneId = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__LANE_OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _laneOffset = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPathS(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH_S, parameterName, nullTextMarker /*no textmarker*/);
                _pathS = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneId() const override
            {
                auto laneId = OSC_CONSTANTS::ATTRIBUTE__LANE_ID;
                return GetParameterNameFromAttribute(laneId);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneOffset() const override
            {
                auto laneOffset = OSC_CONSTANTS::ATTRIBUTE__LANE_OFFSET;
                return GetParameterNameFromAttribute(laneOffset);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPathS() const override
            {
                auto pathS = OSC_CONSTANTS::ATTRIBUTE__PATH_S;
                return GetParameterNameFromAttribute(pathS);
            }

            OPENSCENARIOLIB_EXP bool IsLaneIdParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LANE_ID);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsLaneOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__LANE_OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPathSParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PATH_S);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPositionInRoadCoordinates. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionInRoadCoordinates)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionInRoadCoordinatesImpl: public BaseImpl, public IPositionInRoadCoordinatesWriter, public std::enable_shared_from_this<PositionInRoadCoordinatesImpl> 
        {
        private:
            double _pathS {};
            double _t {};
        public:

            OPENSCENARIOLIB_EXP PositionInRoadCoordinatesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetPathS() const override;
            OPENSCENARIOLIB_EXP double GetT() const override;


            OPENSCENARIOLIB_EXP void SetPathS(const double pathS) override
            {
                _pathS = pathS;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH_S);
            }

            OPENSCENARIOLIB_EXP void SetT(const double t) override
            {
                _t = t;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__T);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PositionInRoadCoordinatesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPositionInRoadCoordinates).name())
                    return std::dynamic_pointer_cast<IPositionInRoadCoordinates>(shared_from_this());
                else if (classifier == typeid(IPositionInRoadCoordinatesWriter).name())
                    return std::dynamic_pointer_cast<IPositionInRoadCoordinatesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__PATH_S)
                {
                    return GetPathS();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__T)
                {
                    return GetT();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "PositionInRoadCoordinates";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPathS(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PATH_S, parameterName, nullTextMarker /*no textmarker*/);
                _pathS = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToT(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__T, parameterName, nullTextMarker /*no textmarker*/);
                _t = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPathS() const override
            {
                auto pathS = OSC_CONSTANTS::ATTRIBUTE__PATH_S;
                return GetParameterNameFromAttribute(pathS);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromT() const override
            {
                auto t = OSC_CONSTANTS::ATTRIBUTE__T;
                return GetParameterNameFromAttribute(t);
            }

            OPENSCENARIOLIB_EXP bool IsPathSParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PATH_S);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__T);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPositionOfCurrentEntity. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionOfCurrentEntity)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionOfCurrentEntityImpl: public BaseImpl, public IPositionOfCurrentEntityWriter, public std::enable_shared_from_this<PositionOfCurrentEntityImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
        public:

            OPENSCENARIOLIB_EXP PositionOfCurrentEntityImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PositionOfCurrentEntityImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPositionOfCurrentEntity).name())
                    return std::dynamic_pointer_cast<IPositionOfCurrentEntity>(shared_from_this());
                else if (classifier == typeid(IPositionOfCurrentEntityWriter).name())
                    return std::dynamic_pointer_cast<IPositionOfCurrentEntityWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "PositionOfCurrentEntity";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPrecipitation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrecipitation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrecipitationImpl: public BaseImpl, public IPrecipitationWriter, public std::enable_shared_from_this<PrecipitationImpl> 
        {
        private:
            double _intensity {};
            PrecipitationType _precipitationType {};
        public:

            OPENSCENARIOLIB_EXP PrecipitationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetIntensity() const override;
            OPENSCENARIOLIB_EXP PrecipitationType GetPrecipitationType() const override;


            OPENSCENARIOLIB_EXP void SetIntensity(const double intensity) override
            {
                _intensity = intensity;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INTENSITY);
            }

            OPENSCENARIOLIB_EXP void SetPrecipitationType(const PrecipitationType precipitationType) override
            {
                _precipitationType = precipitationType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PRECIPITATION_TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PrecipitationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPrecipitation).name())
                    return std::dynamic_pointer_cast<IPrecipitation>(shared_from_this());
                else if (classifier == typeid(IPrecipitationWriter).name())
                    return std::dynamic_pointer_cast<IPrecipitationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__INTENSITY)
                {
                    return GetIntensity();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Precipitation";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToIntensity(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INTENSITY, parameterName, nullTextMarker /*no textmarker*/);
                _intensity = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPrecipitationType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PRECIPITATION_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _precipitationType = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromIntensity() const override
            {
                auto intensity = OSC_CONSTANTS::ATTRIBUTE__INTENSITY;
                return GetParameterNameFromAttribute(intensity);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPrecipitationType() const override
            {
                auto precipitationType = OSC_CONSTANTS::ATTRIBUTE__PRECIPITATION_TYPE;
                return GetParameterNameFromAttribute(precipitationType);
            }

            OPENSCENARIOLIB_EXP bool IsIntensityParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__INTENSITY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPrecipitationTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PRECIPITATION_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPrivate. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrivate)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrivateImpl: public BaseImpl, public IPrivateWriter, public std::enable_shared_from_this<PrivateImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            std::vector<std::shared_ptr<IPrivateActionWriter>> _privateActions {};
        public:

            OPENSCENARIOLIB_EXP PrivateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateAction>> GetPrivateActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateActionWriter>> GetWriterPrivateActions() const override
            {
                return _privateActions;
            }

            OPENSCENARIOLIB_EXP int GetPrivateActionsSize() const override
            {
                return static_cast<int>(_privateActions.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateAction> GetPrivateActionsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _privateActions.size() > index)
                {
                    return _privateActions[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetPrivateActions(std::vector<std::shared_ptr<IPrivateActionWriter>>& privateActions) override
            {
                _privateActions = privateActions;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PrivateImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPrivate).name())
                    return std::dynamic_pointer_cast<IPrivate>(shared_from_this());
                else if (classifier == typeid(IPrivateWriter).name())
                    return std::dynamic_pointer_cast<IPrivateWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Private";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IPrivateAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrivateAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrivateActionImpl: public BaseImpl, public IPrivateActionWriter, public std::enable_shared_from_this<PrivateActionImpl> 
        {
        private:
            std::shared_ptr<ILongitudinalActionWriter> _longitudinalAction {};
            std::shared_ptr<ILateralActionWriter> _lateralAction {};
            std::shared_ptr<IVisibilityActionWriter> _visibilityAction {};
            std::shared_ptr<ISynchronizeActionWriter> _synchronizeAction {};
            std::shared_ptr<IActivateControllerActionWriter> _activateControllerAction {};
            std::shared_ptr<IControllerActionWriter> _controllerAction {};
            std::shared_ptr<ITeleportActionWriter> _teleportAction {};
            std::shared_ptr<IRoutingActionWriter> _routingAction {};
        public:

            OPENSCENARIOLIB_EXP PrivateActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalAction> GetLongitudinalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralAction> GetLateralAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVisibilityAction> GetVisibilityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISynchronizeAction> GetSynchronizeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerAction> GetActivateControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerAction> GetControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITeleportAction> GetTeleportAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutingAction> GetRoutingAction() const override;


            OPENSCENARIOLIB_EXP void SetLongitudinalAction(std::shared_ptr<ILongitudinalActionWriter> longitudinalAction) override
            {
                _longitudinalAction = longitudinalAction;
                _lateralAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetLateralAction(std::shared_ptr<ILateralActionWriter> lateralAction) override
            {
                _lateralAction = lateralAction;
                _longitudinalAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetVisibilityAction(std::shared_ptr<IVisibilityActionWriter> visibilityAction) override
            {
                _visibilityAction = visibilityAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetSynchronizeAction(std::shared_ptr<ISynchronizeActionWriter> synchronizeAction) override
            {
                _synchronizeAction = synchronizeAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _visibilityAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetActivateControllerAction(std::shared_ptr<IActivateControllerActionWriter> activateControllerAction) override
            {
                _activateControllerAction = activateControllerAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _controllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetControllerAction(std::shared_ptr<IControllerActionWriter> controllerAction) override
            {
                _controllerAction = controllerAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _teleportAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetTeleportAction(std::shared_ptr<ITeleportActionWriter> teleportAction) override
            {
                _teleportAction = teleportAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _routingAction = {};
            }

            OPENSCENARIOLIB_EXP void SetRoutingAction(std::shared_ptr<IRoutingActionWriter> routingAction) override
            {
                _routingAction = routingAction;
                _longitudinalAction = {};
                _lateralAction = {};
                _visibilityAction = {};
                _synchronizeAction = {};
                _activateControllerAction = {};
                _controllerAction = {};
                _teleportAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PrivateActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IPrivateAction).name())
                    return std::dynamic_pointer_cast<IPrivateAction>(shared_from_this());
                else if (classifier == typeid(IPrivateActionWriter).name())
                    return std::dynamic_pointer_cast<IPrivateActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "PrivateAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalActionWriter> GetWriterLongitudinalAction() const override
            {
                return std::dynamic_pointer_cast<ILongitudinalActionWriter>(_longitudinalAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralActionWriter> GetWriterLateralAction() const override
            {
                return std::dynamic_pointer_cast<ILateralActionWriter>(_lateralAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IVisibilityActionWriter> GetWriterVisibilityAction() const override
            {
                return std::dynamic_pointer_cast<IVisibilityActionWriter>(_visibilityAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ISynchronizeActionWriter> GetWriterSynchronizeAction() const override
            {
                return std::dynamic_pointer_cast<ISynchronizeActionWriter>(_synchronizeAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerActionWriter> GetWriterActivateControllerAction() const override
            {
                return std::dynamic_pointer_cast<IActivateControllerActionWriter>(_activateControllerAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerActionWriter> GetWriterControllerAction() const override
            {
                return std::dynamic_pointer_cast<IControllerActionWriter>(_controllerAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITeleportActionWriter> GetWriterTeleportAction() const override
            {
                return std::dynamic_pointer_cast<ITeleportActionWriter>(_teleportAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutingActionWriter> GetWriterRoutingAction() const override
            {
                return std::dynamic_pointer_cast<IRoutingActionWriter>(_routingAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IProperties. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProperties)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PropertiesImpl: public BaseImpl, public IPropertiesWriter, public std::enable_shared_from_this<PropertiesImpl> 
        {
        private:
            std::vector<std::shared_ptr<IPropertyWriter>> _properties {};
            std::vector<std::shared_ptr<IFileWriter>> _files {};
        public:

            OPENSCENARIOLIB_EXP PropertiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IProperty>> GetProperties() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPropertyWriter>> GetWriterProperties() const override
            {
                return _properties;
            }

            OPENSCENARIOLIB_EXP int GetPropertiesSize() const override
            {
                return static_cast<int>(_properties.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IProperty> GetPropertiesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _properties.size() > index)
                {
                    return _properties[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IFile>> GetFiles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IFileWriter>> GetWriterFiles() const override
            {
                return _files;
            }

            OPENSCENARIOLIB_EXP int GetFilesSize() const override
            {
                return static_cast<int>(_files.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetFilesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _files.size() > index)
                {
                    return _files[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetProperties(std::vector<std::shared_ptr<IPropertyWriter>>& properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void SetFiles(std::vector<std::shared_ptr<IFileWriter>>& files) override
            {
                _files = files;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PropertiesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IProperties).name())
                    return std::dynamic_pointer_cast<IProperties>(shared_from_this());
                else if (classifier == typeid(IPropertiesWriter).name())
                    return std::dynamic_pointer_cast<IPropertiesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Properties";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IProperty. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProperty)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PropertyImpl: public BaseImpl, public IPropertyWriter, public std::enable_shared_from_this<PropertyImpl> 
        {
        private:
            std::string _name {};
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP PropertyImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(PropertyImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IProperty).name())
                    return std::dynamic_pointer_cast<IProperty>(shared_from_this());
                else if (classifier == typeid(IPropertyWriter).name())
                    return std::dynamic_pointer_cast<IPropertyWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Property";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IReachPositionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IReachPositionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ReachPositionConditionImpl: public BaseImpl, public IReachPositionConditionWriter, public std::enable_shared_from_this<ReachPositionConditionImpl> 
        {
        private:
            double _tolerance {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP ReachPositionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetTolerance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTolerance(const double tolerance) override
            {
                _tolerance = tolerance;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TOLERANCE);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ReachPositionConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IReachPositionCondition).name())
                    return std::dynamic_pointer_cast<IReachPositionCondition>(shared_from_this());
                else if (classifier == typeid(IReachPositionConditionWriter).name())
                    return std::dynamic_pointer_cast<IReachPositionConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__TOLERANCE)
                {
                    return GetTolerance();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ReachPositionCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTolerance(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TOLERANCE, parameterName, nullTextMarker /*no textmarker*/);
                _tolerance = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTolerance() const override
            {
                auto tolerance = OSC_CONSTANTS::ATTRIBUTE__TOLERANCE;
                return GetParameterNameFromAttribute(tolerance);
            }

            OPENSCENARIOLIB_EXP bool IsToleranceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TOLERANCE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeDistanceConditionImpl: public BaseImpl, public IRelativeDistanceConditionWriter, public std::enable_shared_from_this<RelativeDistanceConditionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            bool _freespace {};
            RelativeDistanceType _relativeDistanceType {};
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeDistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP RelativeDistanceType GetRelativeDistanceType() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetRelativeDistanceType(const RelativeDistanceType relativeDistanceType) override
            {
                _relativeDistanceType = relativeDistanceType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RELATIVE_DISTANCE_TYPE);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeDistanceConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeDistanceCondition).name())
                    return std::dynamic_pointer_cast<IRelativeDistanceCondition>(shared_from_this());
                else if (classifier == typeid(IRelativeDistanceConditionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeDistanceConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeDistanceCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRelativeDistanceType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RELATIVE_DISTANCE_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _relativeDistanceType = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRelativeDistanceType() const override
            {
                auto relativeDistanceType = OSC_CONSTANTS::ATTRIBUTE__RELATIVE_DISTANCE_TYPE;
                return GetParameterNameFromAttribute(relativeDistanceType);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRelativeDistanceTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RELATIVE_DISTANCE_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeLanePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeLanePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeLanePositionImpl: public BaseImpl, public IRelativeLanePositionWriter, public std::enable_shared_from_this<RelativeLanePositionImpl> 
        {
        private:
            int _dLane {};
            double _ds {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            double _offset {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP RelativeLanePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP int GetDLane() const override;
            OPENSCENARIOLIB_EXP double GetDs() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDLane(const int dLane) override
            {
                _dLane = dLane;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__D_LANE);
            }

            OPENSCENARIOLIB_EXP void SetDs(const double ds) override
            {
                _ds = ds;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DS);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override
            {
                _offset = offset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeLanePositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeLanePosition).name())
                    return std::dynamic_pointer_cast<IRelativeLanePosition>(shared_from_this());
                else if (classifier == typeid(IRelativeLanePositionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeLanePositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__D_LANE)
                {
                    return GetDLane();
                }
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DS)
                {
                    return GetDs();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__OFFSET)
                {
                    return GetOffset();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeLanePosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDLane(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__D_LANE, parameterName, nullTextMarker /*no textmarker*/);
                _dLane = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDs(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DS, parameterName, nullTextMarker /*no textmarker*/);
                _ds = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _offset = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDLane() const override
            {
                auto dLane = OSC_CONSTANTS::ATTRIBUTE__D_LANE;
                return GetParameterNameFromAttribute(dLane);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDs() const override
            {
                auto ds = OSC_CONSTANTS::ATTRIBUTE__DS;
                return GetParameterNameFromAttribute(ds);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override
            {
                auto offset = OSC_CONSTANTS::ATTRIBUTE__OFFSET;
                return GetParameterNameFromAttribute(offset);
            }

            OPENSCENARIOLIB_EXP bool IsDLaneParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__D_LANE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDsParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeObjectPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeObjectPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeObjectPositionImpl: public BaseImpl, public IRelativeObjectPositionWriter, public std::enable_shared_from_this<RelativeObjectPositionImpl> 
        {
        private:
            double _dx {};
            double _dy {};
            double _dz {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP RelativeObjectPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDy() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override
            {
                _dx = dx;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DX);
            }

            OPENSCENARIOLIB_EXP void SetDy(const double dy) override
            {
                _dy = dy;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DY);
            }

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override
            {
                _dz = dz;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DZ);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeObjectPositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeObjectPosition).name())
                    return std::dynamic_pointer_cast<IRelativeObjectPosition>(shared_from_this());
                else if (classifier == typeid(IRelativeObjectPositionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeObjectPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DX)
                {
                    return GetDx();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__DY)
                {
                    return GetDy();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__DZ)
                {
                    return GetDz();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeObjectPosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DX, parameterName, nullTextMarker /*no textmarker*/);
                _dx = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDy(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DY, parameterName, nullTextMarker /*no textmarker*/);
                _dy = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DZ, parameterName, nullTextMarker /*no textmarker*/);
                _dz = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override
            {
                auto dx = OSC_CONSTANTS::ATTRIBUTE__DX;
                return GetParameterNameFromAttribute(dx);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDy() const override
            {
                auto dy = OSC_CONSTANTS::ATTRIBUTE__DY;
                return GetParameterNameFromAttribute(dy);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override
            {
                auto dz = OSC_CONSTANTS::ATTRIBUTE__DZ;
                return GetParameterNameFromAttribute(dz);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DX);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDyParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDzParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DZ);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeRoadPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeRoadPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeRoadPositionImpl: public BaseImpl, public IRelativeRoadPositionWriter, public std::enable_shared_from_this<RelativeRoadPositionImpl> 
        {
        private:
            double _ds {};
            double _dt {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP RelativeRoadPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDs() const override;
            OPENSCENARIOLIB_EXP double GetDt() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDs(const double ds) override
            {
                _ds = ds;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DS);
            }

            OPENSCENARIOLIB_EXP void SetDt(const double dt) override
            {
                _dt = dt;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DT);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeRoadPositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeRoadPosition).name())
                    return std::dynamic_pointer_cast<IRelativeRoadPosition>(shared_from_this());
                else if (classifier == typeid(IRelativeRoadPositionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeRoadPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DS)
                {
                    return GetDs();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__DT)
                {
                    return GetDt();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeRoadPosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDs(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DS, parameterName, nullTextMarker /*no textmarker*/);
                _ds = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDt(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DT, parameterName, nullTextMarker /*no textmarker*/);
                _dt = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDs() const override
            {
                auto ds = OSC_CONSTANTS::ATTRIBUTE__DS;
                return GetParameterNameFromAttribute(ds);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDt() const override
            {
                auto dt = OSC_CONSTANTS::ATTRIBUTE__DT;
                return GetParameterNameFromAttribute(dt);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsDsParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDtParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeSpeedCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeSpeedCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeSpeedConditionImpl: public BaseImpl, public IRelativeSpeedConditionWriter, public std::enable_shared_from_this<RelativeSpeedConditionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeSpeedConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeSpeedConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeSpeedCondition).name())
                    return std::dynamic_pointer_cast<IRelativeSpeedCondition>(shared_from_this());
                else if (classifier == typeid(IRelativeSpeedConditionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeSpeedConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeSpeedCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeSpeedToMaster. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeSpeedToMaster)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeSpeedToMasterImpl: public BaseImpl, public IRelativeSpeedToMasterWriter, public std::enable_shared_from_this<RelativeSpeedToMasterImpl> 
        {
        private:
            SpeedTargetValueType _speedTargetValueType {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeSpeedToMasterImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP SpeedTargetValueType GetSpeedTargetValueType() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetSpeedTargetValueType(const SpeedTargetValueType speedTargetValueType) override
            {
                _speedTargetValueType = speedTargetValueType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeSpeedToMasterImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeSpeedToMaster).name())
                    return std::dynamic_pointer_cast<IRelativeSpeedToMaster>(shared_from_this());
                else if (classifier == typeid(IRelativeSpeedToMasterWriter).name())
                    return std::dynamic_pointer_cast<IRelativeSpeedToMasterWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeSpeedToMaster";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeedTargetValueType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _speedTargetValueType = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeedTargetValueType() const override
            {
                auto speedTargetValueType = OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE;
                return GetParameterNameFromAttribute(speedTargetValueType);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsSpeedTargetValueTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeTargetLane. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetLane)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetLaneImpl: public BaseImpl, public IRelativeTargetLaneWriter, public std::enable_shared_from_this<RelativeTargetLaneImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            int _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeTargetLaneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP int GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetValue(const int value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeTargetLaneImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeTargetLane).name())
                    return std::dynamic_pointer_cast<IRelativeTargetLane>(shared_from_this());
                else if (classifier == typeid(IRelativeTargetLaneWriter).name())
                    return std::dynamic_pointer_cast<IRelativeTargetLaneWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeTargetLane";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeTargetLaneOffset. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetLaneOffset)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetLaneOffsetImpl: public BaseImpl, public IRelativeTargetLaneOffsetWriter, public std::enable_shared_from_this<RelativeTargetLaneOffsetImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeTargetLaneOffsetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeTargetLaneOffsetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeTargetLaneOffset).name())
                    return std::dynamic_pointer_cast<IRelativeTargetLaneOffset>(shared_from_this());
                else if (classifier == typeid(IRelativeTargetLaneOffsetWriter).name())
                    return std::dynamic_pointer_cast<IRelativeTargetLaneOffsetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeTargetLaneOffset";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeTargetSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetSpeedImpl: public BaseImpl, public IRelativeTargetSpeedWriter, public std::enable_shared_from_this<RelativeTargetSpeedImpl> 
        {
        private:
            bool _continuous {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            SpeedTargetValueType _speedTargetValueType {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP RelativeTargetSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP SpeedTargetValueType GetSpeedTargetValueType() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override
            {
                _continuous = continuous;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetSpeedTargetValueType(const SpeedTargetValueType speedTargetValueType) override
            {
                _speedTargetValueType = speedTargetValueType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeTargetSpeedImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeTargetSpeed).name())
                    return std::dynamic_pointer_cast<IRelativeTargetSpeed>(shared_from_this());
                else if (classifier == typeid(IRelativeTargetSpeedWriter).name())
                    return std::dynamic_pointer_cast<IRelativeTargetSpeedWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS)
                {
                    return GetContinuous();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeTargetSpeed";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS, parameterName, nullTextMarker /*no textmarker*/);
                _continuous = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeedTargetValueType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _speedTargetValueType = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override
            {
                auto continuous = OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS;
                return GetParameterNameFromAttribute(continuous);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeedTargetValueType() const override
            {
                auto speedTargetValueType = OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE;
                return GetParameterNameFromAttribute(speedTargetValueType);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CONTINUOUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSpeedTargetValueTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SPEED_TARGET_VALUE_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRelativeWorldPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeWorldPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeWorldPositionImpl: public BaseImpl, public IRelativeWorldPositionWriter, public std::enable_shared_from_this<RelativeWorldPositionImpl> 
        {
        private:
            double _dx {};
            double _dy {};
            double _dz {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP RelativeWorldPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDy() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override
            {
                _dx = dx;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DX);
            }

            OPENSCENARIOLIB_EXP void SetDy(const double dy) override
            {
                _dy = dy;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DY);
            }

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override
            {
                _dz = dz;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DZ);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RelativeWorldPositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRelativeWorldPosition).name())
                    return std::dynamic_pointer_cast<IRelativeWorldPosition>(shared_from_this());
                else if (classifier == typeid(IRelativeWorldPositionWriter).name())
                    return std::dynamic_pointer_cast<IRelativeWorldPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DX)
                {
                    return GetDx();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__DY)
                {
                    return GetDy();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__DZ)
                {
                    return GetDz();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RelativeWorldPosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DX, parameterName, nullTextMarker /*no textmarker*/);
                _dx = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDy(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DY, parameterName, nullTextMarker /*no textmarker*/);
                _dy = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DZ, parameterName, nullTextMarker /*no textmarker*/);
                _dz = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override
            {
                auto dx = OSC_CONSTANTS::ATTRIBUTE__DX;
                return GetParameterNameFromAttribute(dx);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDy() const override
            {
                auto dy = OSC_CONSTANTS::ATTRIBUTE__DY;
                return GetParameterNameFromAttribute(dy);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override
            {
                auto dz = OSC_CONSTANTS::ATTRIBUTE__DZ;
                return GetParameterNameFromAttribute(dz);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DX);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDyParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDzParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DZ);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadConditionImpl: public BaseImpl, public IRoadConditionWriter, public std::enable_shared_from_this<RoadConditionImpl> 
        {
        private:
            double _frictionScaleFactor {};
            std::shared_ptr<IPropertiesWriter> _properties {};
        public:

            OPENSCENARIOLIB_EXP RoadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetFrictionScaleFactor() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetFrictionScaleFactor(const double frictionScaleFactor) override
            {
                _frictionScaleFactor = frictionScaleFactor;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FRICTION_SCALE_FACTOR);
            }

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RoadConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoadCondition).name())
                    return std::dynamic_pointer_cast<IRoadCondition>(shared_from_this());
                else if (classifier == typeid(IRoadConditionWriter).name())
                    return std::dynamic_pointer_cast<IRoadConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__FRICTION_SCALE_FACTOR)
                {
                    return GetFrictionScaleFactor();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RoadCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFrictionScaleFactor(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FRICTION_SCALE_FACTOR, parameterName, nullTextMarker /*no textmarker*/);
                _frictionScaleFactor = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFrictionScaleFactor() const override
            {
                auto frictionScaleFactor = OSC_CONSTANTS::ATTRIBUTE__FRICTION_SCALE_FACTOR;
                return GetParameterNameFromAttribute(frictionScaleFactor);
            }

            OPENSCENARIOLIB_EXP bool IsFrictionScaleFactorParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FRICTION_SCALE_FACTOR);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override
            {
                return std::dynamic_pointer_cast<IPropertiesWriter>(_properties);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoadNetwork. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadNetwork)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadNetworkImpl: public BaseImpl, public IRoadNetworkWriter, public std::enable_shared_from_this<RoadNetworkImpl> 
        {
        private:
            std::shared_ptr<IFileWriter> _logicFile {};
            std::shared_ptr<IFileWriter> _sceneGraphFile {};
            std::vector<std::shared_ptr<ITrafficSignalControllerWriter>> _trafficSignals {};
        public:

            OPENSCENARIOLIB_EXP RoadNetworkImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetLogicFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetSceneGraphFile() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalController>> GetTrafficSignals() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalControllerWriter>> GetWriterTrafficSignals() const override
            {
                return _trafficSignals;
            }

            OPENSCENARIOLIB_EXP int GetTrafficSignalsSize() const override
            {
                return static_cast<int>(_trafficSignals.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalController> GetTrafficSignalsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _trafficSignals.size() > index)
                {
                    return _trafficSignals[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetLogicFile(std::shared_ptr<IFileWriter> logicFile) override
            {
                _logicFile = logicFile;
            }

            OPENSCENARIOLIB_EXP void SetSceneGraphFile(std::shared_ptr<IFileWriter> sceneGraphFile) override
            {
                _sceneGraphFile = sceneGraphFile;
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignals(std::vector<std::shared_ptr<ITrafficSignalControllerWriter>>& trafficSignals) override
            {
                _trafficSignals = trafficSignals;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RoadNetworkImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoadNetwork).name())
                    return std::dynamic_pointer_cast<IRoadNetwork>(shared_from_this());
                else if (classifier == typeid(IRoadNetworkWriter).name())
                    return std::dynamic_pointer_cast<IRoadNetworkWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RoadNetwork";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterLogicFile() const override
            {
                return std::dynamic_pointer_cast<IFileWriter>(_logicFile);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterSceneGraphFile() const override
            {
                return std::dynamic_pointer_cast<IFileWriter>(_sceneGraphFile);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoadPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadPositionImpl: public BaseImpl, public IRoadPositionWriter, public std::enable_shared_from_this<RoadPositionImpl> 
        {
        private:
            std::string _roadId {};
            double _s {};
            double _t {};
            std::shared_ptr<IOrientationWriter> _orientation {};
        public:

            OPENSCENARIOLIB_EXP RoadPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetRoadId() const override;
            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP double GetT() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetRoadId(const std::string roadId) override
            {
                _roadId = roadId;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROAD_ID);
            }

            OPENSCENARIOLIB_EXP void SetS(const double s) override
            {
                _s = s;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__S);
            }

            OPENSCENARIOLIB_EXP void SetT(const double t) override
            {
                _t = t;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__T);
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RoadPositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoadPosition).name())
                    return std::dynamic_pointer_cast<IRoadPosition>(shared_from_this());
                else if (classifier == typeid(IRoadPositionWriter).name())
                    return std::dynamic_pointer_cast<IRoadPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__S)
                {
                    return GetS();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__T)
                {
                    return GetT();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RoadPosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRoadId(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROAD_ID, parameterName, nullTextMarker /*no textmarker*/);
                _roadId = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__S, parameterName, nullTextMarker /*no textmarker*/);
                _s = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToT(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__T, parameterName, nullTextMarker /*no textmarker*/);
                _t = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoadId() const override
            {
                auto roadId = OSC_CONSTANTS::ATTRIBUTE__ROAD_ID;
                return GetParameterNameFromAttribute(roadId);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override
            {
                auto s = OSC_CONSTANTS::ATTRIBUTE__S;
                return GetParameterNameFromAttribute(s);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromT() const override
            {
                auto t = OSC_CONSTANTS::ATTRIBUTE__T;
                return GetParameterNameFromAttribute(t);
            }

            OPENSCENARIOLIB_EXP bool IsRoadIdParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ROAD_ID);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__S);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__T);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoute. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoute)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteImpl: public BaseImpl, public IRouteWriter, public std::enable_shared_from_this<RouteImpl> 
        {
        private:
            bool _closed {};
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::vector<std::shared_ptr<IWaypointWriter>> _waypoints {};
        public:

            OPENSCENARIOLIB_EXP RouteImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetClosed() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IWaypoint>> GetWaypoints() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IWaypointWriter>> GetWriterWaypoints() const override
            {
                return _waypoints;
            }

            OPENSCENARIOLIB_EXP int GetWaypointsSize() const override
            {
                return static_cast<int>(_waypoints.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IWaypoint> GetWaypointsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _waypoints.size() > index)
                {
                    return _waypoints[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetClosed(const bool closed) override
            {
                _closed = closed;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOSED);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetWaypoints(std::vector<std::shared_ptr<IWaypointWriter>>& waypoints) override
            {
                _waypoints = waypoints;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RouteImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoute).name())
                    return std::dynamic_pointer_cast<IRoute>(shared_from_this());
                else if (classifier == typeid(IRouteWriter).name())
                    return std::dynamic_pointer_cast<IRouteWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CLOSED)
                {
                    return GetClosed();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Route";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToClosed(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOSED, parameterName, nullTextMarker /*no textmarker*/);
                _closed = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromClosed() const override
            {
                auto closed = OSC_CONSTANTS::ATTRIBUTE__CLOSED;
                return GetParameterNameFromAttribute(closed);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsClosedParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CLOSED);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRouteCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRouteCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteCatalogLocationImpl: public BaseImpl, public IRouteCatalogLocationWriter, public std::enable_shared_from_this<RouteCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP RouteCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RouteCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRouteCatalogLocation).name())
                    return std::dynamic_pointer_cast<IRouteCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IRouteCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IRouteCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RouteCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoutePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoutePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoutePositionImpl: public BaseImpl, public IRoutePositionWriter, public std::enable_shared_from_this<RoutePositionImpl> 
        {
        private:
            std::shared_ptr<IRouteRefWriter> _routeRef {};
            std::shared_ptr<IOrientationWriter> _orientation {};
            std::shared_ptr<IInRoutePositionWriter> _inRoutePosition {};
        public:

            OPENSCENARIOLIB_EXP RoutePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteRef> GetRouteRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInRoutePosition> GetInRoutePosition() const override;


            OPENSCENARIOLIB_EXP void SetRouteRef(std::shared_ptr<IRouteRefWriter> routeRef) override
            {
                _routeRef = routeRef;
            }

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override
            {
                _orientation = orientation;
            }

            OPENSCENARIOLIB_EXP void SetInRoutePosition(std::shared_ptr<IInRoutePositionWriter> inRoutePosition) override
            {
                _inRoutePosition = inRoutePosition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RoutePositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoutePosition).name())
                    return std::dynamic_pointer_cast<IRoutePosition>(shared_from_this());
                else if (classifier == typeid(IRoutePositionWriter).name())
                    return std::dynamic_pointer_cast<IRoutePositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RoutePosition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteRefWriter> GetWriterRouteRef() const override
            {
                return std::dynamic_pointer_cast<IRouteRefWriter>(_routeRef);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override
            {
                return std::dynamic_pointer_cast<IOrientationWriter>(_orientation);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IInRoutePositionWriter> GetWriterInRoutePosition() const override
            {
                return std::dynamic_pointer_cast<IInRoutePositionWriter>(_inRoutePosition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRouteRef. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRouteRef)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteRefImpl: public BaseImpl, public IRouteRefWriter, public std::enable_shared_from_this<RouteRefImpl> 
        {
        private:
            std::shared_ptr<IRouteWriter> _route {};
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
        public:

            OPENSCENARIOLIB_EXP RouteRefImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetRoute(std::shared_ptr<IRouteWriter> route) override
            {
                _route = route;
                _catalogReference = {};
            }

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override
            {
                _catalogReference = catalogReference;
                _route = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RouteRefImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRouteRef).name())
                    return std::dynamic_pointer_cast<IRouteRef>(shared_from_this());
                else if (classifier == typeid(IRouteRefWriter).name())
                    return std::dynamic_pointer_cast<IRouteRefWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RouteRef";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteWriter> GetWriterRoute() const override
            {
                return std::dynamic_pointer_cast<IRouteWriter>(_route);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override
            {
                return std::dynamic_pointer_cast<ICatalogReferenceWriter>(_catalogReference);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IRoutingAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoutingAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoutingActionImpl: public BaseImpl, public IRoutingActionWriter, public std::enable_shared_from_this<RoutingActionImpl> 
        {
        private:
            std::shared_ptr<IAssignRouteActionWriter> _assignRouteAction {};
            std::shared_ptr<IFollowTrajectoryActionWriter> _followTrajectoryAction {};
            std::shared_ptr<IAcquirePositionActionWriter> _acquirePositionAction {};
        public:

            OPENSCENARIOLIB_EXP RoutingActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignRouteAction> GetAssignRouteAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFollowTrajectoryAction> GetFollowTrajectoryAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAcquirePositionAction> GetAcquirePositionAction() const override;


            OPENSCENARIOLIB_EXP void SetAssignRouteAction(std::shared_ptr<IAssignRouteActionWriter> assignRouteAction) override
            {
                _assignRouteAction = assignRouteAction;
                _followTrajectoryAction = {};
                _acquirePositionAction = {};
            }

            OPENSCENARIOLIB_EXP void SetFollowTrajectoryAction(std::shared_ptr<IFollowTrajectoryActionWriter> followTrajectoryAction) override
            {
                _followTrajectoryAction = followTrajectoryAction;
                _assignRouteAction = {};
                _acquirePositionAction = {};
            }

            OPENSCENARIOLIB_EXP void SetAcquirePositionAction(std::shared_ptr<IAcquirePositionActionWriter> acquirePositionAction) override
            {
                _acquirePositionAction = acquirePositionAction;
                _assignRouteAction = {};
                _followTrajectoryAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(RoutingActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IRoutingAction).name())
                    return std::dynamic_pointer_cast<IRoutingAction>(shared_from_this());
                else if (classifier == typeid(IRoutingActionWriter).name())
                    return std::dynamic_pointer_cast<IRoutingActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "RoutingAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignRouteActionWriter> GetWriterAssignRouteAction() const override
            {
                return std::dynamic_pointer_cast<IAssignRouteActionWriter>(_assignRouteAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IFollowTrajectoryActionWriter> GetWriterFollowTrajectoryAction() const override
            {
                return std::dynamic_pointer_cast<IFollowTrajectoryActionWriter>(_followTrajectoryAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAcquirePositionActionWriter> GetWriterAcquirePositionAction() const override
            {
                return std::dynamic_pointer_cast<IAcquirePositionActionWriter>(_acquirePositionAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IScenarioDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IScenarioDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ScenarioDefinitionImpl: public BaseImpl, public IScenarioDefinitionWriter, public std::enable_shared_from_this<ScenarioDefinitionImpl> 
        {
        private:
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<ICatalogLocationsWriter> _catalogLocations {};
            std::shared_ptr<IRoadNetworkWriter> _roadNetwork {};
            std::shared_ptr<IEntitiesWriter> _entities {};
            std::shared_ptr<IStoryboardWriter> _storyboard {};
        public:

            OPENSCENARIOLIB_EXP ScenarioDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogLocations> GetCatalogLocations() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadNetwork> GetRoadNetwork() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntities> GetEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboard> GetStoryboard() const override;


            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetCatalogLocations(std::shared_ptr<ICatalogLocationsWriter> catalogLocations) override
            {
                _catalogLocations = catalogLocations;
            }

            OPENSCENARIOLIB_EXP void SetRoadNetwork(std::shared_ptr<IRoadNetworkWriter> roadNetwork) override
            {
                _roadNetwork = roadNetwork;
            }

            OPENSCENARIOLIB_EXP void SetEntities(std::shared_ptr<IEntitiesWriter> entities) override
            {
                _entities = entities;
            }

            OPENSCENARIOLIB_EXP void SetStoryboard(std::shared_ptr<IStoryboardWriter> storyboard) override
            {
                _storyboard = storyboard;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ScenarioDefinitionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IScenarioDefinition).name())
                    return std::dynamic_pointer_cast<IScenarioDefinition>(shared_from_this());
                else if (classifier == typeid(IScenarioDefinitionWriter).name())
                    return std::dynamic_pointer_cast<IScenarioDefinitionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ScenarioDefinition";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogLocationsWriter> GetWriterCatalogLocations() const override
            {
                return std::dynamic_pointer_cast<ICatalogLocationsWriter>(_catalogLocations);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadNetworkWriter> GetWriterRoadNetwork() const override
            {
                return std::dynamic_pointer_cast<IRoadNetworkWriter>(_roadNetwork);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntitiesWriter> GetWriterEntities() const override
            {
                return std::dynamic_pointer_cast<IEntitiesWriter>(_entities);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardWriter> GetWriterStoryboard() const override
            {
                return std::dynamic_pointer_cast<IStoryboardWriter>(_storyboard);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IScenarioObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IScenarioObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ScenarioObjectImpl: public BaseImpl, public IScenarioObjectWriter, public std::enable_shared_from_this<ScenarioObjectImpl> 
        {
        private:
            std::string _name {};
            std::shared_ptr<IEntityObjectWriter> _entityObject {};
            std::shared_ptr<IObjectControllerWriter> _objectController {};
        public:

            OPENSCENARIOLIB_EXP ScenarioObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObject> GetEntityObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectController> GetObjectController() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetEntityObject(std::shared_ptr<IEntityObjectWriter> entityObject) override
            {
                _entityObject = entityObject;
            }

            OPENSCENARIOLIB_EXP void SetObjectController(std::shared_ptr<IObjectControllerWriter> objectController) override
            {
                _objectController = objectController;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ScenarioObjectImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IScenarioObject).name())
                    return std::dynamic_pointer_cast<IScenarioObject>(shared_from_this());
                else if (classifier == typeid(IScenarioObjectWriter).name())
                    return std::dynamic_pointer_cast<IScenarioObjectWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "ScenarioObject";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObjectWriter> GetWriterEntityObject() const override
            {
                return std::dynamic_pointer_cast<IEntityObjectWriter>(_entityObject);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectControllerWriter> GetWriterObjectController() const override
            {
                return std::dynamic_pointer_cast<IObjectControllerWriter>(_objectController);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISelectedEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISelectedEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SelectedEntitiesImpl: public BaseImpl, public ISelectedEntitiesWriter, public std::enable_shared_from_this<SelectedEntitiesImpl> 
        {
        private:
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRef {};
            std::vector<std::shared_ptr<IByTypeWriter>> _byType {};
        public:

            OPENSCENARIOLIB_EXP SelectedEntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRef() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRef() const override
            {
                return _entityRef;
            }

            OPENSCENARIOLIB_EXP int GetEntityRefSize() const override
            {
                return static_cast<int>(_entityRef.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _entityRef.size() > index)
                {
                    return _entityRef[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IByType>> GetByType() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IByTypeWriter>> GetWriterByType() const override
            {
                return _byType;
            }

            OPENSCENARIOLIB_EXP int GetByTypeSize() const override
            {
                return static_cast<int>(_byType.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IByType> GetByTypeAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _byType.size() > index)
                {
                    return _byType[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetEntityRef(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRef) override
            {
                _entityRef = entityRef;
                _byType = {};
            }

            OPENSCENARIOLIB_EXP void SetByType(std::vector<std::shared_ptr<IByTypeWriter>>& byType) override
            {
                _byType = byType;
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SelectedEntitiesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISelectedEntities).name())
                    return std::dynamic_pointer_cast<ISelectedEntities>(shared_from_this());
                else if (classifier == typeid(ISelectedEntitiesWriter).name())
                    return std::dynamic_pointer_cast<ISelectedEntitiesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SelectedEntities";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IShape. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IShape)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ShapeImpl: public BaseImpl, public IShapeWriter, public std::enable_shared_from_this<ShapeImpl> 
        {
        private:
            std::shared_ptr<IPolylineWriter> _polyline {};
            std::shared_ptr<IClothoidWriter> _clothoid {};
            std::shared_ptr<INurbsWriter> _nurbs {};
        public:

            OPENSCENARIOLIB_EXP ShapeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPolyline> GetPolyline() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoid> GetClothoid() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INurbs> GetNurbs() const override;


            OPENSCENARIOLIB_EXP void SetPolyline(std::shared_ptr<IPolylineWriter> polyline) override
            {
                _polyline = polyline;
                _clothoid = {};
                _nurbs = {};
            }

            OPENSCENARIOLIB_EXP void SetClothoid(std::shared_ptr<IClothoidWriter> clothoid) override
            {
                _clothoid = clothoid;
                _polyline = {};
                _nurbs = {};
            }

            OPENSCENARIOLIB_EXP void SetNurbs(std::shared_ptr<INurbsWriter> nurbs) override
            {
                _nurbs = nurbs;
                _polyline = {};
                _clothoid = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(ShapeImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IShape).name())
                    return std::dynamic_pointer_cast<IShape>(shared_from_this());
                else if (classifier == typeid(IShapeWriter).name())
                    return std::dynamic_pointer_cast<IShapeWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Shape";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPolylineWriter> GetWriterPolyline() const override
            {
                return std::dynamic_pointer_cast<IPolylineWriter>(_polyline);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoidWriter> GetWriterClothoid() const override
            {
                return std::dynamic_pointer_cast<IClothoidWriter>(_clothoid);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<INurbsWriter> GetWriterNurbs() const override
            {
                return std::dynamic_pointer_cast<INurbsWriter>(_nurbs);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISimulationTimeCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISimulationTimeCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SimulationTimeConditionImpl: public BaseImpl, public ISimulationTimeConditionWriter, public std::enable_shared_from_this<SimulationTimeConditionImpl> 
        {
        private:
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP SimulationTimeConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SimulationTimeConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISimulationTimeCondition).name())
                    return std::dynamic_pointer_cast<ISimulationTimeCondition>(shared_from_this());
                else if (classifier == typeid(ISimulationTimeConditionWriter).name())
                    return std::dynamic_pointer_cast<ISimulationTimeConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SimulationTimeCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISpeedAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedActionImpl: public BaseImpl, public ISpeedActionWriter, public std::enable_shared_from_this<SpeedActionImpl> 
        {
        private:
            std::shared_ptr<ITransitionDynamicsWriter> _speedActionDynamics {};
            std::shared_ptr<ISpeedActionTargetWriter> _speedActionTarget {};
        public:

            OPENSCENARIOLIB_EXP SpeedActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamics> GetSpeedActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionTarget> GetSpeedActionTarget() const override;


            OPENSCENARIOLIB_EXP void SetSpeedActionDynamics(std::shared_ptr<ITransitionDynamicsWriter> speedActionDynamics) override
            {
                _speedActionDynamics = speedActionDynamics;
            }

            OPENSCENARIOLIB_EXP void SetSpeedActionTarget(std::shared_ptr<ISpeedActionTargetWriter> speedActionTarget) override
            {
                _speedActionTarget = speedActionTarget;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SpeedActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISpeedAction).name())
                    return std::dynamic_pointer_cast<ISpeedAction>(shared_from_this());
                else if (classifier == typeid(ISpeedActionWriter).name())
                    return std::dynamic_pointer_cast<ISpeedActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SpeedAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamicsWriter> GetWriterSpeedActionDynamics() const override
            {
                return std::dynamic_pointer_cast<ITransitionDynamicsWriter>(_speedActionDynamics);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionTargetWriter> GetWriterSpeedActionTarget() const override
            {
                return std::dynamic_pointer_cast<ISpeedActionTargetWriter>(_speedActionTarget);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISpeedActionTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedActionTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedActionTargetImpl: public BaseImpl, public ISpeedActionTargetWriter, public std::enable_shared_from_this<SpeedActionTargetImpl> 
        {
        private:
            std::shared_ptr<IRelativeTargetSpeedWriter> _relativeTargetSpeed {};
            std::shared_ptr<IAbsoluteTargetSpeedWriter> _absoluteTargetSpeed {};
        public:

            OPENSCENARIOLIB_EXP SpeedActionTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetSpeed> GetRelativeTargetSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetSpeed> GetAbsoluteTargetSpeed() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetSpeed(std::shared_ptr<IRelativeTargetSpeedWriter> relativeTargetSpeed) override
            {
                _relativeTargetSpeed = relativeTargetSpeed;
                _absoluteTargetSpeed = {};
            }

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetSpeed(std::shared_ptr<IAbsoluteTargetSpeedWriter> absoluteTargetSpeed) override
            {
                _absoluteTargetSpeed = absoluteTargetSpeed;
                _relativeTargetSpeed = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SpeedActionTargetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISpeedActionTarget).name())
                    return std::dynamic_pointer_cast<ISpeedActionTarget>(shared_from_this());
                else if (classifier == typeid(ISpeedActionTargetWriter).name())
                    return std::dynamic_pointer_cast<ISpeedActionTargetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SpeedActionTarget";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetSpeedWriter> GetWriterRelativeTargetSpeed() const override
            {
                return std::dynamic_pointer_cast<IRelativeTargetSpeedWriter>(_relativeTargetSpeed);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetSpeedWriter> GetWriterAbsoluteTargetSpeed() const override
            {
                return std::dynamic_pointer_cast<IAbsoluteTargetSpeedWriter>(_absoluteTargetSpeed);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISpeedCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedConditionImpl: public BaseImpl, public ISpeedConditionWriter, public std::enable_shared_from_this<SpeedConditionImpl> 
        {
        private:
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP SpeedConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SpeedConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISpeedCondition).name())
                    return std::dynamic_pointer_cast<ISpeedCondition>(shared_from_this());
                else if (classifier == typeid(ISpeedConditionWriter).name())
                    return std::dynamic_pointer_cast<ISpeedConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SpeedCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IStandStillCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStandStillCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StandStillConditionImpl: public BaseImpl, public IStandStillConditionWriter, public std::enable_shared_from_this<StandStillConditionImpl> 
        {
        private:
            double _duration {};
        public:

            OPENSCENARIOLIB_EXP StandStillConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override
            {
                _duration = duration;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(StandStillConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IStandStillCondition).name())
                    return std::dynamic_pointer_cast<IStandStillCondition>(shared_from_this());
                else if (classifier == typeid(IStandStillConditionWriter).name())
                    return std::dynamic_pointer_cast<IStandStillConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DURATION)
                {
                    return GetDuration();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "StandStillCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DURATION, parameterName, nullTextMarker /*no textmarker*/);
                _duration = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override
            {
                auto duration = OSC_CONSTANTS::ATTRIBUTE__DURATION;
                return GetParameterNameFromAttribute(duration);
            }

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DURATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IStory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryImpl: public BaseImpl, public IStoryWriter, public std::enable_shared_from_this<StoryImpl> 
        {
        private:
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::vector<std::shared_ptr<IActWriter>> _acts {};
        public:

            OPENSCENARIOLIB_EXP StoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAct>> GetActs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IActWriter>> GetWriterActs() const override
            {
                return _acts;
            }

            OPENSCENARIOLIB_EXP int GetActsSize() const override
            {
                return static_cast<int>(_acts.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IAct> GetActsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _acts.size() > index)
                {
                    return _acts[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetActs(std::vector<std::shared_ptr<IActWriter>>& acts) override
            {
                _acts = acts;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(StoryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IStory).name())
                    return std::dynamic_pointer_cast<IStory>(shared_from_this());
                else if (classifier == typeid(IStoryWriter).name())
                    return std::dynamic_pointer_cast<IStoryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Story";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IStoryboard. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStoryboard)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryboardImpl: public BaseImpl, public IStoryboardWriter, public std::enable_shared_from_this<StoryboardImpl> 
        {
        private:
            std::shared_ptr<IInitWriter> _init {};
            std::vector<std::shared_ptr<IStoryWriter>> _stories {};
            std::shared_ptr<ITriggerWriter> _stopTrigger {};
        public:

            OPENSCENARIOLIB_EXP StoryboardImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IInit> GetInit() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStory>> GetStories() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStoryWriter>> GetWriterStories() const override
            {
                return _stories;
            }

            OPENSCENARIOLIB_EXP int GetStoriesSize() const override
            {
                return static_cast<int>(_stories.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IStory> GetStoriesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _stories.size() > index)
                {
                    return _stories[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStopTrigger() const override;


            OPENSCENARIOLIB_EXP void SetInit(std::shared_ptr<IInitWriter> init) override
            {
                _init = init;
            }

            OPENSCENARIOLIB_EXP void SetStories(std::vector<std::shared_ptr<IStoryWriter>>& stories) override
            {
                _stories = stories;
            }

            OPENSCENARIOLIB_EXP void SetStopTrigger(std::shared_ptr<ITriggerWriter> stopTrigger) override
            {
                _stopTrigger = stopTrigger;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(StoryboardImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IStoryboard).name())
                    return std::dynamic_pointer_cast<IStoryboard>(shared_from_this());
                else if (classifier == typeid(IStoryboardWriter).name())
                    return std::dynamic_pointer_cast<IStoryboardWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Storyboard";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IInitWriter> GetWriterInit() const override
            {
                return std::dynamic_pointer_cast<IInitWriter>(_init);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStopTrigger() const override
            {
                return std::dynamic_pointer_cast<ITriggerWriter>(_stopTrigger);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IStoryboardElementStateCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStoryboardElementStateCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryboardElementStateConditionImpl: public BaseImpl, public IStoryboardElementStateConditionWriter, public std::enable_shared_from_this<StoryboardElementStateConditionImpl> 
        {
        private:
            StoryboardElementState _state {};
            std::shared_ptr<INamedReference<IStoryboardElement>> _storyboardElementRef {};
            StoryboardElementType _storyboardElementType {};
        public:

            OPENSCENARIOLIB_EXP StoryboardElementStateConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP StoryboardElementState GetState() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IStoryboardElement>> GetStoryboardElementRef() const override;
            OPENSCENARIOLIB_EXP StoryboardElementType GetStoryboardElementType() const override;


            OPENSCENARIOLIB_EXP void SetState(const StoryboardElementState state) override
            {
                _state = state;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE);
            }

            OPENSCENARIOLIB_EXP void SetStoryboardElementRef(std::shared_ptr<INamedReference<IStoryboardElement>> storyboardElementRef) override
            {
                _storyboardElementRef = storyboardElementRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_REF);
            }

            OPENSCENARIOLIB_EXP void SetStoryboardElementType(const StoryboardElementType storyboardElementType) override
            {
                _storyboardElementType = storyboardElementType;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_TYPE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(StoryboardElementStateConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IStoryboardElementStateCondition).name())
                    return std::dynamic_pointer_cast<IStoryboardElementStateCondition>(shared_from_this());
                else if (classifier == typeid(IStoryboardElementStateConditionWriter).name())
                    return std::dynamic_pointer_cast<IStoryboardElementStateConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "StoryboardElementStateCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE, parameterName, nullTextMarker /*no textmarker*/);
                _state = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToStoryboardElementRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_REF, parameterName, nullTextMarker /*no textmarker*/);
                _storyboardElementRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToStoryboardElementType(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_TYPE, parameterName, nullTextMarker /*no textmarker*/);
                _storyboardElementType = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override
            {
                auto state = OSC_CONSTANTS::ATTRIBUTE__STATE;
                return GetParameterNameFromAttribute(state);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromStoryboardElementRef() const override
            {
                auto storyboardElementRef = OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_REF;
                return GetParameterNameFromAttribute(storyboardElementRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromStoryboardElementType() const override
            {
                auto storyboardElementType = OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_TYPE;
                return GetParameterNameFromAttribute(storyboardElementType);
            }

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStoryboardElementRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStoryboardElementTypeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STORYBOARD_ELEMENT_TYPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISun. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISun)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SunImpl: public BaseImpl, public ISunWriter, public std::enable_shared_from_this<SunImpl> 
        {
        private:
            double _azimuth {};
            double _elevation {};
            double _intensity {};
        public:

            OPENSCENARIOLIB_EXP SunImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetAzimuth() const override;
            OPENSCENARIOLIB_EXP double GetElevation() const override;
            OPENSCENARIOLIB_EXP double GetIntensity() const override;


            OPENSCENARIOLIB_EXP void SetAzimuth(const double azimuth) override
            {
                _azimuth = azimuth;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__AZIMUTH);
            }

            OPENSCENARIOLIB_EXP void SetElevation(const double elevation) override
            {
                _elevation = elevation;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ELEVATION);
            }

            OPENSCENARIOLIB_EXP void SetIntensity(const double intensity) override
            {
                _intensity = intensity;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INTENSITY);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SunImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISun).name())
                    return std::dynamic_pointer_cast<ISun>(shared_from_this());
                else if (classifier == typeid(ISunWriter).name())
                    return std::dynamic_pointer_cast<ISunWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__AZIMUTH)
                {
                    return GetAzimuth();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__ELEVATION)
                {
                    return GetElevation();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__INTENSITY)
                {
                    return GetIntensity();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Sun";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAzimuth(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__AZIMUTH, parameterName, nullTextMarker /*no textmarker*/);
                _azimuth = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToElevation(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ELEVATION, parameterName, nullTextMarker /*no textmarker*/);
                _elevation = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToIntensity(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INTENSITY, parameterName, nullTextMarker /*no textmarker*/);
                _intensity = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAzimuth() const override
            {
                auto azimuth = OSC_CONSTANTS::ATTRIBUTE__AZIMUTH;
                return GetParameterNameFromAttribute(azimuth);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromElevation() const override
            {
                auto elevation = OSC_CONSTANTS::ATTRIBUTE__ELEVATION;
                return GetParameterNameFromAttribute(elevation);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromIntensity() const override
            {
                auto intensity = OSC_CONSTANTS::ATTRIBUTE__INTENSITY;
                return GetParameterNameFromAttribute(intensity);
            }

            OPENSCENARIOLIB_EXP bool IsAzimuthParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__AZIMUTH);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsElevationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ELEVATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsIntensityParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__INTENSITY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ISynchronizeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISynchronizeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SynchronizeActionImpl: public BaseImpl, public ISynchronizeActionWriter, public std::enable_shared_from_this<SynchronizeActionImpl> 
        {
        private:
            std::shared_ptr<INamedReference<IEntity>> _masterEntityRef {};
            std::shared_ptr<IPositionWriter> _targetPositionMaster {};
            std::shared_ptr<IPositionWriter> _targetPosition {};
            std::shared_ptr<IFinalSpeedWriter> _finalSpeed {};
        public:

            OPENSCENARIOLIB_EXP SynchronizeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetMasterEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetTargetPositionMaster() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetTargetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFinalSpeed> GetFinalSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMasterEntityRef(std::shared_ptr<INamedReference<IEntity>> masterEntityRef) override
            {
                _masterEntityRef = masterEntityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASTER_ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetTargetPositionMaster(std::shared_ptr<IPositionWriter> targetPositionMaster) override
            {
                _targetPositionMaster = targetPositionMaster;
            }

            OPENSCENARIOLIB_EXP void SetTargetPosition(std::shared_ptr<IPositionWriter> targetPosition) override
            {
                _targetPosition = targetPosition;
            }

            OPENSCENARIOLIB_EXP void SetFinalSpeed(std::shared_ptr<IFinalSpeedWriter> finalSpeed) override
            {
                _finalSpeed = finalSpeed;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(SynchronizeActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ISynchronizeAction).name())
                    return std::dynamic_pointer_cast<ISynchronizeAction>(shared_from_this());
                else if (classifier == typeid(ISynchronizeActionWriter).name())
                    return std::dynamic_pointer_cast<ISynchronizeActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "SynchronizeAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToMasterEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__MASTER_ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _masterEntityRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromMasterEntityRef() const override
            {
                auto masterEntityRef = OSC_CONSTANTS::ATTRIBUTE__MASTER_ENTITY_REF;
                return GetParameterNameFromAttribute(masterEntityRef);
            }

            OPENSCENARIOLIB_EXP bool IsMasterEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__MASTER_ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterTargetPositionMaster() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_targetPositionMaster);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterTargetPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_targetPosition);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IFinalSpeedWriter> GetWriterFinalSpeed() const override
            {
                return std::dynamic_pointer_cast<IFinalSpeedWriter>(_finalSpeed);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITeleportAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITeleportAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TeleportActionImpl: public BaseImpl, public ITeleportActionWriter, public std::enable_shared_from_this<TeleportActionImpl> 
        {
        private:
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP TeleportActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TeleportActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITeleportAction).name())
                    return std::dynamic_pointer_cast<ITeleportAction>(shared_from_this());
                else if (classifier == typeid(ITeleportActionWriter).name())
                    return std::dynamic_pointer_cast<ITeleportActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TeleportAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeHeadwayCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeHeadwayCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeHeadwayConditionImpl: public BaseImpl, public ITimeHeadwayConditionWriter, public std::enable_shared_from_this<TimeHeadwayConditionImpl> 
        {
        private:
            bool _alongRoute {};
            std::shared_ptr<INamedReference<IEntity>> _entityRef {};
            bool _freespace {};
            Rule _rule {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP TimeHeadwayConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override
            {
                _alongRoute = alongRoute;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override
            {
                _entityRef = entityRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeHeadwayConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeHeadwayCondition).name())
                    return std::dynamic_pointer_cast<ITimeHeadwayCondition>(shared_from_this());
                else if (classifier == typeid(ITimeHeadwayConditionWriter).name())
                    return std::dynamic_pointer_cast<ITimeHeadwayConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE)
                {
                    return GetAlongRoute();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeHeadwayCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE, parameterName, nullTextMarker /*no textmarker*/);
                _alongRoute = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF, parameterName, nullTextMarker /*no textmarker*/);
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override
            {
                auto alongRoute = OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE;
                return GetParameterNameFromAttribute(alongRoute);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override
            {
                auto entityRef = OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF;
                return GetParameterNameFromAttribute(entityRef);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ENTITY_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeOfDay. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeOfDay)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeOfDayImpl: public BaseImpl, public ITimeOfDayWriter, public std::enable_shared_from_this<TimeOfDayImpl> 
        {
        private:
            bool _animation {};
            DateTime _dateTime {};
        public:

            OPENSCENARIOLIB_EXP TimeOfDayImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetAnimation() const override;
            OPENSCENARIOLIB_EXP DateTime GetDateTime() const override;


            OPENSCENARIOLIB_EXP void SetAnimation(const bool animation) override
            {
                _animation = animation;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ANIMATION);
            }

            OPENSCENARIOLIB_EXP void SetDateTime(const DateTime dateTime) override
            {
                _dateTime = dateTime;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE_TIME);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeOfDayImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeOfDay).name())
                    return std::dynamic_pointer_cast<ITimeOfDay>(shared_from_this());
                else if (classifier == typeid(ITimeOfDayWriter).name())
                    return std::dynamic_pointer_cast<ITimeOfDayWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ANIMATION)
                {
                    return GetAnimation();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DATE_TIME)
                {
                    return GetDateTime();
                }
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeOfDay";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAnimation(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ANIMATION, parameterName, nullTextMarker /*no textmarker*/);
                _animation = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDateTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE_TIME, parameterName, nullTextMarker /*no textmarker*/);
                _dateTime = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAnimation() const override
            {
                auto animation = OSC_CONSTANTS::ATTRIBUTE__ANIMATION;
                return GetParameterNameFromAttribute(animation);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDateTime() const override
            {
                auto dateTime = OSC_CONSTANTS::ATTRIBUTE__DATE_TIME;
                return GetParameterNameFromAttribute(dateTime);
            }

            OPENSCENARIOLIB_EXP bool IsAnimationParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ANIMATION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDateTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DATE_TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeOfDayCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeOfDayCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeOfDayConditionImpl: public BaseImpl, public ITimeOfDayConditionWriter, public std::enable_shared_from_this<TimeOfDayConditionImpl> 
        {
        private:
            DateTime _dateTime {};
            Rule _rule {};
        public:

            OPENSCENARIOLIB_EXP TimeOfDayConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP DateTime GetDateTime() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;


            OPENSCENARIOLIB_EXP void SetDateTime(const DateTime dateTime) override
            {
                _dateTime = dateTime;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE_TIME);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeOfDayConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeOfDayCondition).name())
                    return std::dynamic_pointer_cast<ITimeOfDayCondition>(shared_from_this());
                else if (classifier == typeid(ITimeOfDayConditionWriter).name())
                    return std::dynamic_pointer_cast<ITimeOfDayConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DATE_TIME)
                {
                    return GetDateTime();
                }
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeOfDayCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDateTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DATE_TIME, parameterName, nullTextMarker /*no textmarker*/);
                _dateTime = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDateTime() const override
            {
                auto dateTime = OSC_CONSTANTS::ATTRIBUTE__DATE_TIME;
                return GetParameterNameFromAttribute(dateTime);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP bool IsDateTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DATE_TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeReferenceImpl: public BaseImpl, public ITimeReferenceWriter, public std::enable_shared_from_this<TimeReferenceImpl> 
        {
        private:
            std::shared_ptr<INoneWriter> _none {};
            std::shared_ptr<ITimingWriter> _timing {};
        public:

            OPENSCENARIOLIB_EXP TimeReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<INone> GetNone() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITiming> GetTiming() const override;


            OPENSCENARIOLIB_EXP void SetNone(std::shared_ptr<INoneWriter> none) override
            {
                _none = none;
                _timing = {};
            }

            OPENSCENARIOLIB_EXP void SetTiming(std::shared_ptr<ITimingWriter> timing) override
            {
                _timing = timing;
                _none = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeReferenceImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeReference).name())
                    return std::dynamic_pointer_cast<ITimeReference>(shared_from_this());
                else if (classifier == typeid(ITimeReferenceWriter).name())
                    return std::dynamic_pointer_cast<ITimeReferenceWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeReference";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<INoneWriter> GetWriterNone() const override
            {
                return std::dynamic_pointer_cast<INoneWriter>(_none);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimingWriter> GetWriterTiming() const override
            {
                return std::dynamic_pointer_cast<ITimingWriter>(_timing);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeToCollisionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeToCollisionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeToCollisionConditionImpl: public BaseImpl, public ITimeToCollisionConditionWriter, public std::enable_shared_from_this<TimeToCollisionConditionImpl> 
        {
        private:
            bool _alongRoute {};
            bool _freespace {};
            Rule _rule {};
            double _value {};
            std::shared_ptr<ITimeToCollisionConditionTargetWriter> _timeToCollisionConditionTarget {};
        public:

            OPENSCENARIOLIB_EXP TimeToCollisionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionTarget> GetTimeToCollisionConditionTarget() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override
            {
                _alongRoute = alongRoute;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
            }

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override
            {
                _freespace = freespace;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void SetTimeToCollisionConditionTarget(std::shared_ptr<ITimeToCollisionConditionTargetWriter> timeToCollisionConditionTarget) override
            {
                _timeToCollisionConditionTarget = timeToCollisionConditionTarget;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeToCollisionConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeToCollisionCondition).name())
                    return std::dynamic_pointer_cast<ITimeToCollisionCondition>(shared_from_this());
                else if (classifier == typeid(ITimeToCollisionConditionWriter).name())
                    return std::dynamic_pointer_cast<ITimeToCollisionConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE)
                {
                    return GetAlongRoute();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__FREESPACE)
                {
                    return GetFreespace();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeToCollisionCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE, parameterName, nullTextMarker /*no textmarker*/);
                _alongRoute = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FREESPACE, parameterName, nullTextMarker /*no textmarker*/);
                _freespace = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override
            {
                auto alongRoute = OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE;
                return GetParameterNameFromAttribute(alongRoute);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override
            {
                auto freespace = OSC_CONSTANTS::ATTRIBUTE__FREESPACE;
                return GetParameterNameFromAttribute(freespace);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ALONG_ROUTE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FREESPACE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionTargetWriter> GetWriterTimeToCollisionConditionTarget() const override
            {
                return std::dynamic_pointer_cast<ITimeToCollisionConditionTargetWriter>(_timeToCollisionConditionTarget);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITimeToCollisionConditionTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeToCollisionConditionTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeToCollisionConditionTargetImpl: public BaseImpl, public ITimeToCollisionConditionTargetWriter, public std::enable_shared_from_this<TimeToCollisionConditionTargetImpl> 
        {
        private:
            std::shared_ptr<IPositionWriter> _position {};
            std::shared_ptr<IEntityRefWriter> _entityRef {};
        public:

            OPENSCENARIOLIB_EXP TimeToCollisionConditionTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
                _entityRef = {};
            }

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<IEntityRefWriter> entityRef) override
            {
                _entityRef = entityRef;
                _position = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimeToCollisionConditionTargetImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITimeToCollisionConditionTarget).name())
                    return std::dynamic_pointer_cast<ITimeToCollisionConditionTarget>(shared_from_this());
                else if (classifier == typeid(ITimeToCollisionConditionTargetWriter).name())
                    return std::dynamic_pointer_cast<ITimeToCollisionConditionTargetWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TimeToCollisionConditionTarget";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRefWriter> GetWriterEntityRef() const override
            {
                return std::dynamic_pointer_cast<IEntityRefWriter>(_entityRef);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITiming. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITiming)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimingImpl: public BaseImpl, public ITimingWriter, public std::enable_shared_from_this<TimingImpl> 
        {
        private:
            ReferenceContext _domainAbsoluteRelative {};
            double _offset {};
            double _scale {};
        public:

            OPENSCENARIOLIB_EXP TimingImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP ReferenceContext GetDomainAbsoluteRelative() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP double GetScale() const override;


            OPENSCENARIOLIB_EXP void SetDomainAbsoluteRelative(const ReferenceContext domainAbsoluteRelative) override
            {
                _domainAbsoluteRelative = domainAbsoluteRelative;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DOMAIN_ABSOLUTE_RELATIVE);
            }

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override
            {
                _offset = offset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetScale(const double scale) override
            {
                _scale = scale;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SCALE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TimingImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITiming).name())
                    return std::dynamic_pointer_cast<ITiming>(shared_from_this());
                else if (classifier == typeid(ITimingWriter).name())
                    return std::dynamic_pointer_cast<ITimingWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__OFFSET)
                {
                    return GetOffset();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__SCALE)
                {
                    return GetScale();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Timing";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDomainAbsoluteRelative(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DOMAIN_ABSOLUTE_RELATIVE, parameterName, nullTextMarker /*no textmarker*/);
                _domainAbsoluteRelative = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _offset = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToScale(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SCALE, parameterName, nullTextMarker /*no textmarker*/);
                _scale = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDomainAbsoluteRelative() const override
            {
                auto domainAbsoluteRelative = OSC_CONSTANTS::ATTRIBUTE__DOMAIN_ABSOLUTE_RELATIVE;
                return GetParameterNameFromAttribute(domainAbsoluteRelative);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override
            {
                auto offset = OSC_CONSTANTS::ATTRIBUTE__OFFSET;
                return GetParameterNameFromAttribute(offset);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromScale() const override
            {
                auto scale = OSC_CONSTANTS::ATTRIBUTE__SCALE;
                return GetParameterNameFromAttribute(scale);
            }

            OPENSCENARIOLIB_EXP bool IsDomainAbsoluteRelativeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DOMAIN_ABSOLUTE_RELATIVE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsScaleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SCALE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficActionImpl: public BaseImpl, public ITrafficActionWriter, public std::enable_shared_from_this<TrafficActionImpl> 
        {
        private:
            std::shared_ptr<ITrafficSourceActionWriter> _trafficSourceAction {};
            std::shared_ptr<ITrafficSinkActionWriter> _trafficSinkAction {};
            std::shared_ptr<ITrafficSwarmActionWriter> _trafficSwarmAction {};
        public:

            OPENSCENARIOLIB_EXP TrafficActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSourceAction> GetTrafficSourceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSinkAction> GetTrafficSinkAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSwarmAction> GetTrafficSwarmAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficSourceAction(std::shared_ptr<ITrafficSourceActionWriter> trafficSourceAction) override
            {
                _trafficSourceAction = trafficSourceAction;
                _trafficSinkAction = {};
                _trafficSwarmAction = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficSinkAction(std::shared_ptr<ITrafficSinkActionWriter> trafficSinkAction) override
            {
                _trafficSinkAction = trafficSinkAction;
                _trafficSourceAction = {};
                _trafficSwarmAction = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficSwarmAction(std::shared_ptr<ITrafficSwarmActionWriter> trafficSwarmAction) override
            {
                _trafficSwarmAction = trafficSwarmAction;
                _trafficSourceAction = {};
                _trafficSinkAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficAction).name())
                    return std::dynamic_pointer_cast<ITrafficAction>(shared_from_this());
                else if (classifier == typeid(ITrafficActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSourceActionWriter> GetWriterTrafficSourceAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSourceActionWriter>(_trafficSourceAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSinkActionWriter> GetWriterTrafficSinkAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSinkActionWriter>(_trafficSinkAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSwarmActionWriter> GetWriterTrafficSwarmAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSwarmActionWriter>(_trafficSwarmAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficDefinitionImpl: public BaseImpl, public ITrafficDefinitionWriter, public std::enable_shared_from_this<TrafficDefinitionImpl> 
        {
        private:
            std::string _name {};
            std::shared_ptr<IVehicleCategoryDistributionWriter> _vehicleCategoryDistribution {};
            std::shared_ptr<IControllerDistributionWriter> _controllerDistribution {};
        public:

            OPENSCENARIOLIB_EXP TrafficDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistribution> GetVehicleCategoryDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistribution> GetControllerDistribution() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetVehicleCategoryDistribution(std::shared_ptr<IVehicleCategoryDistributionWriter> vehicleCategoryDistribution) override
            {
                _vehicleCategoryDistribution = vehicleCategoryDistribution;
            }

            OPENSCENARIOLIB_EXP void SetControllerDistribution(std::shared_ptr<IControllerDistributionWriter> controllerDistribution) override
            {
                _controllerDistribution = controllerDistribution;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficDefinitionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficDefinition).name())
                    return std::dynamic_pointer_cast<ITrafficDefinition>(shared_from_this());
                else if (classifier == typeid(ITrafficDefinitionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficDefinitionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficDefinition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistributionWriter> GetWriterVehicleCategoryDistribution() const override
            {
                return std::dynamic_pointer_cast<IVehicleCategoryDistributionWriter>(_vehicleCategoryDistribution);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistributionWriter> GetWriterControllerDistribution() const override
            {
                return std::dynamic_pointer_cast<IControllerDistributionWriter>(_controllerDistribution);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalActionImpl: public BaseImpl, public ITrafficSignalActionWriter, public std::enable_shared_from_this<TrafficSignalActionImpl> 
        {
        private:
            std::shared_ptr<ITrafficSignalControllerActionWriter> _trafficSignalControllerAction {};
            std::shared_ptr<ITrafficSignalStateActionWriter> _trafficSignalStateAction {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerAction> GetTrafficSignalControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalStateAction> GetTrafficSignalStateAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerAction(std::shared_ptr<ITrafficSignalControllerActionWriter> trafficSignalControllerAction) override
            {
                _trafficSignalControllerAction = trafficSignalControllerAction;
                _trafficSignalStateAction = {};
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalStateAction(std::shared_ptr<ITrafficSignalStateActionWriter> trafficSignalStateAction) override
            {
                _trafficSignalStateAction = trafficSignalStateAction;
                _trafficSignalControllerAction = {};
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalAction).name())
                    return std::dynamic_pointer_cast<ITrafficSignalAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerActionWriter> GetWriterTrafficSignalControllerAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSignalControllerActionWriter>(_trafficSignalControllerAction);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalStateActionWriter> GetWriterTrafficSignalStateAction() const override
            {
                return std::dynamic_pointer_cast<ITrafficSignalStateActionWriter>(_trafficSignalStateAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalConditionImpl: public BaseImpl, public ITrafficSignalConditionWriter, public std::enable_shared_from_this<TrafficSignalConditionImpl> 
        {
        private:
            std::string _name {};
            std::string _state {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetState() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetState(const std::string state) override
            {
                _state = state;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalCondition).name())
                    return std::dynamic_pointer_cast<ITrafficSignalCondition>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalConditionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE, parameterName, nullTextMarker /*no textmarker*/);
                _state = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override
            {
                auto state = OSC_CONSTANTS::ATTRIBUTE__STATE;
                return GetParameterNameFromAttribute(state);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerImpl: public BaseImpl, public ITrafficSignalControllerWriter, public std::enable_shared_from_this<TrafficSignalControllerImpl> 
        {
        private:
            double _delay {};
            std::string _name {};
            std::string _reference {};
            std::vector<std::shared_ptr<IPhaseWriter>> _phases {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetDelay() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetReference() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhases() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhaseWriter>> GetWriterPhases() const override
            {
                return _phases;
            }

            OPENSCENARIOLIB_EXP int GetPhasesSize() const override
            {
                return static_cast<int>(_phases.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhasesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _phases.size() > index)
                {
                    return _phases[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetDelay(const double delay) override
            {
                _delay = delay;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DELAY);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetReference(const std::string reference) override
            {
                _reference = reference;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REFERENCE);
            }

            OPENSCENARIOLIB_EXP void SetPhases(std::vector<std::shared_ptr<IPhaseWriter>>& phases) override
            {
                _phases = phases;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalControllerImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalController).name())
                    return std::dynamic_pointer_cast<ITrafficSignalController>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalControllerWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalControllerWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__DELAY)
                {
                    return GetDelay();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalController";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDelay(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DELAY, parameterName, nullTextMarker /*no textmarker*/);
                _delay = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToReference(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__REFERENCE, parameterName, nullTextMarker /*no textmarker*/);
                _reference = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDelay() const override
            {
                auto delay = OSC_CONSTANTS::ATTRIBUTE__DELAY;
                return GetParameterNameFromAttribute(delay);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromReference() const override
            {
                auto reference = OSC_CONSTANTS::ATTRIBUTE__REFERENCE;
                return GetParameterNameFromAttribute(reference);
            }

            OPENSCENARIOLIB_EXP bool IsDelayParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DELAY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsReferenceParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__REFERENCE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerActionImpl: public BaseImpl, public ITrafficSignalControllerActionWriter, public std::enable_shared_from_this<TrafficSignalControllerActionImpl> 
        {
        private:
            std::string _phase {};
            std::shared_ptr<INamedReference<ITrafficSignalController>> _trafficSignalControllerRef {};
            std::vector<std::shared_ptr<IPhase>> _phaseRef {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetPhase() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<ITrafficSignalController>> GetTrafficSignalControllerRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhaseRef() const override;


            OPENSCENARIOLIB_EXP int GetPhaseRefSize() const override
            {
                return static_cast<int>(_phaseRef.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhaseRefAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _phaseRef.size() > index)
                {
                    return _phaseRef[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetPhase(const std::string phase) override
            {
                _phase = phase;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PHASE);
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerRef(std::shared_ptr<INamedReference<ITrafficSignalController>> trafficSignalControllerRef) override
            {
                _trafficSignalControllerRef = trafficSignalControllerRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF);
            }

            OPENSCENARIOLIB_EXP void SetPhaseRef(std::vector<std::shared_ptr<IPhase>>& phaseRef) override
            {
                _phaseRef = phaseRef;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalControllerActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalControllerAction).name())
                    return std::dynamic_pointer_cast<ITrafficSignalControllerAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalControllerActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalControllerActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalControllerAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPhase(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PHASE, parameterName, nullTextMarker /*no textmarker*/);
                _phase = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalControllerRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF, parameterName, nullTextMarker /*no textmarker*/);
                _trafficSignalControllerRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPhase() const override
            {
                auto phase = OSC_CONSTANTS::ATTRIBUTE__PHASE;
                return GetParameterNameFromAttribute(phase);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalControllerRef() const override
            {
                auto trafficSignalControllerRef = OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF;
                return GetParameterNameFromAttribute(trafficSignalControllerRef);
            }

            OPENSCENARIOLIB_EXP bool IsPhaseParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PHASE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTrafficSignalControllerRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalControllerCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalControllerCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerConditionImpl: public BaseImpl, public ITrafficSignalControllerConditionWriter, public std::enable_shared_from_this<TrafficSignalControllerConditionImpl> 
        {
        private:
            std::string _phase {};
            std::shared_ptr<INamedReference<ITrafficSignalController>> _trafficSignalControllerRef {};
            std::vector<std::shared_ptr<IPhase>> _phaseRef {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalControllerConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetPhase() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<ITrafficSignalController>> GetTrafficSignalControllerRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhaseRef() const override;


            OPENSCENARIOLIB_EXP int GetPhaseRefSize() const override
            {
                return static_cast<int>(_phaseRef.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhaseRefAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _phaseRef.size() > index)
                {
                    return _phaseRef[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetPhase(const std::string phase) override
            {
                _phase = phase;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PHASE);
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerRef(std::shared_ptr<INamedReference<ITrafficSignalController>> trafficSignalControllerRef) override
            {
                _trafficSignalControllerRef = trafficSignalControllerRef;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF);
            }

            OPENSCENARIOLIB_EXP void SetPhaseRef(std::vector<std::shared_ptr<IPhase>>& phaseRef) override
            {
                _phaseRef = phaseRef;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalControllerConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalControllerCondition).name())
                    return std::dynamic_pointer_cast<ITrafficSignalControllerCondition>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalControllerConditionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalControllerConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalControllerCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToPhase(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__PHASE, parameterName, nullTextMarker /*no textmarker*/);
                _phase = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalControllerRef(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF, parameterName, nullTextMarker /*no textmarker*/);
                _trafficSignalControllerRef = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromPhase() const override
            {
                auto phase = OSC_CONSTANTS::ATTRIBUTE__PHASE;
                return GetParameterNameFromAttribute(phase);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalControllerRef() const override
            {
                auto trafficSignalControllerRef = OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF;
                return GetParameterNameFromAttribute(trafficSignalControllerRef);
            }

            OPENSCENARIOLIB_EXP bool IsPhaseParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__PHASE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTrafficSignalControllerRefParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_CONTROLLER_REF);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalStateImpl: public BaseImpl, public ITrafficSignalStateWriter, public std::enable_shared_from_this<TrafficSignalStateImpl> 
        {
        private:
            std::string _state {};
            std::string _trafficSignalId {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetState() const override;
            OPENSCENARIOLIB_EXP std::string GetTrafficSignalId() const override;


            OPENSCENARIOLIB_EXP void SetState(const std::string state) override
            {
                _state = state;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE);
            }

            OPENSCENARIOLIB_EXP void SetTrafficSignalId(const std::string trafficSignalId) override
            {
                _trafficSignalId = trafficSignalId;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_ID);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalStateImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalState).name())
                    return std::dynamic_pointer_cast<ITrafficSignalState>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalStateWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalStateWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalState";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE, parameterName, nullTextMarker /*no textmarker*/);
                _state = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalId(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_ID, parameterName, nullTextMarker /*no textmarker*/);
                _trafficSignalId = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override
            {
                auto state = OSC_CONSTANTS::ATTRIBUTE__STATE;
                return GetParameterNameFromAttribute(state);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalId() const override
            {
                auto trafficSignalId = OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_ID;
                return GetParameterNameFromAttribute(trafficSignalId);
            }

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTrafficSignalIdParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRAFFIC_SIGNAL_ID);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSignalStateAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalStateAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalStateActionImpl: public BaseImpl, public ITrafficSignalStateActionWriter, public std::enable_shared_from_this<TrafficSignalStateActionImpl> 
        {
        private:
            std::string _name {};
            std::string _state {};
        public:

            OPENSCENARIOLIB_EXP TrafficSignalStateActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetState() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetState(const std::string state) override
            {
                _state = state;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSignalStateActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSignalStateAction).name())
                    return std::dynamic_pointer_cast<ITrafficSignalStateAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSignalStateActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSignalStateActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSignalStateAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__STATE, parameterName, nullTextMarker /*no textmarker*/);
                _state = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override
            {
                auto state = OSC_CONSTANTS::ATTRIBUTE__STATE;
                return GetParameterNameFromAttribute(state);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__STATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSinkAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSinkAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSinkActionImpl: public BaseImpl, public ITrafficSinkActionWriter, public std::enable_shared_from_this<TrafficSinkActionImpl> 
        {
        private:
            double _radius {};
            double _rate {};
            std::shared_ptr<IPositionWriter> _position {};
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};
        public:

            OPENSCENARIOLIB_EXP TrafficSinkActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetRadius() const override;
            OPENSCENARIOLIB_EXP double GetRate() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;


            OPENSCENARIOLIB_EXP void SetRadius(const double radius) override
            {
                _radius = radius;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RADIUS);
            }

            OPENSCENARIOLIB_EXP void SetRate(const double rate) override
            {
                _rate = rate;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RATE);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override
            {
                _trafficDefinition = trafficDefinition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSinkActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSinkAction).name())
                    return std::dynamic_pointer_cast<ITrafficSinkAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSinkActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSinkActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__RADIUS)
                {
                    return GetRadius();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__RATE)
                {
                    return GetRate();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSinkAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRadius(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RADIUS, parameterName, nullTextMarker /*no textmarker*/);
                _radius = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRate(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RATE, parameterName, nullTextMarker /*no textmarker*/);
                _rate = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRadius() const override
            {
                auto radius = OSC_CONSTANTS::ATTRIBUTE__RADIUS;
                return GetParameterNameFromAttribute(radius);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRate() const override
            {
                auto rate = OSC_CONSTANTS::ATTRIBUTE__RATE;
                return GetParameterNameFromAttribute(rate);
            }

            OPENSCENARIOLIB_EXP bool IsRadiusParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RADIUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override
            {
                return std::dynamic_pointer_cast<ITrafficDefinitionWriter>(_trafficDefinition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSourceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSourceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSourceActionImpl: public BaseImpl, public ITrafficSourceActionWriter, public std::enable_shared_from_this<TrafficSourceActionImpl> 
        {
        private:
            double _radius {};
            double _rate {};
            double _velocity {};
            std::shared_ptr<IPositionWriter> _position {};
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};
        public:

            OPENSCENARIOLIB_EXP TrafficSourceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetRadius() const override;
            OPENSCENARIOLIB_EXP double GetRate() const override;
            OPENSCENARIOLIB_EXP double GetVelocity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;


            OPENSCENARIOLIB_EXP void SetRadius(const double radius) override
            {
                _radius = radius;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RADIUS);
            }

            OPENSCENARIOLIB_EXP void SetRate(const double rate) override
            {
                _rate = rate;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RATE);
            }

            OPENSCENARIOLIB_EXP void SetVelocity(const double velocity) override
            {
                _velocity = velocity;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VELOCITY);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override
            {
                _trafficDefinition = trafficDefinition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSourceActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSourceAction).name())
                    return std::dynamic_pointer_cast<ITrafficSourceAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSourceActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSourceActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__RADIUS)
                {
                    return GetRadius();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__RATE)
                {
                    return GetRate();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__VELOCITY)
                {
                    return GetVelocity();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSourceAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRadius(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RADIUS, parameterName, nullTextMarker /*no textmarker*/);
                _radius = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRate(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RATE, parameterName, nullTextMarker /*no textmarker*/);
                _rate = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToVelocity(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VELOCITY, parameterName, nullTextMarker /*no textmarker*/);
                _velocity = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRadius() const override
            {
                auto radius = OSC_CONSTANTS::ATTRIBUTE__RADIUS;
                return GetParameterNameFromAttribute(radius);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRate() const override
            {
                auto rate = OSC_CONSTANTS::ATTRIBUTE__RATE;
                return GetParameterNameFromAttribute(rate);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromVelocity() const override
            {
                auto velocity = OSC_CONSTANTS::ATTRIBUTE__VELOCITY;
                return GetParameterNameFromAttribute(velocity);
            }

            OPENSCENARIOLIB_EXP bool IsRadiusParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RADIUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsVelocityParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VELOCITY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override
            {
                return std::dynamic_pointer_cast<ITrafficDefinitionWriter>(_trafficDefinition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrafficSwarmAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSwarmAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSwarmActionImpl: public BaseImpl, public ITrafficSwarmActionWriter, public std::enable_shared_from_this<TrafficSwarmActionImpl> 
        {
        private:
            double _innerRadius {};
            uint32_t _numberOfVehicles {};
            double _offset {};
            double _semiMajorAxis {};
            double _semiMinorAxis {};
            double _velocity {};
            std::shared_ptr<ICentralSwarmObjectWriter> _centralObject {};
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};
        public:

            OPENSCENARIOLIB_EXP TrafficSwarmActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetInnerRadius() const override;
            OPENSCENARIOLIB_EXP uint32_t GetNumberOfVehicles() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP double GetSemiMajorAxis() const override;
            OPENSCENARIOLIB_EXP double GetSemiMinorAxis() const override;
            OPENSCENARIOLIB_EXP double GetVelocity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICentralSwarmObject> GetCentralObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;


            OPENSCENARIOLIB_EXP void SetInnerRadius(const double innerRadius) override
            {
                _innerRadius = innerRadius;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INNER_RADIUS);
            }

            OPENSCENARIOLIB_EXP void SetNumberOfVehicles(const uint32_t numberOfVehicles) override
            {
                _numberOfVehicles = numberOfVehicles;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NUMBER_OF_VEHICLES);
            }

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override
            {
                _offset = offset;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET);
            }

            OPENSCENARIOLIB_EXP void SetSemiMajorAxis(const double semiMajorAxis) override
            {
                _semiMajorAxis = semiMajorAxis;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SEMI_MAJOR_AXIS);
            }

            OPENSCENARIOLIB_EXP void SetSemiMinorAxis(const double semiMinorAxis) override
            {
                _semiMinorAxis = semiMinorAxis;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SEMI_MINOR_AXIS);
            }

            OPENSCENARIOLIB_EXP void SetVelocity(const double velocity) override
            {
                _velocity = velocity;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VELOCITY);
            }

            OPENSCENARIOLIB_EXP void SetCentralObject(std::shared_ptr<ICentralSwarmObjectWriter> centralObject) override
            {
                _centralObject = centralObject;
            }

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override
            {
                _trafficDefinition = trafficDefinition;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrafficSwarmActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrafficSwarmAction).name())
                    return std::dynamic_pointer_cast<ITrafficSwarmAction>(shared_from_this());
                else if (classifier == typeid(ITrafficSwarmActionWriter).name())
                    return std::dynamic_pointer_cast<ITrafficSwarmActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__NUMBER_OF_VEHICLES)
                {
                    return GetNumberOfVehicles();
                }
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__INNER_RADIUS)
                {
                    return GetInnerRadius();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__OFFSET)
                {
                    return GetOffset();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__SEMI_MAJOR_AXIS)
                {
                    return GetSemiMajorAxis();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__SEMI_MINOR_AXIS)
                {
                    return GetSemiMinorAxis();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__VELOCITY)
                {
                    return GetVelocity();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrafficSwarmAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToInnerRadius(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__INNER_RADIUS, parameterName, nullTextMarker /*no textmarker*/);
                _innerRadius = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToNumberOfVehicles(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NUMBER_OF_VEHICLES, parameterName, nullTextMarker /*no textmarker*/);
                _numberOfVehicles = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__OFFSET, parameterName, nullTextMarker /*no textmarker*/);
                _offset = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSemiMajorAxis(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SEMI_MAJOR_AXIS, parameterName, nullTextMarker /*no textmarker*/);
                _semiMajorAxis = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSemiMinorAxis(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SEMI_MINOR_AXIS, parameterName, nullTextMarker /*no textmarker*/);
                _semiMinorAxis = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToVelocity(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VELOCITY, parameterName, nullTextMarker /*no textmarker*/);
                _velocity = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromInnerRadius() const override
            {
                auto innerRadius = OSC_CONSTANTS::ATTRIBUTE__INNER_RADIUS;
                return GetParameterNameFromAttribute(innerRadius);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumberOfVehicles() const override
            {
                auto numberOfVehicles = OSC_CONSTANTS::ATTRIBUTE__NUMBER_OF_VEHICLES;
                return GetParameterNameFromAttribute(numberOfVehicles);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override
            {
                auto offset = OSC_CONSTANTS::ATTRIBUTE__OFFSET;
                return GetParameterNameFromAttribute(offset);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSemiMajorAxis() const override
            {
                auto semiMajorAxis = OSC_CONSTANTS::ATTRIBUTE__SEMI_MAJOR_AXIS;
                return GetParameterNameFromAttribute(semiMajorAxis);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSemiMinorAxis() const override
            {
                auto semiMinorAxis = OSC_CONSTANTS::ATTRIBUTE__SEMI_MINOR_AXIS;
                return GetParameterNameFromAttribute(semiMinorAxis);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromVelocity() const override
            {
                auto velocity = OSC_CONSTANTS::ATTRIBUTE__VELOCITY;
                return GetParameterNameFromAttribute(velocity);
            }

            OPENSCENARIOLIB_EXP bool IsInnerRadiusParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__INNER_RADIUS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNumberOfVehiclesParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NUMBER_OF_VEHICLES);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__OFFSET);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSemiMajorAxisParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SEMI_MAJOR_AXIS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSemiMinorAxisParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SEMI_MINOR_AXIS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsVelocityParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VELOCITY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICentralSwarmObjectWriter> GetWriterCentralObject() const override
            {
                return std::dynamic_pointer_cast<ICentralSwarmObjectWriter>(_centralObject);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override
            {
                return std::dynamic_pointer_cast<ITrafficDefinitionWriter>(_trafficDefinition);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrajectory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryImpl: public BaseImpl, public ITrajectoryWriter, public std::enable_shared_from_this<TrajectoryImpl> 
        {
        private:
            bool _closed {};
            std::string _name {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<IShapeWriter> _shape {};
        public:

            OPENSCENARIOLIB_EXP TrajectoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetClosed() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IShape> GetShape() const override;


            OPENSCENARIOLIB_EXP void SetClosed(const bool closed) override
            {
                _closed = closed;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOSED);
            }

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetShape(std::shared_ptr<IShapeWriter> shape) override
            {
                _shape = shape;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrajectoryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrajectory).name())
                    return std::dynamic_pointer_cast<ITrajectory>(shared_from_this());
                else if (classifier == typeid(ITrajectoryWriter).name())
                    return std::dynamic_pointer_cast<ITrajectoryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__CLOSED)
                {
                    return GetClosed();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Trajectory";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToClosed(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOSED, parameterName, nullTextMarker /*no textmarker*/);
                _closed = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromClosed() const override
            {
                auto closed = OSC_CONSTANTS::ATTRIBUTE__CLOSED;
                return GetParameterNameFromAttribute(closed);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP bool IsClosedParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CLOSED);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IShapeWriter> GetWriterShape() const override
            {
                return std::dynamic_pointer_cast<IShapeWriter>(_shape);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrajectoryCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryCatalogLocationImpl: public BaseImpl, public ITrajectoryCatalogLocationWriter, public std::enable_shared_from_this<TrajectoryCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP TrajectoryCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrajectoryCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrajectoryCatalogLocation).name())
                    return std::dynamic_pointer_cast<ITrajectoryCatalogLocation>(shared_from_this());
                else if (classifier == typeid(ITrajectoryCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<ITrajectoryCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrajectoryCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrajectoryFollowingMode. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryFollowingMode)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryFollowingModeImpl: public BaseImpl, public ITrajectoryFollowingModeWriter, public std::enable_shared_from_this<TrajectoryFollowingModeImpl> 
        {
        private:
            FollowingMode _followingMode {};
        public:

            OPENSCENARIOLIB_EXP TrajectoryFollowingModeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP FollowingMode GetFollowingMode() const override;


            OPENSCENARIOLIB_EXP void SetFollowingMode(const FollowingMode followingMode) override
            {
                _followingMode = followingMode;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FOLLOWING_MODE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TrajectoryFollowingModeImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrajectoryFollowingMode).name())
                    return std::dynamic_pointer_cast<ITrajectoryFollowingMode>(shared_from_this());
                else if (classifier == typeid(ITrajectoryFollowingModeWriter).name())
                    return std::dynamic_pointer_cast<ITrajectoryFollowingModeWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TrajectoryFollowingMode";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToFollowingMode(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__FOLLOWING_MODE, parameterName, nullTextMarker /*no textmarker*/);
                _followingMode = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromFollowingMode() const override
            {
                auto followingMode = OSC_CONSTANTS::ATTRIBUTE__FOLLOWING_MODE;
                return GetParameterNameFromAttribute(followingMode);
            }

            OPENSCENARIOLIB_EXP bool IsFollowingModeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__FOLLOWING_MODE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITransitionDynamics. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITransitionDynamics)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TransitionDynamicsImpl: public BaseImpl, public ITransitionDynamicsWriter, public std::enable_shared_from_this<TransitionDynamicsImpl> 
        {
        private:
            DynamicsDimension _dynamicsDimension {};
            DynamicsShape _dynamicsShape {};
            double _value {};
        public:

            OPENSCENARIOLIB_EXP TransitionDynamicsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP DynamicsDimension GetDynamicsDimension() const override;
            OPENSCENARIOLIB_EXP DynamicsShape GetDynamicsShape() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetDynamicsDimension(const DynamicsDimension dynamicsDimension) override
            {
                _dynamicsDimension = dynamicsDimension;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_DIMENSION);
            }

            OPENSCENARIOLIB_EXP void SetDynamicsShape(const DynamicsShape dynamicsShape) override
            {
                _dynamicsShape = dynamicsShape;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TransitionDynamicsImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITransitionDynamics).name())
                    return std::dynamic_pointer_cast<ITransitionDynamics>(shared_from_this());
                else if (classifier == typeid(ITransitionDynamicsWriter).name())
                    return std::dynamic_pointer_cast<ITransitionDynamicsWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TransitionDynamics";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsDimension(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_DIMENSION, parameterName, nullTextMarker /*no textmarker*/);
                _dynamicsDimension = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsShape(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE, parameterName, nullTextMarker /*no textmarker*/);
                _dynamicsShape = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsDimension() const override
            {
                auto dynamicsDimension = OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_DIMENSION;
                return GetParameterNameFromAttribute(dynamicsDimension);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsShape() const override
            {
                auto dynamicsShape = OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE;
                return GetParameterNameFromAttribute(dynamicsShape);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsDynamicsDimensionParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_DIMENSION);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsDynamicsShapeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__DYNAMICS_SHAPE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITraveledDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITraveledDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TraveledDistanceConditionImpl: public BaseImpl, public ITraveledDistanceConditionWriter, public std::enable_shared_from_this<TraveledDistanceConditionImpl> 
        {
        private:
            double _value {};
        public:

            OPENSCENARIOLIB_EXP TraveledDistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TraveledDistanceConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITraveledDistanceCondition).name())
                    return std::dynamic_pointer_cast<ITraveledDistanceCondition>(shared_from_this());
                else if (classifier == typeid(ITraveledDistanceConditionWriter).name())
                    return std::dynamic_pointer_cast<ITraveledDistanceConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__VALUE)
                {
                    return GetValue();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TraveledDistanceCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITrigger. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrigger)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TriggerImpl: public BaseImpl, public ITriggerWriter, public std::enable_shared_from_this<TriggerImpl> 
        {
        private:
            std::vector<std::shared_ptr<IConditionGroupWriter>> _conditionGroups {};
        public:

            OPENSCENARIOLIB_EXP TriggerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionGroup>> GetConditionGroups() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionGroupWriter>> GetWriterConditionGroups() const override
            {
                return _conditionGroups;
            }

            OPENSCENARIOLIB_EXP int GetConditionGroupsSize() const override
            {
                return static_cast<int>(_conditionGroups.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IConditionGroup> GetConditionGroupsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _conditionGroups.size() > index)
                {
                    return _conditionGroups[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetConditionGroups(std::vector<std::shared_ptr<IConditionGroupWriter>>& conditionGroups) override
            {
                _conditionGroups = conditionGroups;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TriggerImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITrigger).name())
                    return std::dynamic_pointer_cast<ITrigger>(shared_from_this());
                else if (classifier == typeid(ITriggerWriter).name())
                    return std::dynamic_pointer_cast<ITriggerWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Trigger";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements ITriggeringEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITriggeringEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TriggeringEntitiesImpl: public BaseImpl, public ITriggeringEntitiesWriter, public std::enable_shared_from_this<TriggeringEntitiesImpl> 
        {
        private:
            TriggeringEntitiesRule _triggeringEntitiesRule {};
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRefs {};
        public:

            OPENSCENARIOLIB_EXP TriggeringEntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP TriggeringEntitiesRule GetTriggeringEntitiesRule() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRefs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRefs() const override
            {
                return _entityRefs;
            }

            OPENSCENARIOLIB_EXP int GetEntityRefsSize() const override
            {
                return static_cast<int>(_entityRefs.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _entityRefs.size() > index)
                {
                    return _entityRefs[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetTriggeringEntitiesRule(const TriggeringEntitiesRule triggeringEntitiesRule) override
            {
                _triggeringEntitiesRule = triggeringEntitiesRule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRIGGERING_ENTITIES_RULE);
            }

            OPENSCENARIOLIB_EXP void SetEntityRefs(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRefs) override
            {
                _entityRefs = entityRefs;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(TriggeringEntitiesImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(ITriggeringEntities).name())
                    return std::dynamic_pointer_cast<ITriggeringEntities>(shared_from_this());
                else if (classifier == typeid(ITriggeringEntitiesWriter).name())
                    return std::dynamic_pointer_cast<ITriggeringEntitiesWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "TriggeringEntities";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTriggeringEntitiesRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRIGGERING_ENTITIES_RULE, parameterName, nullTextMarker /*no textmarker*/);
                _triggeringEntitiesRule = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTriggeringEntitiesRule() const override
            {
                auto triggeringEntitiesRule = OSC_CONSTANTS::ATTRIBUTE__TRIGGERING_ENTITIES_RULE;
                return GetParameterNameFromAttribute(triggeringEntitiesRule);
            }

            OPENSCENARIOLIB_EXP bool IsTriggeringEntitiesRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRIGGERING_ENTITIES_RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IUserDefinedAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedActionImpl: public BaseImpl, public IUserDefinedActionWriter, public std::enable_shared_from_this<UserDefinedActionImpl> 
        {
        private:
            std::shared_ptr<ICustomCommandActionWriter> _customCommandAction {};
        public:

            OPENSCENARIOLIB_EXP UserDefinedActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<ICustomCommandAction> GetCustomCommandAction() const override;


            OPENSCENARIOLIB_EXP void SetCustomCommandAction(std::shared_ptr<ICustomCommandActionWriter> customCommandAction) override
            {
                _customCommandAction = customCommandAction;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(UserDefinedActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IUserDefinedAction).name())
                    return std::dynamic_pointer_cast<IUserDefinedAction>(shared_from_this());
                else if (classifier == typeid(IUserDefinedActionWriter).name())
                    return std::dynamic_pointer_cast<IUserDefinedActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "UserDefinedAction";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICustomCommandActionWriter> GetWriterCustomCommandAction() const override
            {
                return std::dynamic_pointer_cast<ICustomCommandActionWriter>(_customCommandAction);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IUserDefinedValueCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedValueCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedValueConditionImpl: public BaseImpl, public IUserDefinedValueConditionWriter, public std::enable_shared_from_this<UserDefinedValueConditionImpl> 
        {
        private:
            std::string _name {};
            Rule _rule {};
            std::string _value {};
        public:

            OPENSCENARIOLIB_EXP UserDefinedValueConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override
            {
                _rule = rule;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE);
            }

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override
            {
                _value = value;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(UserDefinedValueConditionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IUserDefinedValueCondition).name())
                    return std::dynamic_pointer_cast<IUserDefinedValueCondition>(shared_from_this());
                else if (classifier == typeid(IUserDefinedValueConditionWriter).name())
                    return std::dynamic_pointer_cast<IUserDefinedValueConditionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "UserDefinedValueCondition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__RULE, parameterName, nullTextMarker /*no textmarker*/);
                _rule = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VALUE, parameterName, nullTextMarker /*no textmarker*/);
                _value = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override
            {
                auto rule = OSC_CONSTANTS::ATTRIBUTE__RULE;
                return GetParameterNameFromAttribute(rule);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override
            {
                auto value = OSC_CONSTANTS::ATTRIBUTE__VALUE;
                return GetParameterNameFromAttribute(value);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__RULE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VALUE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVehicle. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicle)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleImpl: public BaseImpl, public IVehicleWriter, public std::enable_shared_from_this<VehicleImpl> 
        {
        private:
            std::string _name {};
            VehicleCategory _vehicleCategory {};
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            std::shared_ptr<IPerformanceWriter> _performance {};
            std::shared_ptr<IAxlesWriter> _axles {};
            std::shared_ptr<IPropertiesWriter> _properties {};
        public:

            OPENSCENARIOLIB_EXP VehicleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP VehicleCategory GetVehicleCategory() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override
            {
                return _parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override
            {
                return static_cast<int>(_parameterDeclarations.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _parameterDeclarations.size() > index)
                {
                    return _parameterDeclarations[index];
                }
                return nullptr;
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPerformance> GetPerformance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxles> GetAxles() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override
            {
                _name = name;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME);
            }

            OPENSCENARIOLIB_EXP void SetVehicleCategory(const VehicleCategory vehicleCategory) override
            {
                _vehicleCategory = vehicleCategory;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VEHICLE_CATEGORY);
            }

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override
            {
                _parameterDeclarations = parameterDeclarations;
            }

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override
            {
                _boundingBox = boundingBox;
            }

            OPENSCENARIOLIB_EXP void SetPerformance(std::shared_ptr<IPerformanceWriter> performance) override
            {
                _performance = performance;
            }

            OPENSCENARIOLIB_EXP void SetAxles(std::shared_ptr<IAxlesWriter> axles) override
            {
                _axles = axles;
            }

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override
            {
                _properties = properties;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VehicleImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVehicle).name())
                    return std::dynamic_pointer_cast<IVehicle>(shared_from_this());
                else if (classifier == typeid(IVehicleWriter).name())
                    return std::dynamic_pointer_cast<IVehicleWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Vehicle";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__NAME, parameterName, nullTextMarker /*no textmarker*/);
                _name = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToVehicleCategory(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__VEHICLE_CATEGORY, parameterName, nullTextMarker /*no textmarker*/);
                _vehicleCategory = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override
            {
                auto name = OSC_CONSTANTS::ATTRIBUTE__NAME;
                return GetParameterNameFromAttribute(name);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromVehicleCategory() const override
            {
                auto vehicleCategory = OSC_CONSTANTS::ATTRIBUTE__VEHICLE_CATEGORY;
                return GetParameterNameFromAttribute(vehicleCategory);
            }

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__NAME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsVehicleCategoryParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__VEHICLE_CATEGORY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override
            {
                return std::dynamic_pointer_cast<IBoundingBoxWriter>(_boundingBox);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPerformanceWriter> GetWriterPerformance() const override
            {
                return std::dynamic_pointer_cast<IPerformanceWriter>(_performance);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxlesWriter> GetWriterAxles() const override
            {
                return std::dynamic_pointer_cast<IAxlesWriter>(_axles);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override
            {
                return std::dynamic_pointer_cast<IPropertiesWriter>(_properties);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVehicleCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCatalogLocationImpl: public BaseImpl, public IVehicleCatalogLocationWriter, public std::enable_shared_from_this<VehicleCatalogLocationImpl> 
        {
        private:
            std::shared_ptr<IDirectoryWriter> _directory {};
        public:

            OPENSCENARIOLIB_EXP VehicleCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override
            {
                _directory = directory;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VehicleCatalogLocationImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVehicleCatalogLocation).name())
                    return std::dynamic_pointer_cast<IVehicleCatalogLocation>(shared_from_this());
                else if (classifier == typeid(IVehicleCatalogLocationWriter).name())
                    return std::dynamic_pointer_cast<IVehicleCatalogLocationWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "VehicleCatalogLocation";
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override
            {
                return std::dynamic_pointer_cast<IDirectoryWriter>(_directory);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVehicleCategoryDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCategoryDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCategoryDistributionImpl: public BaseImpl, public IVehicleCategoryDistributionWriter, public std::enable_shared_from_this<VehicleCategoryDistributionImpl> 
        {
        private:
            std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>> _vehicleCategoryDistributionEntries {};
        public:

            OPENSCENARIOLIB_EXP VehicleCategoryDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleCategoryDistributionEntry>> GetVehicleCategoryDistributionEntries() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>> GetWriterVehicleCategoryDistributionEntries() const override
            {
                return _vehicleCategoryDistributionEntries;
            }

            OPENSCENARIOLIB_EXP int GetVehicleCategoryDistributionEntriesSize() const override
            {
                return static_cast<int>(_vehicleCategoryDistributionEntries.size());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistributionEntry> GetVehicleCategoryDistributionEntriesAtIndex(unsigned int index) const override
            {
                if (index >= 0 && _vehicleCategoryDistributionEntries.size() > index)
                {
                    return _vehicleCategoryDistributionEntries[index];
                }
                return nullptr;
            }


            OPENSCENARIOLIB_EXP void SetVehicleCategoryDistributionEntries(std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>>& vehicleCategoryDistributionEntries) override
            {
                _vehicleCategoryDistributionEntries = vehicleCategoryDistributionEntries;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VehicleCategoryDistributionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVehicleCategoryDistribution).name())
                    return std::dynamic_pointer_cast<IVehicleCategoryDistribution>(shared_from_this());
                else if (classifier == typeid(IVehicleCategoryDistributionWriter).name())
                    return std::dynamic_pointer_cast<IVehicleCategoryDistributionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "VehicleCategoryDistribution";
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVehicleCategoryDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCategoryDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCategoryDistributionEntryImpl: public BaseImpl, public IVehicleCategoryDistributionEntryWriter, public std::enable_shared_from_this<VehicleCategoryDistributionEntryImpl> 
        {
        private:
            VehicleCategory _category {};
            double _weight {};
        public:

            OPENSCENARIOLIB_EXP VehicleCategoryDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP VehicleCategory GetCategory() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;


            OPENSCENARIOLIB_EXP void SetCategory(const VehicleCategory category) override
            {
                _category = category;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CATEGORY);
            }

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override
            {
                _weight = weight;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VehicleCategoryDistributionEntryImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVehicleCategoryDistributionEntry).name())
                    return std::dynamic_pointer_cast<IVehicleCategoryDistributionEntry>(shared_from_this());
                else if (classifier == typeid(IVehicleCategoryDistributionEntryWriter).name())
                    return std::dynamic_pointer_cast<IVehicleCategoryDistributionEntryWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__WEIGHT)
                {
                    return GetWeight();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "VehicleCategoryDistributionEntry";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToCategory(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CATEGORY, parameterName, nullTextMarker /*no textmarker*/);
                _category = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__WEIGHT, parameterName, nullTextMarker /*no textmarker*/);
                _weight = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromCategory() const override
            {
                auto category = OSC_CONSTANTS::ATTRIBUTE__CATEGORY;
                return GetParameterNameFromAttribute(category);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override
            {
                auto weight = OSC_CONSTANTS::ATTRIBUTE__WEIGHT;
                return GetParameterNameFromAttribute(weight);
            }

            OPENSCENARIOLIB_EXP bool IsCategoryParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CATEGORY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__WEIGHT);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVertex. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVertex)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VertexImpl: public BaseImpl, public IVertexWriter, public std::enable_shared_from_this<VertexImpl> 
        {
        private:
            double _time {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP VertexImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetTime() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTime(const double time) override
            {
                _time = time;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VertexImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVertex).name())
                    return std::dynamic_pointer_cast<IVertex>(shared_from_this());
                else if (classifier == typeid(IVertexWriter).name())
                    return std::dynamic_pointer_cast<IVertexWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__TIME)
                {
                    return GetTime();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Vertex";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TIME, parameterName, nullTextMarker /*no textmarker*/);
                _time = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override
            {
                auto time = OSC_CONSTANTS::ATTRIBUTE__TIME;
                return GetParameterNameFromAttribute(time);
            }

            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TIME);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IVisibilityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVisibilityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VisibilityActionImpl: public BaseImpl, public IVisibilityActionWriter, public std::enable_shared_from_this<VisibilityActionImpl> 
        {
        private:
            bool _graphics {};
            bool _sensors {};
            bool _traffic {};
        public:

            OPENSCENARIOLIB_EXP VisibilityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP bool GetGraphics() const override;
            OPENSCENARIOLIB_EXP bool GetSensors() const override;
            OPENSCENARIOLIB_EXP bool GetTraffic() const override;


            OPENSCENARIOLIB_EXP void SetGraphics(const bool graphics) override
            {
                _graphics = graphics;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__GRAPHICS);
            }

            OPENSCENARIOLIB_EXP void SetSensors(const bool sensors) override
            {
                _sensors = sensors;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SENSORS);
            }

            OPENSCENARIOLIB_EXP void SetTraffic(const bool traffic) override
            {
                _traffic = traffic;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(VisibilityActionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IVisibilityAction).name())
                    return std::dynamic_pointer_cast<IVisibilityAction>(shared_from_this());
                else if (classifier == typeid(IVisibilityActionWriter).name())
                    return std::dynamic_pointer_cast<IVisibilityActionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__GRAPHICS)
                {
                    return GetGraphics();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__SENSORS)
                {
                    return GetSensors();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__TRAFFIC)
                {
                    return GetTraffic();
                }
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "VisibilityAction";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToGraphics(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__GRAPHICS, parameterName, nullTextMarker /*no textmarker*/);
                _graphics = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToSensors(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__SENSORS, parameterName, nullTextMarker /*no textmarker*/);
                _sensors = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToTraffic(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__TRAFFIC, parameterName, nullTextMarker /*no textmarker*/);
                _traffic = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromGraphics() const override
            {
                auto graphics = OSC_CONSTANTS::ATTRIBUTE__GRAPHICS;
                return GetParameterNameFromAttribute(graphics);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromSensors() const override
            {
                auto sensors = OSC_CONSTANTS::ATTRIBUTE__SENSORS;
                return GetParameterNameFromAttribute(sensors);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromTraffic() const override
            {
                auto traffic = OSC_CONSTANTS::ATTRIBUTE__TRAFFIC;
                return GetParameterNameFromAttribute(traffic);
            }

            OPENSCENARIOLIB_EXP bool IsGraphicsParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__GRAPHICS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsSensorsParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__SENSORS);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsTrafficParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__TRAFFIC);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IWaypoint. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWaypoint)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WaypointImpl: public BaseImpl, public IWaypointWriter, public std::enable_shared_from_this<WaypointImpl> 
        {
        private:
            RouteStrategy _routeStrategy {};
            std::shared_ptr<IPositionWriter> _position {};
        public:

            OPENSCENARIOLIB_EXP WaypointImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP RouteStrategy GetRouteStrategy() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetRouteStrategy(const RouteStrategy routeStrategy) override
            {
                _routeStrategy = routeStrategy;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROUTE_STRATEGY);
            }

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override
            {
                _position = position;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(WaypointImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IWaypoint).name())
                    return std::dynamic_pointer_cast<IWaypoint>(shared_from_this());
                else if (classifier == typeid(IWaypointWriter).name())
                    return std::dynamic_pointer_cast<IWaypointWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Waypoint";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToRouteStrategy(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__ROUTE_STRATEGY, parameterName, nullTextMarker /*no textmarker*/);
                _routeStrategy = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromRouteStrategy() const override
            {
                auto routeStrategy = OSC_CONSTANTS::ATTRIBUTE__ROUTE_STRATEGY;
                return GetParameterNameFromAttribute(routeStrategy);
            }

            OPENSCENARIOLIB_EXP bool IsRouteStrategyParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__ROUTE_STRATEGY);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override
            {
                return std::dynamic_pointer_cast<IPositionWriter>(_position);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IWeather. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWeather)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WeatherImpl: public BaseImpl, public IWeatherWriter, public std::enable_shared_from_this<WeatherImpl> 
        {
        private:
            CloudState _cloudState {};
            std::shared_ptr<ISunWriter> _sun {};
            std::shared_ptr<IFogWriter> _fog {};
            std::shared_ptr<IPrecipitationWriter> _precipitation {};
        public:

            OPENSCENARIOLIB_EXP WeatherImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP CloudState GetCloudState() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISun> GetSun() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFog> GetFog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrecipitation> GetPrecipitation() const override;


            OPENSCENARIOLIB_EXP void SetCloudState(const CloudState cloudState) override
            {
                _cloudState = cloudState;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOUD_STATE);
            }

            OPENSCENARIOLIB_EXP void SetSun(std::shared_ptr<ISunWriter> sun) override
            {
                _sun = sun;
            }

            OPENSCENARIOLIB_EXP void SetFog(std::shared_ptr<IFogWriter> fog) override
            {
                _fog = fog;
            }

            OPENSCENARIOLIB_EXP void SetPrecipitation(std::shared_ptr<IPrecipitationWriter> precipitation) override
            {
                _precipitation = precipitation;
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(WeatherImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IWeather).name())
                    return std::dynamic_pointer_cast<IWeather>(shared_from_this());
                else if (classifier == typeid(IWeatherWriter).name())
                    return std::dynamic_pointer_cast<IWeatherWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "Weather";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToCloudState(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__CLOUD_STATE, parameterName, nullTextMarker /*no textmarker*/);
                _cloudState = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromCloudState() const override
            {
                auto cloudState = OSC_CONSTANTS::ATTRIBUTE__CLOUD_STATE;
                return GetParameterNameFromAttribute(cloudState);
            }

            OPENSCENARIOLIB_EXP bool IsCloudStateParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__CLOUD_STATE);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISunWriter> GetWriterSun() const override
            {
                return std::dynamic_pointer_cast<ISunWriter>(_sun);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IFogWriter> GetWriterFog() const override
            {
                return std::dynamic_pointer_cast<IFogWriter>(_fog);
            }
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrecipitationWriter> GetWriterPrecipitation() const override
            {
                return std::dynamic_pointer_cast<IPrecipitationWriter>(_precipitation);
            }
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.0
         * <p>
         * Value class that implements IWorldPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWorldPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WorldPositionImpl: public BaseImpl, public IWorldPositionWriter, public std::enable_shared_from_this<WorldPositionImpl> 
        {
        private:
            double _h {};
            double _p {};
            double _r {};
            double _x {};
            double _y {};
            double _z {};
        public:

            OPENSCENARIOLIB_EXP WorldPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override
            {
                return this;
            }

            OPENSCENARIOLIB_EXP double GetH() const override;
            OPENSCENARIOLIB_EXP double GetP() const override;
            OPENSCENARIOLIB_EXP double GetR() const override;
            OPENSCENARIOLIB_EXP double GetX() const override;
            OPENSCENARIOLIB_EXP double GetY() const override;
            OPENSCENARIOLIB_EXP double GetZ() const override;


            OPENSCENARIOLIB_EXP void SetH(const double h) override
            {
                _h = h;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__H);
            }

            OPENSCENARIOLIB_EXP void SetP(const double p) override
            {
                _p = p;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__P);
            }

            OPENSCENARIOLIB_EXP void SetR(const double r) override
            {
                _r = r;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__R);
            }

            OPENSCENARIOLIB_EXP void SetX(const double x) override
            {
                _x = x;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__X);
            }

            OPENSCENARIOLIB_EXP void SetY(const double y) override
            {
                _y = y;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Y);
            }

            OPENSCENARIOLIB_EXP void SetZ(const double z) override
            {
                _z = z;
                //RemoveAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Z);
            }

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override
            {
                if (classifier == typeid(WorldPositionImpl).name())
                    return shared_from_this();
                else if (classifier == typeid(IWorldPosition).name())
                    return std::dynamic_pointer_cast<IWorldPosition>(shared_from_this());
                else if (classifier == typeid(IWorldPositionWriter).name())
                    return std::dynamic_pointer_cast<IWorldPositionWriter>(shared_from_this());
                return BaseImpl::GetAdapter(classifier);
            }

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override
            {
                return BaseImpl::GetParent();
            }

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            int GetIntProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            double GetDoubleProperty(std::string key) const override
            {
                if (key.empty())
                {
                    throw KeyNotSupportedException();
                }
     
                if (key == OSC_CONSTANTS::ATTRIBUTE__H)
                {
                    return GetH();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__P)
                {
                    return GetP();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__R)
                {
                    return GetR();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__X)
                {
                    return GetX();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__Y)
                {
                    return GetY();
                }    else 
                if (key == OSC_CONSTANTS::ATTRIBUTE__Z)
                {
                    return GetZ();
                }
                throw KeyNotSupportedException();

            }

            uint16_t GetUnsignedShortProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }
 
            bool GetBooleanProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            DateTime GetDateTimeProperty(std::string key) const override
            {
                throw KeyNotSupportedException();

            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override
            {
                return std::dynamic_pointer_cast<IOpenScenarioFlexElement>(GetParent().lock());
            }

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override
            {
                return "WorldPosition";
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToH(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__H, parameterName, nullTextMarker /*no textmarker*/);
                _h = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToP(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__P, parameterName, nullTextMarker /*no textmarker*/);
                _p = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToR(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__R, parameterName, nullTextMarker /*no textmarker*/);
                _r = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToX(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__X, parameterName, nullTextMarker /*no textmarker*/);
                _x = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToY(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Y, parameterName, nullTextMarker /*no textmarker*/);
                _y = {};
            }

            OPENSCENARIOLIB_EXP  void WriteParameterToZ(std::string& parameterName) override
            {
                Textmarker nullTextMarker(-1, -1, "");
                SetAttributeParameter(OSC_CONSTANTS::ATTRIBUTE__Z, parameterName, nullTextMarker /*no textmarker*/);
                _z = {};
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromH() const override
            {
                auto h = OSC_CONSTANTS::ATTRIBUTE__H;
                return GetParameterNameFromAttribute(h);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromP() const override
            {
                auto p = OSC_CONSTANTS::ATTRIBUTE__P;
                return GetParameterNameFromAttribute(p);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromR() const override
            {
                auto r = OSC_CONSTANTS::ATTRIBUTE__R;
                return GetParameterNameFromAttribute(r);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromX() const override
            {
                auto x = OSC_CONSTANTS::ATTRIBUTE__X;
                return GetParameterNameFromAttribute(x);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromY() const override
            {
                auto y = OSC_CONSTANTS::ATTRIBUTE__Y;
                return GetParameterNameFromAttribute(y);
            }

            OPENSCENARIOLIB_EXP std::string GetParameterFromZ() const override
            {
                auto z = OSC_CONSTANTS::ATTRIBUTE__Z;
                return GetParameterNameFromAttribute(z);
            }

            OPENSCENARIOLIB_EXP bool IsHParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__H);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsPParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__P);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsRParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__R);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsXParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__X);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsYParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__Y);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            OPENSCENARIOLIB_EXP bool IsZParameterized() override
            {
                auto keys = GetParameterizedAttributeKeys();
                const auto kIt = std::find(keys.begin(), keys.end(), OSC_CONSTANTS::ATTRIBUTE__Z);
                if (kIt != keys.end())
                    return true;
                return false;
            }

            // children
        };


    }
}

