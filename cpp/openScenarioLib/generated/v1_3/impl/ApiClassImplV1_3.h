/*
 * Copyright 2020 RA Consulting
 *
 * RA Consulting GmbH licenses this file under the Apache License, 
 * Version 2.0 (the "License"); you may not use this file except 
 * in compliance with the License. 
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "ApiClassInterfacesV1_3.h"
#include "ApiClassWriterInterfacesV1_3.h"
#include "BaseImpl.h"
#include "IParserMessageLogger.h"
#include "ParserHelper.h"
#include "ParameterValue.h"
#include "INamedReference.h"
#include "MemLeakDetection.h"
#include "KeyNotSupportedException.h"
#include "OscConstantsV1_3.h"
#include "ExportDefinitions.h"

// helper.getTypeImportCpp(element,packageName).each{importedType->%>import =importedType%>

namespace NET_ASAM_OPENSCENARIO
{
    namespace v1_3
    {
        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAbsoluteSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteSpeedImpl: public BaseImpl, public IAbsoluteSpeedWriter, public std::enable_shared_from_this<AbsoluteSpeedImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};
            bool _isSetSteadyState = false;
            std::shared_ptr<ISteadyStateWriter> _steadyState {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AbsoluteSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISteadyState> GetSteadyState() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetSteadyState(std::shared_ptr<ISteadyStateWriter> steadyState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISteadyStateWriter> GetWriterSteadyState() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSteadyState() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSteadyState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAbsoluteTargetLane. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetLane)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetLaneImpl: public BaseImpl, public IAbsoluteTargetLaneWriter, public std::enable_shared_from_this<AbsoluteTargetLaneImpl> 
        {
        private:
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP AbsoluteTargetLaneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAbsoluteTargetLaneOffset. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetLaneOffset)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetLaneOffsetImpl: public BaseImpl, public IAbsoluteTargetLaneOffsetWriter, public std::enable_shared_from_this<AbsoluteTargetLaneOffsetImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AbsoluteTargetLaneOffsetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAbsoluteTargetSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAbsoluteTargetSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AbsoluteTargetSpeedImpl: public BaseImpl, public IAbsoluteTargetSpeedWriter, public std::enable_shared_from_this<AbsoluteTargetSpeedImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AbsoluteTargetSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAccelerationCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAccelerationCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AccelerationConditionImpl: public BaseImpl, public IAccelerationConditionWriter, public std::enable_shared_from_this<AccelerationConditionImpl> 
        {
        private:
            bool _isSetDirection = false;
            DirectionalDimension _direction {};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AccelerationConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DirectionalDimension GetDirection() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetDirection(const DirectionalDimension direction) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDirection(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDirection() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsDirectionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetDirection() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirection() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAcquirePositionAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAcquirePositionAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AcquirePositionActionImpl: public BaseImpl, public IAcquirePositionActionWriter, public std::enable_shared_from_this<AcquirePositionActionImpl> 
        {
        private:
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

            OPENSCENARIOLIB_EXP AcquirePositionActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAct. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAct)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActImpl: public BaseImpl, public IActWriter, public std::enable_shared_from_this<ActImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetManeuverGroups = false;
            std::vector<std::shared_ptr<IManeuverGroupWriter>> _maneuverGroups {};
            bool _isSetStartTrigger = false;
            std::shared_ptr<ITriggerWriter> _startTrigger {};
            bool _isSetStopTrigger = false;
            std::shared_ptr<ITriggerWriter> _stopTrigger {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ActImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverGroup>> GetManeuverGroups() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverGroupWriter>> GetWriterManeuverGroups() const override;
            OPENSCENARIOLIB_EXP int GetManeuverGroupsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverGroup> GetManeuverGroupsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStartTrigger() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStopTrigger() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetManeuverGroups(std::vector<std::shared_ptr<IManeuverGroupWriter>>& maneuverGroups) override;

            OPENSCENARIOLIB_EXP void SetStartTrigger(std::shared_ptr<ITriggerWriter> startTrigger) override;

            OPENSCENARIOLIB_EXP void SetStopTrigger(std::shared_ptr<ITriggerWriter> stopTrigger) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStartTrigger() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStopTrigger() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetManeuverGroups() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStartTrigger() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStartTrigger() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStopTrigger() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStopTrigger() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActionImpl: public BaseImpl, public IActionWriter, public std::enable_shared_from_this<ActionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetGlobalAction = false;
            std::shared_ptr<IGlobalActionWriter> _globalAction {};
            bool _isSetUserDefinedAction = false;
            std::shared_ptr<IUserDefinedActionWriter> _userDefinedAction {};
            bool _isSetPrivateAction = false;
            std::shared_ptr<IPrivateActionWriter> _privateAction {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalAction> GetGlobalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAction> GetUserDefinedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateAction> GetPrivateAction() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetGlobalAction(std::shared_ptr<IGlobalActionWriter> globalAction) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedAction(std::shared_ptr<IUserDefinedActionWriter> userDefinedAction) override;

            OPENSCENARIOLIB_EXP void SetPrivateAction(std::shared_ptr<IPrivateActionWriter> privateAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalActionWriter> GetWriterGlobalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedActionWriter> GetWriterUserDefinedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateActionWriter> GetWriterPrivateAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetGlobalAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPrivateAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IActivateControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IActivateControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActivateControllerActionImpl: public BaseImpl, public IActivateControllerActionWriter, public std::enable_shared_from_this<ActivateControllerActionImpl> 
        {
        private:
            bool _isSetAnimation = false;
            bool _animation {};
            bool _isSetControllerRef = false;
            std::shared_ptr<INamedReference<IController>> _controllerRef  = nullptr;
            bool _isSetLateral = false;
            bool _lateral {};
            bool _isSetLighting = false;
            bool _lighting {};
            bool _isSetLongitudinal = false;
            bool _longitudinal {};
            bool _isSetObjectControllerRef = false;
            std::shared_ptr<INamedReference<IObjectController>> _objectControllerRef  = nullptr;

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP ActivateControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetAnimation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IController>> GetControllerRef() const override;
            OPENSCENARIOLIB_EXP bool GetLateral() const override;
            OPENSCENARIOLIB_EXP bool GetLighting() const override;
            OPENSCENARIOLIB_EXP bool GetLongitudinal() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IObjectController>> GetObjectControllerRef() const override;


            OPENSCENARIOLIB_EXP void SetAnimation(const bool animation) override;

            OPENSCENARIOLIB_EXP void SetControllerRef(std::shared_ptr<INamedReference<IController>> controllerRef) override;

            OPENSCENARIOLIB_EXP void SetLateral(const bool lateral) override;

            OPENSCENARIOLIB_EXP void SetLighting(const bool lighting) override;

            OPENSCENARIOLIB_EXP void SetLongitudinal(const bool longitudinal) override;

            OPENSCENARIOLIB_EXP void SetObjectControllerRef(std::shared_ptr<INamedReference<IObjectController>> objectControllerRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAnimation(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToControllerRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLateral(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLighting(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLongitudinal(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToObjectControllerRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAnimation() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromControllerRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLateral() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLighting() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLongitudinal() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromObjectControllerRef() const override;

            OPENSCENARIOLIB_EXP bool IsAnimationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsControllerRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLateralParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLightingParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLongitudinalParameterized() override;
            OPENSCENARIOLIB_EXP bool IsObjectControllerRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetAnimation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetControllerRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLateral() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLateral() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLighting() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLighting() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLongitudinal() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLongitudinal() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetObjectControllerRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetObjectControllerRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IActors. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IActors)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ActorsImpl: public BaseImpl, public IActorsWriter, public std::enable_shared_from_this<ActorsImpl> 
        {
        private:
            bool _isSetSelectTriggeringEntities = false;
            bool _selectTriggeringEntities {};
            bool _isSetEntityRefs = false;
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRefs {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP ActorsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetSelectTriggeringEntities() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRefs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRefs() const override;
            OPENSCENARIOLIB_EXP int GetEntityRefsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetSelectTriggeringEntities(const bool selectTriggeringEntities) override;

            OPENSCENARIOLIB_EXP void SetEntityRefs(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRefs) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSelectTriggeringEntities(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSelectTriggeringEntities() const override;

            OPENSCENARIOLIB_EXP bool IsSelectTriggeringEntitiesParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetSelectTriggeringEntities() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetEntityRefs() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRefs() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAddEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAddEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AddEntityActionImpl: public BaseImpl, public IAddEntityActionWriter, public std::enable_shared_from_this<AddEntityActionImpl> 
        {
        private:
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

            OPENSCENARIOLIB_EXP AddEntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAngleCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAngleCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AngleConditionImpl: public BaseImpl, public IAngleConditionWriter, public std::enable_shared_from_this<AngleConditionImpl> 
        {
        private:
            bool _isSetAngle = false;
            double _angle {};
            bool _isSetAngleTolerance = false;
            double _angleTolerance {};
            bool _isSetAngleType = false;
            AngleType _angleType {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AngleConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAngle() const override;
            OPENSCENARIOLIB_EXP double GetAngleTolerance() const override;
            OPENSCENARIOLIB_EXP AngleType GetAngleType() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;


            OPENSCENARIOLIB_EXP void SetAngle(const double angle) override;

            OPENSCENARIOLIB_EXP void SetAngleTolerance(const double angleTolerance) override;

            OPENSCENARIOLIB_EXP void SetAngleType(const AngleType angleType) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngle(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngleTolerance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngleType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngle() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngleTolerance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngleType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP bool IsAngleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsAngleToleranceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsAngleTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetAngle() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAngleTolerance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAngleType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAnimationAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAnimationAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AnimationActionImpl: public BaseImpl, public IAnimationActionWriter, public std::enable_shared_from_this<AnimationActionImpl> 
        {
        private:
            bool _isSetAnimationDuration = false;
            double _animationDuration {};
            bool _isSetLoop = false;
            bool _loop {false};
            bool _isSetAnimationType = false;
            std::shared_ptr<IAnimationTypeWriter> _animationType {};
            bool _isSetAnimationState = false;
            std::shared_ptr<IAnimationStateWriter> _animationState {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AnimationActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAnimationDuration() const override;
            OPENSCENARIOLIB_EXP bool GetLoop() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationType> GetAnimationType() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationState> GetAnimationState() const override;


            OPENSCENARIOLIB_EXP void SetAnimationDuration(const double animationDuration) override;

            OPENSCENARIOLIB_EXP void SetLoop(const bool loop) override;

            OPENSCENARIOLIB_EXP void SetAnimationType(std::shared_ptr<IAnimationTypeWriter> animationType) override;

            OPENSCENARIOLIB_EXP void SetAnimationState(std::shared_ptr<IAnimationStateWriter> animationState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAnimationDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLoop(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAnimationDuration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLoop() const override;

            OPENSCENARIOLIB_EXP bool IsAnimationDurationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLoopParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationTypeWriter> GetWriterAnimationType() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationStateWriter> GetWriterAnimationState() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAnimationDuration() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimationDuration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLoop() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLoop() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimationType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetAnimationState() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimationState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAnimationFile. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAnimationFile)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AnimationFileImpl: public BaseImpl, public IAnimationFileWriter, public std::enable_shared_from_this<AnimationFileImpl> 
        {
        private:
            bool _isSetTimeOffset = false;
            double _timeOffset {};
            bool _isSetFile = false;
            std::shared_ptr<IFileWriter> _file {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AnimationFileImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTimeOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetFile() const override;


            OPENSCENARIOLIB_EXP void SetTimeOffset(const double timeOffset) override;

            OPENSCENARIOLIB_EXP void SetFile(std::shared_ptr<IFileWriter> file) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTimeOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTimeOffset() const override;

            OPENSCENARIOLIB_EXP bool IsTimeOffsetParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterFile() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTimeOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFile() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAnimationState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAnimationState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AnimationStateImpl: public BaseImpl, public IAnimationStateWriter, public std::enable_shared_from_this<AnimationStateImpl> 
        {
        private:
            bool _isSetState = false;
            double _state {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AnimationStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetState() const override;


            OPENSCENARIOLIB_EXP void SetState(const double state) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAnimationType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAnimationType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AnimationTypeImpl: public BaseImpl, public IAnimationTypeWriter, public std::enable_shared_from_this<AnimationTypeImpl> 
        {
        private:
            bool _isSetComponentAnimation = false;
            std::shared_ptr<IComponentAnimationWriter> _componentAnimation {};
            bool _isSetPedestrianAnimation = false;
            std::shared_ptr<IPedestrianAnimationWriter> _pedestrianAnimation {};
            bool _isSetAnimationFile = false;
            std::shared_ptr<IAnimationFileWriter> _animationFile {};
            bool _isSetUserDefinedAnimation = false;
            std::shared_ptr<IUserDefinedAnimationWriter> _userDefinedAnimation {};

        public:

            OPENSCENARIOLIB_EXP AnimationTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IComponentAnimation> GetComponentAnimation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianAnimation> GetPedestrianAnimation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationFile> GetAnimationFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAnimation> GetUserDefinedAnimation() const override;


            OPENSCENARIOLIB_EXP void SetComponentAnimation(std::shared_ptr<IComponentAnimationWriter> componentAnimation) override;

            OPENSCENARIOLIB_EXP void SetPedestrianAnimation(std::shared_ptr<IPedestrianAnimationWriter> pedestrianAnimation) override;

            OPENSCENARIOLIB_EXP void SetAnimationFile(std::shared_ptr<IAnimationFileWriter> animationFile) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedAnimation(std::shared_ptr<IUserDefinedAnimationWriter> userDefinedAnimation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IComponentAnimationWriter> GetWriterComponentAnimation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianAnimationWriter> GetWriterPedestrianAnimation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationFileWriter> GetWriterAnimationFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAnimationWriter> GetWriterUserDefinedAnimation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetComponentAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPedestrianAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimationFile() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedAnimation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAppearanceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAppearanceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AppearanceActionImpl: public BaseImpl, public IAppearanceActionWriter, public std::enable_shared_from_this<AppearanceActionImpl> 
        {
        private:
            bool _isSetLightStateAction = false;
            std::shared_ptr<ILightStateActionWriter> _lightStateAction {};
            bool _isSetAnimationAction = false;
            std::shared_ptr<IAnimationActionWriter> _animationAction {};

        public:

            OPENSCENARIOLIB_EXP AppearanceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ILightStateAction> GetLightStateAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationAction> GetAnimationAction() const override;


            OPENSCENARIOLIB_EXP void SetLightStateAction(std::shared_ptr<ILightStateActionWriter> lightStateAction) override;

            OPENSCENARIOLIB_EXP void SetAnimationAction(std::shared_ptr<IAnimationActionWriter> animationAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILightStateActionWriter> GetWriterLightStateAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAnimationActionWriter> GetWriterAnimationAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLightStateAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimationAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAssignControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAssignControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AssignControllerActionImpl: public BaseImpl, public IAssignControllerActionWriter, public std::enable_shared_from_this<AssignControllerActionImpl> 
        {
        private:
            bool _isSetActivateAnimation = false;
            bool _activateAnimation {};
            bool _isSetActivateLateral = false;
            bool _activateLateral {};
            bool _isSetActivateLighting = false;
            bool _activateLighting {};
            bool _isSetActivateLongitudinal = false;
            bool _activateLongitudinal {};
            bool _isSetController = false;
            std::shared_ptr<IControllerWriter> _controller {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            bool _isSetObjectController = false;
            std::shared_ptr<IObjectControllerWriter> _objectController {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP AssignControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActivateAnimation() const override;
            OPENSCENARIOLIB_EXP bool GetActivateLateral() const override;
            OPENSCENARIOLIB_EXP bool GetActivateLighting() const override;
            OPENSCENARIOLIB_EXP bool GetActivateLongitudinal() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectController> GetObjectController() const override;


            OPENSCENARIOLIB_EXP void SetActivateAnimation(const bool activateAnimation) override;

            OPENSCENARIOLIB_EXP void SetActivateLateral(const bool activateLateral) override;

            OPENSCENARIOLIB_EXP void SetActivateLighting(const bool activateLighting) override;

            OPENSCENARIOLIB_EXP void SetActivateLongitudinal(const bool activateLongitudinal) override;

            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void SetObjectController(std::shared_ptr<IObjectControllerWriter> objectController) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActivateAnimation(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActivateLateral(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActivateLighting(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActivateLongitudinal(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActivateAnimation() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActivateLateral() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActivateLighting() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActivateLongitudinal() const override;

            OPENSCENARIOLIB_EXP bool IsActivateAnimationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsActivateLateralParameterized() override;
            OPENSCENARIOLIB_EXP bool IsActivateLightingParameterized() override;
            OPENSCENARIOLIB_EXP bool IsActivateLongitudinalParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectControllerWriter> GetWriterObjectController() const override;
            OPENSCENARIOLIB_EXP virtual void ResetActivateAnimation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetActivateLateral() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateLateral() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetActivateLighting() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateLighting() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetActivateLongitudinal() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateLongitudinal() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetController() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetController() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCatalogReference() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetObjectController() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetObjectController() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAssignRouteAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAssignRouteAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AssignRouteActionImpl: public BaseImpl, public IAssignRouteActionWriter, public std::enable_shared_from_this<AssignRouteActionImpl> 
        {
        private:
            bool _isSetRoute = false;
            std::shared_ptr<IRouteWriter> _route {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};

        public:

            OPENSCENARIOLIB_EXP AssignRouteActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetRoute(std::shared_ptr<IRouteWriter> route) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteWriter> GetWriterRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoute() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAutomaticGear. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAutomaticGear)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AutomaticGearImpl: public BaseImpl, public IAutomaticGearWriter, public std::enable_shared_from_this<AutomaticGearImpl> 
        {
        private:
            bool _isSetGear = false;
            AutomaticGearType _gear {};

        public:

            OPENSCENARIOLIB_EXP AutomaticGearImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP AutomaticGearType GetGear() const override;


            OPENSCENARIOLIB_EXP void SetGear(const AutomaticGearType gear) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToGear(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromGear() const override;

            OPENSCENARIOLIB_EXP bool IsGearParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetGear() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAxle. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAxle)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AxleImpl: public BaseImpl, public IAxleWriter, public std::enable_shared_from_this<AxleImpl> 
        {
        private:
            bool _isSetMaxSteering = false;
            double _maxSteering {};
            bool _isSetPositionX = false;
            double _positionX {};
            bool _isSetPositionZ = false;
            double _positionZ {};
            bool _isSetTrackWidth = false;
            double _trackWidth {};
            bool _isSetWheelDiameter = false;
            double _wheelDiameter {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP AxleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMaxSteering() const override;
            OPENSCENARIOLIB_EXP double GetPositionX() const override;
            OPENSCENARIOLIB_EXP double GetPositionZ() const override;
            OPENSCENARIOLIB_EXP double GetTrackWidth() const override;
            OPENSCENARIOLIB_EXP double GetWheelDiameter() const override;


            OPENSCENARIOLIB_EXP void SetMaxSteering(const double maxSteering) override;

            OPENSCENARIOLIB_EXP void SetPositionX(const double positionX) override;

            OPENSCENARIOLIB_EXP void SetPositionZ(const double positionZ) override;

            OPENSCENARIOLIB_EXP void SetTrackWidth(const double trackWidth) override;

            OPENSCENARIOLIB_EXP void SetWheelDiameter(const double wheelDiameter) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSteering(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPositionX(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPositionZ(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrackWidth(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWheelDiameter(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSteering() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPositionX() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPositionZ() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrackWidth() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWheelDiameter() const override;

            OPENSCENARIOLIB_EXP bool IsMaxSteeringParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPositionXParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPositionZParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTrackWidthParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWheelDiameterParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxSteering() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPositionX() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPositionZ() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrackWidth() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWheelDiameter() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IAxles. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IAxles)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class AxlesImpl: public BaseImpl, public IAxlesWriter, public std::enable_shared_from_this<AxlesImpl> 
        {
        private:
            bool _isSetFrontAxle = false;
            std::shared_ptr<IAxleWriter> _frontAxle {};
            bool _isSetRearAxle = false;
            std::shared_ptr<IAxleWriter> _rearAxle {};
            bool _isSetAdditionalAxles = false;
            std::vector<std::shared_ptr<IAxleWriter>> _additionalAxles {};

        public:

            OPENSCENARIOLIB_EXP AxlesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetFrontAxle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetRearAxle() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAxle>> GetAdditionalAxles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAxleWriter>> GetWriterAdditionalAxles() const override;
            OPENSCENARIOLIB_EXP int GetAdditionalAxlesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxle> GetAdditionalAxlesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetFrontAxle(std::shared_ptr<IAxleWriter> frontAxle) override;

            OPENSCENARIOLIB_EXP void SetRearAxle(std::shared_ptr<IAxleWriter> rearAxle) override;

            OPENSCENARIOLIB_EXP void SetAdditionalAxles(std::vector<std::shared_ptr<IAxleWriter>>& additionalAxles) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxleWriter> GetWriterFrontAxle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxleWriter> GetWriterRearAxle() const override;
            OPENSCENARIOLIB_EXP virtual void ResetFrontAxle() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFrontAxle() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRearAxle() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetAdditionalAxles() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAdditionalAxles() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IBoundingBox. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IBoundingBox)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class BoundingBoxImpl: public BaseImpl, public IBoundingBoxWriter, public std::enable_shared_from_this<BoundingBoxImpl> 
        {
        private:
            bool _isSetCenter = false;
            std::shared_ptr<ICenterWriter> _center {};
            bool _isSetDimensions = false;
            std::shared_ptr<IDimensionsWriter> _dimensions {};

        public:

            OPENSCENARIOLIB_EXP BoundingBoxImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ICenter> GetCenter() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDimensions> GetDimensions() const override;


            OPENSCENARIOLIB_EXP void SetCenter(std::shared_ptr<ICenterWriter> center) override;

            OPENSCENARIOLIB_EXP void SetDimensions(std::shared_ptr<IDimensionsWriter> dimensions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICenterWriter> GetWriterCenter() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDimensionsWriter> GetWriterDimensions() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCenter() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDimensions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IBrake. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IBrake)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class BrakeImpl: public BaseImpl, public IBrakeWriter, public std::enable_shared_from_this<BrakeImpl> 
        {
        private:
            bool _isSetMaxRate = false;
            double _maxRate {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP BrakeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMaxRate() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetMaxRate(const double maxRate) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsMaxRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetMaxRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IBrakeInput. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IBrakeInput)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class BrakeInputImpl: public BaseImpl, public IBrakeInputWriter, public std::enable_shared_from_this<BrakeInputImpl> 
        {
        private:
            bool _isSetBrakePercent = false;
            std::shared_ptr<IBrakeWriter> _brakePercent {};
            bool _isSetBrakeForce = false;
            std::shared_ptr<IBrakeWriter> _brakeForce {};

        public:

            OPENSCENARIOLIB_EXP BrakeInputImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IBrake> GetBrakePercent() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrake> GetBrakeForce() const override;


            OPENSCENARIOLIB_EXP void SetBrakePercent(std::shared_ptr<IBrakeWriter> brakePercent) override;

            OPENSCENARIOLIB_EXP void SetBrakeForce(std::shared_ptr<IBrakeWriter> brakeForce) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeWriter> GetWriterBrakePercent() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeWriter> GetWriterBrakeForce() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetBrakePercent() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetBrakeForce() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IByEntityCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByEntityCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByEntityConditionImpl: public BaseImpl, public IByEntityConditionWriter, public std::enable_shared_from_this<ByEntityConditionImpl> 
        {
        private:
            bool _isSetTriggeringEntities = false;
            std::shared_ptr<ITriggeringEntitiesWriter> _triggeringEntities {};
            bool _isSetEntityCondition = false;
            std::shared_ptr<IEntityConditionWriter> _entityCondition {};

        public:

            OPENSCENARIOLIB_EXP ByEntityConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggeringEntities> GetTriggeringEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityCondition> GetEntityCondition() const override;


            OPENSCENARIOLIB_EXP void SetTriggeringEntities(std::shared_ptr<ITriggeringEntitiesWriter> triggeringEntities) override;

            OPENSCENARIOLIB_EXP void SetEntityCondition(std::shared_ptr<IEntityConditionWriter> entityCondition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggeringEntitiesWriter> GetWriterTriggeringEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityConditionWriter> GetWriterEntityCondition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTriggeringEntities() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityCondition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IByObjectType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByObjectType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByObjectTypeImpl: public BaseImpl, public IByObjectTypeWriter, public std::enable_shared_from_this<ByObjectTypeImpl> 
        {
        private:
            bool _isSetType = false;
            ObjectType _type {};

        public:

            OPENSCENARIOLIB_EXP ByObjectTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ObjectType GetType() const override;


            OPENSCENARIOLIB_EXP void SetType(const ObjectType type) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override;

            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IByType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByTypeImpl: public BaseImpl, public IByTypeWriter, public std::enable_shared_from_this<ByTypeImpl> 
        {
        private:
            bool _isSetObjectType = false;
            ObjectType _objectType {};

        public:

            OPENSCENARIOLIB_EXP ByTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ObjectType GetObjectType() const override;


            OPENSCENARIOLIB_EXP void SetObjectType(const ObjectType objectType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToObjectType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromObjectType() const override;

            OPENSCENARIOLIB_EXP bool IsObjectTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetObjectType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IByValueCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IByValueCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ByValueConditionImpl: public BaseImpl, public IByValueConditionWriter, public std::enable_shared_from_this<ByValueConditionImpl> 
        {
        private:
            bool _isSetParameterCondition = false;
            std::shared_ptr<IParameterConditionWriter> _parameterCondition {};
            bool _isSetTimeOfDayCondition = false;
            std::shared_ptr<ITimeOfDayConditionWriter> _timeOfDayCondition {};
            bool _isSetSimulationTimeCondition = false;
            std::shared_ptr<ISimulationTimeConditionWriter> _simulationTimeCondition {};
            bool _isSetStoryboardElementStateCondition = false;
            std::shared_ptr<IStoryboardElementStateConditionWriter> _storyboardElementStateCondition {};
            bool _isSetUserDefinedValueCondition = false;
            std::shared_ptr<IUserDefinedValueConditionWriter> _userDefinedValueCondition {};
            bool _isSetTrafficSignalCondition = false;
            std::shared_ptr<ITrafficSignalConditionWriter> _trafficSignalCondition {};
            bool _isSetTrafficSignalControllerCondition = false;
            std::shared_ptr<ITrafficSignalControllerConditionWriter> _trafficSignalControllerCondition {};
            bool _isSetVariableCondition = false;
            std::shared_ptr<IVariableConditionWriter> _variableCondition {};

        public:

            OPENSCENARIOLIB_EXP ByValueConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterCondition> GetParameterCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayCondition> GetTimeOfDayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISimulationTimeCondition> GetSimulationTimeCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardElementStateCondition> GetStoryboardElementStateCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedValueCondition> GetUserDefinedValueCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalCondition> GetTrafficSignalCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerCondition> GetTrafficSignalControllerCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableCondition> GetVariableCondition() const override;


            OPENSCENARIOLIB_EXP void SetParameterCondition(std::shared_ptr<IParameterConditionWriter> parameterCondition) override;

            OPENSCENARIOLIB_EXP void SetTimeOfDayCondition(std::shared_ptr<ITimeOfDayConditionWriter> timeOfDayCondition) override;

            OPENSCENARIOLIB_EXP void SetSimulationTimeCondition(std::shared_ptr<ISimulationTimeConditionWriter> simulationTimeCondition) override;

            OPENSCENARIOLIB_EXP void SetStoryboardElementStateCondition(std::shared_ptr<IStoryboardElementStateConditionWriter> storyboardElementStateCondition) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedValueCondition(std::shared_ptr<IUserDefinedValueConditionWriter> userDefinedValueCondition) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalCondition(std::shared_ptr<ITrafficSignalConditionWriter> trafficSignalCondition) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerCondition(std::shared_ptr<ITrafficSignalControllerConditionWriter> trafficSignalControllerCondition) override;

            OPENSCENARIOLIB_EXP void SetVariableCondition(std::shared_ptr<IVariableConditionWriter> variableCondition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterConditionWriter> GetWriterParameterCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayConditionWriter> GetWriterTimeOfDayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISimulationTimeConditionWriter> GetWriterSimulationTimeCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardElementStateConditionWriter> GetWriterStoryboardElementStateCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedValueConditionWriter> GetWriterUserDefinedValueCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalConditionWriter> GetWriterTrafficSignalCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerConditionWriter> GetWriterTrafficSignalControllerCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableConditionWriter> GetWriterVariableCondition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeOfDayCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSimulationTimeCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStoryboardElementStateCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedValueCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalControllerCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableCondition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICatalog. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalog)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogImpl: public BaseImpl, public ICatalogWriter, public std::enable_shared_from_this<CatalogImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetVehicles = false;
            std::vector<std::shared_ptr<IVehicleWriter>> _vehicles {};
            bool _isSetControllers = false;
            std::vector<std::shared_ptr<IControllerWriter>> _controllers {};
            bool _isSetPedestrians = false;
            std::vector<std::shared_ptr<IPedestrianWriter>> _pedestrians {};
            bool _isSetMiscObjects = false;
            std::vector<std::shared_ptr<IMiscObjectWriter>> _miscObjects {};
            bool _isSetEnvironments = false;
            std::vector<std::shared_ptr<IEnvironmentWriter>> _environments {};
            bool _isSetManeuvers = false;
            std::vector<std::shared_ptr<IManeuverWriter>> _maneuvers {};
            bool _isSetTrajectories = false;
            std::vector<std::shared_ptr<ITrajectoryWriter>> _trajectories {};
            bool _isSetRoutes = false;
            std::vector<std::shared_ptr<IRouteWriter>> _routes {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP CatalogImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicle>> GetVehicles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleWriter>> GetWriterVehicles() const override;
            OPENSCENARIOLIB_EXP int GetVehiclesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicle> GetVehiclesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IController>> GetControllers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerWriter>> GetWriterControllers() const override;
            OPENSCENARIOLIB_EXP int GetControllersSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetControllersAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrian>> GetPedestrians() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrianWriter>> GetWriterPedestrians() const override;
            OPENSCENARIOLIB_EXP int GetPedestriansSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrian> GetPedestriansAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMiscObject>> GetMiscObjects() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMiscObjectWriter>> GetWriterMiscObjects() const override;
            OPENSCENARIOLIB_EXP int GetMiscObjectsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObject> GetMiscObjectsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEnvironment>> GetEnvironments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEnvironmentWriter>> GetWriterEnvironments() const override;
            OPENSCENARIOLIB_EXP int GetEnvironmentsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironment> GetEnvironmentsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuver>> GetManeuvers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverWriter>> GetWriterManeuvers() const override;
            OPENSCENARIOLIB_EXP int GetManeuversSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuver> GetManeuversAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrajectory>> GetTrajectories() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrajectoryWriter>> GetWriterTrajectories() const override;
            OPENSCENARIOLIB_EXP int GetTrajectoriesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectory> GetTrajectoriesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoute>> GetRoutes() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRouteWriter>> GetWriterRoutes() const override;
            OPENSCENARIOLIB_EXP int GetRoutesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoutesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetVehicles(std::vector<std::shared_ptr<IVehicleWriter>>& vehicles) override;

            OPENSCENARIOLIB_EXP void SetControllers(std::vector<std::shared_ptr<IControllerWriter>>& controllers) override;

            OPENSCENARIOLIB_EXP void SetPedestrians(std::vector<std::shared_ptr<IPedestrianWriter>>& pedestrians) override;

            OPENSCENARIOLIB_EXP void SetMiscObjects(std::vector<std::shared_ptr<IMiscObjectWriter>>& miscObjects) override;

            OPENSCENARIOLIB_EXP void SetEnvironments(std::vector<std::shared_ptr<IEnvironmentWriter>>& environments) override;

            OPENSCENARIOLIB_EXP void SetManeuvers(std::vector<std::shared_ptr<IManeuverWriter>>& maneuvers) override;

            OPENSCENARIOLIB_EXP void SetTrajectories(std::vector<std::shared_ptr<ITrajectoryWriter>>& trajectories) override;

            OPENSCENARIOLIB_EXP void SetRoutes(std::vector<std::shared_ptr<IRouteWriter>>& routes) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVehicles() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicles() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetControllers() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetControllers() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPedestrians() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPedestrians() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMiscObjects() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMiscObjects() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetEnvironments() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEnvironments() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetManeuvers() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetManeuvers() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrajectories() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectories() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoutes() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutes() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICatalogDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogDefinitionImpl: public BaseImpl, public ICatalogDefinitionWriter, public std::enable_shared_from_this<CatalogDefinitionImpl> 
        {
        private:
            bool _isSetCatalog = false;
            std::shared_ptr<ICatalogWriter> _catalog {};

        public:

            OPENSCENARIOLIB_EXP CatalogDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalog> GetCatalog() const override;


            OPENSCENARIOLIB_EXP void SetCatalog(std::shared_ptr<ICatalogWriter> catalog) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogWriter> GetWriterCatalog() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalog() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICatalogLocations. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogLocations)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogLocationsImpl: public BaseImpl, public ICatalogLocationsWriter, public std::enable_shared_from_this<CatalogLocationsImpl> 
        {
        private:
            bool _isSetVehicleCatalog = false;
            std::shared_ptr<IVehicleCatalogLocationWriter> _vehicleCatalog {};
            bool _isSetControllerCatalog = false;
            std::shared_ptr<IControllerCatalogLocationWriter> _controllerCatalog {};
            bool _isSetPedestrianCatalog = false;
            std::shared_ptr<IPedestrianCatalogLocationWriter> _pedestrianCatalog {};
            bool _isSetMiscObjectCatalog = false;
            std::shared_ptr<IMiscObjectCatalogLocationWriter> _miscObjectCatalog {};
            bool _isSetEnvironmentCatalog = false;
            std::shared_ptr<IEnvironmentCatalogLocationWriter> _environmentCatalog {};
            bool _isSetManeuverCatalog = false;
            std::shared_ptr<IManeuverCatalogLocationWriter> _maneuverCatalog {};
            bool _isSetTrajectoryCatalog = false;
            std::shared_ptr<ITrajectoryCatalogLocationWriter> _trajectoryCatalog {};
            bool _isSetRouteCatalog = false;
            std::shared_ptr<IRouteCatalogLocationWriter> _routeCatalog {};

        public:

            OPENSCENARIOLIB_EXP CatalogLocationsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCatalogLocation> GetVehicleCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerCatalogLocation> GetControllerCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianCatalogLocation> GetPedestrianCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectCatalogLocation> GetMiscObjectCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentCatalogLocation> GetEnvironmentCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverCatalogLocation> GetManeuverCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryCatalogLocation> GetTrajectoryCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteCatalogLocation> GetRouteCatalog() const override;


            OPENSCENARIOLIB_EXP void SetVehicleCatalog(std::shared_ptr<IVehicleCatalogLocationWriter> vehicleCatalog) override;

            OPENSCENARIOLIB_EXP void SetControllerCatalog(std::shared_ptr<IControllerCatalogLocationWriter> controllerCatalog) override;

            OPENSCENARIOLIB_EXP void SetPedestrianCatalog(std::shared_ptr<IPedestrianCatalogLocationWriter> pedestrianCatalog) override;

            OPENSCENARIOLIB_EXP void SetMiscObjectCatalog(std::shared_ptr<IMiscObjectCatalogLocationWriter> miscObjectCatalog) override;

            OPENSCENARIOLIB_EXP void SetEnvironmentCatalog(std::shared_ptr<IEnvironmentCatalogLocationWriter> environmentCatalog) override;

            OPENSCENARIOLIB_EXP void SetManeuverCatalog(std::shared_ptr<IManeuverCatalogLocationWriter> maneuverCatalog) override;

            OPENSCENARIOLIB_EXP void SetTrajectoryCatalog(std::shared_ptr<ITrajectoryCatalogLocationWriter> trajectoryCatalog) override;

            OPENSCENARIOLIB_EXP void SetRouteCatalog(std::shared_ptr<IRouteCatalogLocationWriter> routeCatalog) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCatalogLocationWriter> GetWriterVehicleCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerCatalogLocationWriter> GetWriterControllerCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianCatalogLocationWriter> GetWriterPedestrianCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectCatalogLocationWriter> GetWriterMiscObjectCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentCatalogLocationWriter> GetWriterEnvironmentCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuverCatalogLocationWriter> GetWriterManeuverCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryCatalogLocationWriter> GetWriterTrajectoryCatalog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteCatalogLocationWriter> GetWriterRouteCatalog() const override;
            OPENSCENARIOLIB_EXP virtual void ResetVehicleCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetControllerCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPedestrianCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPedestrianCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMiscObjectCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMiscObjectCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetEnvironmentCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEnvironmentCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetManeuverCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetManeuverCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrajectoryCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectoryCatalog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRouteCatalog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRouteCatalog() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICatalogReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICatalogReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CatalogReferenceImpl: public BaseImpl, public ICatalogReferenceWriter, public std::enable_shared_from_this<CatalogReferenceImpl> 
        {
        private:
            bool _isSetCatalogName = false;
            std::string _catalogName {};
            bool _isSetEntryName = false;
            std::string _entryName {};
            bool _isSetParameterAssignments = false;
            std::vector<std::shared_ptr<IParameterAssignmentWriter>> _parameterAssignments {};
            bool _isSetRef = false;
            std::shared_ptr<ICatalogElement> _ref {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP CatalogReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetCatalogName() const override;
            OPENSCENARIOLIB_EXP std::string GetEntryName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignment>> GetParameterAssignments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignmentWriter>> GetWriterParameterAssignments() const override;
            OPENSCENARIOLIB_EXP int GetParameterAssignmentsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAssignment> GetParameterAssignmentsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogElement> GetRef() const override;


            OPENSCENARIOLIB_EXP void SetCatalogName(const std::string catalogName) override;

            OPENSCENARIOLIB_EXP void SetEntryName(const std::string entryName) override;

            OPENSCENARIOLIB_EXP void SetParameterAssignments(std::vector<std::shared_ptr<IParameterAssignmentWriter>>& parameterAssignments) override;

            OPENSCENARIOLIB_EXP void SetRef(const std::shared_ptr<ICatalogElement> ref) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCatalogName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntryName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCatalogName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntryName() const override;

            OPENSCENARIOLIB_EXP bool IsCatalogNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntryNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntryName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterAssignments() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterAssignments() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICenter. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICenter)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CenterImpl: public BaseImpl, public ICenterWriter, public std::enable_shared_from_this<CenterImpl> 
        {
        private:
            bool _isSetX = false;
            double _x {};
            bool _isSetY = false;
            double _y {};
            bool _isSetZ = false;
            double _z {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP CenterImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetX() const override;
            OPENSCENARIOLIB_EXP double GetY() const override;
            OPENSCENARIOLIB_EXP double GetZ() const override;


            OPENSCENARIOLIB_EXP void SetX(const double x) override;

            OPENSCENARIOLIB_EXP void SetY(const double y) override;

            OPENSCENARIOLIB_EXP void SetZ(const double z) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToX(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToY(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToZ(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromX() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromY() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromZ() const override;

            OPENSCENARIOLIB_EXP bool IsXParameterized() override;
            OPENSCENARIOLIB_EXP bool IsYParameterized() override;
            OPENSCENARIOLIB_EXP bool IsZParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetX() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetY() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetZ() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICentralSwarmObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICentralSwarmObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CentralSwarmObjectImpl: public BaseImpl, public ICentralSwarmObjectWriter, public std::enable_shared_from_this<CentralSwarmObjectImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;

        public:

            OPENSCENARIOLIB_EXP CentralSwarmObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IClothoid. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IClothoid)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ClothoidImpl: public BaseImpl, public IClothoidWriter, public std::enable_shared_from_this<ClothoidImpl> 
        {
        private:
            bool _isSetCurvature = false;
            double _curvature {};
            bool _isSetCurvatureDot = false;
            double _curvatureDot {};
            bool _isSetCurvaturePrime = false;
            double _curvaturePrime {};
            bool _isSetLength = false;
            double _length {};
            bool _isSetStartTime = false;
            double _startTime {};
            bool _isSetStopTime = false;
            double _stopTime {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ClothoidImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetCurvature() const override;
            OPENSCENARIOLIB_EXP double GetCurvatureDot() const override;
            OPENSCENARIOLIB_EXP double GetCurvaturePrime() const override;
            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP double GetStartTime() const override;
            OPENSCENARIOLIB_EXP double GetStopTime() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetCurvature(const double curvature) override;

            OPENSCENARIOLIB_EXP void SetCurvatureDot(const double curvatureDot) override;

            OPENSCENARIOLIB_EXP void SetCurvaturePrime(const double curvaturePrime) override;

            OPENSCENARIOLIB_EXP void SetLength(const double length) override;

            OPENSCENARIOLIB_EXP void SetStartTime(const double startTime) override;

            OPENSCENARIOLIB_EXP void SetStopTime(const double stopTime) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvature(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvatureDot(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvaturePrime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToStartTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToStopTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvature() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvatureDot() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvaturePrime() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromStartTime() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromStopTime() const override;

            OPENSCENARIOLIB_EXP bool IsCurvatureParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCurvatureDotParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCurvaturePrimeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStartTimeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStopTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCurvature() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCurvatureDot() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCurvatureDot() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCurvaturePrime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCurvaturePrime() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLength() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStartTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStartTime() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStopTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStopTime() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IClothoidSpline. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IClothoidSpline)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ClothoidSplineImpl: public BaseImpl, public IClothoidSplineWriter, public std::enable_shared_from_this<ClothoidSplineImpl> 
        {
        private:
            bool _isSetTimeEnd = false;
            double _timeEnd {};
            bool _isSetSegments = false;
            std::vector<std::shared_ptr<IClothoidSplineSegmentWriter>> _segments {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ClothoidSplineImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTimeEnd() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IClothoidSplineSegment>> GetSegments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IClothoidSplineSegmentWriter>> GetWriterSegments() const override;
            OPENSCENARIOLIB_EXP int GetSegmentsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoidSplineSegment> GetSegmentsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetTimeEnd(const double timeEnd) override;

            OPENSCENARIOLIB_EXP void SetSegments(std::vector<std::shared_ptr<IClothoidSplineSegmentWriter>>& segments) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTimeEnd(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTimeEnd() const override;

            OPENSCENARIOLIB_EXP bool IsTimeEndParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetTimeEnd() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeEnd() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSegments() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IClothoidSplineSegment. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IClothoidSplineSegment)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ClothoidSplineSegmentImpl: public BaseImpl, public IClothoidSplineSegmentWriter, public std::enable_shared_from_this<ClothoidSplineSegmentImpl> 
        {
        private:
            bool _isSetCurvatureEnd = false;
            double _curvatureEnd {};
            bool _isSetCurvatureStart = false;
            double _curvatureStart {};
            bool _isSetHOffset = false;
            double _hOffset {};
            bool _isSetLength = false;
            double _length {};
            bool _isSetTimeStart = false;
            double _timeStart {};
            bool _isSetPositionStart = false;
            std::shared_ptr<IPositionWriter> _positionStart {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ClothoidSplineSegmentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetCurvatureEnd() const override;
            OPENSCENARIOLIB_EXP double GetCurvatureStart() const override;
            OPENSCENARIOLIB_EXP double GetHOffset() const override;
            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP double GetTimeStart() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPositionStart() const override;


            OPENSCENARIOLIB_EXP void SetCurvatureEnd(const double curvatureEnd) override;

            OPENSCENARIOLIB_EXP void SetCurvatureStart(const double curvatureStart) override;

            OPENSCENARIOLIB_EXP void SetHOffset(const double hOffset) override;

            OPENSCENARIOLIB_EXP void SetLength(const double length) override;

            OPENSCENARIOLIB_EXP void SetTimeStart(const double timeStart) override;

            OPENSCENARIOLIB_EXP void SetPositionStart(std::shared_ptr<IPositionWriter> positionStart) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvatureEnd(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCurvatureStart(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToHOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTimeStart(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvatureEnd() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCurvatureStart() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromHOffset() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTimeStart() const override;

            OPENSCENARIOLIB_EXP bool IsCurvatureEndParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCurvatureStartParameterized() override;
            OPENSCENARIOLIB_EXP bool IsHOffsetParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTimeStartParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPositionStart() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCurvatureEnd() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCurvatureStart() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetHOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetHOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLength() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTimeStart() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeStart() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPositionStart() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPositionStart() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICollisionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICollisionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CollisionConditionImpl: public BaseImpl, public ICollisionConditionWriter, public std::enable_shared_from_this<CollisionConditionImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<IEntityRefWriter> _entityRef {};
            bool _isSetByType = false;
            std::shared_ptr<IByObjectTypeWriter> _byType {};

        public:

            OPENSCENARIOLIB_EXP CollisionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByObjectType> GetByType() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<IEntityRefWriter> entityRef) override;

            OPENSCENARIOLIB_EXP void SetByType(std::shared_ptr<IByObjectTypeWriter> byType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRefWriter> GetWriterEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByObjectTypeWriter> GetWriterByType() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetByType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IColor. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IColor)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ColorImpl: public BaseImpl, public IColorWriter, public std::enable_shared_from_this<ColorImpl> 
        {
        private:
            bool _isSetColorType = false;
            ColorType _colorType {};
            bool _isSetColorRgb = false;
            std::shared_ptr<IColorRgbWriter> _colorRgb {};
            bool _isSetColorCmyk = false;
            std::shared_ptr<IColorCmykWriter> _colorCmyk {};

        public:

            OPENSCENARIOLIB_EXP ColorImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ColorType GetColorType() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IColorRgb> GetColorRgb() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IColorCmyk> GetColorCmyk() const override;


            OPENSCENARIOLIB_EXP void SetColorType(const ColorType colorType) override;

            OPENSCENARIOLIB_EXP void SetColorRgb(std::shared_ptr<IColorRgbWriter> colorRgb) override;

            OPENSCENARIOLIB_EXP void SetColorCmyk(std::shared_ptr<IColorCmykWriter> colorCmyk) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToColorType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromColorType() const override;

            OPENSCENARIOLIB_EXP bool IsColorTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IColorRgbWriter> GetWriterColorRgb() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IColorCmykWriter> GetWriterColorCmyk() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetColorType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetColorRgb() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetColorCmyk() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IColorCmyk. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IColorCmyk)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ColorCmykImpl: public BaseImpl, public IColorCmykWriter, public std::enable_shared_from_this<ColorCmykImpl> 
        {
        private:
            bool _isSetCyan = false;
            double _cyan {};
            bool _isSetKey = false;
            double _key {};
            bool _isSetMagenta = false;
            double _magenta {};
            bool _isSetYellow = false;
            double _yellow {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ColorCmykImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetCyan() const override;
            OPENSCENARIOLIB_EXP double GetKey() const override;
            OPENSCENARIOLIB_EXP double GetMagenta() const override;
            OPENSCENARIOLIB_EXP double GetYellow() const override;


            OPENSCENARIOLIB_EXP void SetCyan(const double cyan) override;

            OPENSCENARIOLIB_EXP void SetKey(const double key) override;

            OPENSCENARIOLIB_EXP void SetMagenta(const double magenta) override;

            OPENSCENARIOLIB_EXP void SetYellow(const double yellow) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCyan(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToKey(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMagenta(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToYellow(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCyan() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromKey() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMagenta() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromYellow() const override;

            OPENSCENARIOLIB_EXP bool IsCyanParameterized() override;
            OPENSCENARIOLIB_EXP bool IsKeyParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMagentaParameterized() override;
            OPENSCENARIOLIB_EXP bool IsYellowParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetCyan() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetKey() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMagenta() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetYellow() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IColorRgb. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IColorRgb)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ColorRgbImpl: public BaseImpl, public IColorRgbWriter, public std::enable_shared_from_this<ColorRgbImpl> 
        {
        private:
            bool _isSetBlue = false;
            double _blue {};
            bool _isSetGreen = false;
            double _green {};
            bool _isSetRed = false;
            double _red {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ColorRgbImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetBlue() const override;
            OPENSCENARIOLIB_EXP double GetGreen() const override;
            OPENSCENARIOLIB_EXP double GetRed() const override;


            OPENSCENARIOLIB_EXP void SetBlue(const double blue) override;

            OPENSCENARIOLIB_EXP void SetGreen(const double green) override;

            OPENSCENARIOLIB_EXP void SetRed(const double red) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToBlue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToGreen(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromBlue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromGreen() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRed() const override;

            OPENSCENARIOLIB_EXP bool IsBlueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsGreenParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRedParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetBlue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetGreen() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IComponentAnimation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IComponentAnimation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ComponentAnimationImpl: public BaseImpl, public IComponentAnimationWriter, public std::enable_shared_from_this<ComponentAnimationImpl> 
        {
        private:
            bool _isSetVehicleComponent = false;
            std::shared_ptr<IVehicleComponentWriter> _vehicleComponent {};
            bool _isSetUserDefinedComponent = false;
            std::shared_ptr<IUserDefinedComponentWriter> _userDefinedComponent {};

        public:

            OPENSCENARIOLIB_EXP ComponentAnimationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleComponent> GetVehicleComponent() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedComponent> GetUserDefinedComponent() const override;


            OPENSCENARIOLIB_EXP void SetVehicleComponent(std::shared_ptr<IVehicleComponentWriter> vehicleComponent) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedComponent(std::shared_ptr<IUserDefinedComponentWriter> userDefinedComponent) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleComponentWriter> GetWriterVehicleComponent() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedComponentWriter> GetWriterUserDefinedComponent() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleComponent() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedComponent() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ConditionImpl: public BaseImpl, public IConditionWriter, public std::enable_shared_from_this<ConditionImpl> 
        {
        private:
            bool _isSetConditionEdge = false;
            ConditionEdge _conditionEdge {};
            bool _isSetDelay = false;
            double _delay {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetByEntityCondition = false;
            std::shared_ptr<IByEntityConditionWriter> _byEntityCondition {};
            bool _isSetByValueCondition = false;
            std::shared_ptr<IByValueConditionWriter> _byValueCondition {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ConditionEdge GetConditionEdge() const override;
            OPENSCENARIOLIB_EXP double GetDelay() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByEntityCondition> GetByEntityCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByValueCondition> GetByValueCondition() const override;


            OPENSCENARIOLIB_EXP void SetConditionEdge(const ConditionEdge conditionEdge) override;

            OPENSCENARIOLIB_EXP void SetDelay(const double delay) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetByEntityCondition(std::shared_ptr<IByEntityConditionWriter> byEntityCondition) override;

            OPENSCENARIOLIB_EXP void SetByValueCondition(std::shared_ptr<IByValueConditionWriter> byValueCondition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToConditionEdge(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDelay(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromConditionEdge() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDelay() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsConditionEdgeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDelayParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IByEntityConditionWriter> GetWriterByEntityCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByValueConditionWriter> GetWriterByValueCondition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetConditionEdge() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDelay() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetByEntityCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetByValueCondition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IConditionGroup. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IConditionGroup)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ConditionGroupImpl: public BaseImpl, public IConditionGroupWriter, public std::enable_shared_from_this<ConditionGroupImpl> 
        {
        private:
            bool _isSetConditions = false;
            std::vector<std::shared_ptr<IConditionWriter>> _conditions {};

        public:

            OPENSCENARIOLIB_EXP ConditionGroupImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICondition>> GetConditions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionWriter>> GetWriterConditions() const override;
            OPENSCENARIOLIB_EXP int GetConditionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICondition> GetConditionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetConditions(std::vector<std::shared_ptr<IConditionWriter>>& conditions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetConditions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IConnectTrailerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IConnectTrailerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ConnectTrailerActionImpl: public BaseImpl, public IConnectTrailerActionWriter, public std::enable_shared_from_this<ConnectTrailerActionImpl> 
        {
        private:
            bool _isSetTrailerRef = false;
            std::shared_ptr<INamedReference<IEntity>> _trailerRef  = nullptr;

        public:

            OPENSCENARIOLIB_EXP ConnectTrailerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetTrailerRef() const override;


            OPENSCENARIOLIB_EXP void SetTrailerRef(std::shared_ptr<INamedReference<IEntity>> trailerRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrailerRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrailerRef() const override;

            OPENSCENARIOLIB_EXP bool IsTrailerRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailerRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IControlPoint. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControlPoint)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControlPointImpl: public BaseImpl, public IControlPointWriter, public std::enable_shared_from_this<ControlPointImpl> 
        {
        private:
            bool _isSetTime = false;
            double _time {};
            bool _isSetWeight = false;
            double _weight {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ControlPointImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTime() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTime(const double time) override;

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTime() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetWeight() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerImpl: public BaseImpl, public IControllerWriter, public std::enable_shared_from_this<ControllerImpl> 
        {
        private:
            bool _isSetControllerType = false;
            ControllerType _controllerType {ControllerType::ControllerTypeEnum::MOVEMENT};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ControllerType GetControllerType() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetControllerType(const ControllerType controllerType) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToControllerType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromControllerType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsControllerTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual void ResetControllerType() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerActionImpl: public BaseImpl, public IControllerActionWriter, public std::enable_shared_from_this<ControllerActionImpl> 
        {
        private:
            bool _isSetAssignControllerAction = false;
            std::shared_ptr<IAssignControllerActionWriter> _assignControllerAction {};
            bool _isSetOverrideControllerValueAction = false;
            std::shared_ptr<IOverrideControllerValueActionWriter> _overrideControllerValueAction {};
            bool _isSetActivateControllerAction = false;
            std::shared_ptr<IActivateControllerActionWriter> _activateControllerAction {};

        public:

            OPENSCENARIOLIB_EXP ControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignControllerAction> GetAssignControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideControllerValueAction> GetOverrideControllerValueAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerAction> GetActivateControllerAction() const override;


            OPENSCENARIOLIB_EXP void SetAssignControllerAction(std::shared_ptr<IAssignControllerActionWriter> assignControllerAction) override;

            OPENSCENARIOLIB_EXP void SetOverrideControllerValueAction(std::shared_ptr<IOverrideControllerValueActionWriter> overrideControllerValueAction) override;

            OPENSCENARIOLIB_EXP void SetActivateControllerAction(std::shared_ptr<IActivateControllerActionWriter> activateControllerAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignControllerActionWriter> GetWriterAssignControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideControllerValueActionWriter> GetWriterOverrideControllerValueAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerActionWriter> GetWriterActivateControllerAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAssignControllerAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOverrideControllerValueAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateControllerAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IControllerCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerCatalogLocationImpl: public BaseImpl, public IControllerCatalogLocationWriter, public std::enable_shared_from_this<ControllerCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP ControllerCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IControllerDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerDistributionImpl: public BaseImpl, public IControllerDistributionWriter, public std::enable_shared_from_this<ControllerDistributionImpl> 
        {
        private:
            bool _isSetControllerDistributionEntries = false;
            std::vector<std::shared_ptr<IControllerDistributionEntryWriter>> _controllerDistributionEntries {};

        public:

            OPENSCENARIOLIB_EXP ControllerDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerDistributionEntry>> GetControllerDistributionEntries() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControllerDistributionEntryWriter>> GetWriterControllerDistributionEntries() const override;
            OPENSCENARIOLIB_EXP int GetControllerDistributionEntriesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistributionEntry> GetControllerDistributionEntriesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetControllerDistributionEntries(std::vector<std::shared_ptr<IControllerDistributionEntryWriter>>& controllerDistributionEntries) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerDistributionEntries() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IControllerDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IControllerDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ControllerDistributionEntryImpl: public BaseImpl, public IControllerDistributionEntryWriter, public std::enable_shared_from_this<ControllerDistributionEntryImpl> 
        {
        private:
            bool _isSetWeight = false;
            double _weight {};
            bool _isSetController = false;
            std::shared_ptr<IControllerWriter> _controller {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ControllerDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetController() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICustomCommandAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICustomCommandAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CustomCommandActionImpl: public BaseImpl, public ICustomCommandActionWriter, public std::enable_shared_from_this<CustomCommandActionImpl> 
        {
        private:
            bool _isSetContent = false;
            std::string _content {};
            bool _isSetType = false;
            std::string _type {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP CustomCommandActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetContent() const override;
            OPENSCENARIOLIB_EXP std::string GetType() const override;


            OPENSCENARIOLIB_EXP void SetContent(const std::string content) override;

            OPENSCENARIOLIB_EXP void SetType(const std::string type) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContent(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContent() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override;

            OPENSCENARIOLIB_EXP bool IsContentParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetContent() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ICustomContent. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ICustomContent)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class CustomContentImpl: public BaseImpl, public ICustomContentWriter, public std::enable_shared_from_this<CustomContentImpl> 
        {
        private:
            bool _isSetContent = false;
            std::string _content {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP CustomContentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetContent() const override;


            OPENSCENARIOLIB_EXP void SetContent(const std::string content) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContent(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContent() const override;

            OPENSCENARIOLIB_EXP bool IsContentParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetContent() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeleteEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeleteEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeleteEntityActionImpl: public BaseImpl, public IDeleteEntityActionWriter, public std::enable_shared_from_this<DeleteEntityActionImpl> 
        {
        private:

        public:

            OPENSCENARIOLIB_EXP DeleteEntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministic. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministic)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicImpl: public BaseImpl, public IDeterministicWriter, public std::enable_shared_from_this<DeterministicImpl> 
        {
        private:
            bool _isSetDeterministicParameterDistributions = false;
            std::vector<std::shared_ptr<IDeterministicParameterDistributionWriter>> _deterministicParameterDistributions {};

        public:

            OPENSCENARIOLIB_EXP DeterministicImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IDeterministicParameterDistribution>> GetDeterministicParameterDistributions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IDeterministicParameterDistributionWriter>> GetWriterDeterministicParameterDistributions() const override;
            OPENSCENARIOLIB_EXP int GetDeterministicParameterDistributionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicParameterDistribution> GetDeterministicParameterDistributionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetDeterministicParameterDistributions(std::vector<std::shared_ptr<IDeterministicParameterDistributionWriter>>& deterministicParameterDistributions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual void ResetDeterministicParameterDistributions() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministicParameterDistributions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministicMultiParameterDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministicMultiParameterDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicMultiParameterDistributionImpl: public BaseImpl, public IDeterministicMultiParameterDistributionWriter, public std::enable_shared_from_this<DeterministicMultiParameterDistributionImpl> 
        {
        private:
            bool _isSetDeterministicMultiParameterDistributionType = false;
            std::shared_ptr<IDeterministicMultiParameterDistributionTypeWriter> _deterministicMultiParameterDistributionType {};

        public:

            OPENSCENARIOLIB_EXP DeterministicMultiParameterDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicMultiParameterDistributionType> GetDeterministicMultiParameterDistributionType() const override;


            OPENSCENARIOLIB_EXP void SetDeterministicMultiParameterDistributionType(std::shared_ptr<IDeterministicMultiParameterDistributionTypeWriter> deterministicMultiParameterDistributionType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicMultiParameterDistributionTypeWriter> GetWriterDeterministicMultiParameterDistributionType() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministicMultiParameterDistributionType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministicMultiParameterDistributionType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministicMultiParameterDistributionType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicMultiParameterDistributionTypeImpl: public BaseImpl, public IDeterministicMultiParameterDistributionTypeWriter, public std::enable_shared_from_this<DeterministicMultiParameterDistributionTypeImpl> 
        {
        private:
            bool _isSetValueSetDistribution = false;
            std::shared_ptr<IValueSetDistributionWriter> _valueSetDistribution {};

        public:

            OPENSCENARIOLIB_EXP DeterministicMultiParameterDistributionTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IValueSetDistribution> GetValueSetDistribution() const override;


            OPENSCENARIOLIB_EXP void SetValueSetDistribution(std::shared_ptr<IValueSetDistributionWriter> valueSetDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IValueSetDistributionWriter> GetWriterValueSetDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetValueSetDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministicParameterDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministicParameterDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicParameterDistributionImpl: public BaseImpl, public IDeterministicParameterDistributionWriter, public std::enable_shared_from_this<DeterministicParameterDistributionImpl> 
        {
        private:
            bool _isSetDeterministicMultiParameterDistribution = false;
            std::shared_ptr<IDeterministicMultiParameterDistributionWriter> _deterministicMultiParameterDistribution {};
            bool _isSetDeterministicSingleParameterDistribution = false;
            std::shared_ptr<IDeterministicSingleParameterDistributionWriter> _deterministicSingleParameterDistribution {};

        public:

            OPENSCENARIOLIB_EXP DeterministicParameterDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicMultiParameterDistribution> GetDeterministicMultiParameterDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicSingleParameterDistribution> GetDeterministicSingleParameterDistribution() const override;


            OPENSCENARIOLIB_EXP void SetDeterministicMultiParameterDistribution(std::shared_ptr<IDeterministicMultiParameterDistributionWriter> deterministicMultiParameterDistribution) override;

            OPENSCENARIOLIB_EXP void SetDeterministicSingleParameterDistribution(std::shared_ptr<IDeterministicSingleParameterDistributionWriter> deterministicSingleParameterDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicMultiParameterDistributionWriter> GetWriterDeterministicMultiParameterDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicSingleParameterDistributionWriter> GetWriterDeterministicSingleParameterDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministicMultiParameterDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministicSingleParameterDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministicSingleParameterDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministicSingleParameterDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicSingleParameterDistributionImpl: public BaseImpl, public IDeterministicSingleParameterDistributionWriter, public std::enable_shared_from_this<DeterministicSingleParameterDistributionImpl> 
        {
        private:
            bool _isSetParameterName = false;
            std::string _parameterName {};
            bool _isSetDeterministicSingleParameterDistributionType = false;
            std::shared_ptr<IDeterministicSingleParameterDistributionTypeWriter> _deterministicSingleParameterDistributionType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP DeterministicSingleParameterDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetParameterName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicSingleParameterDistributionType> GetDeterministicSingleParameterDistributionType() const override;


            OPENSCENARIOLIB_EXP void SetParameterName(const std::string parameterName) override;

            OPENSCENARIOLIB_EXP void SetDeterministicSingleParameterDistributionType(std::shared_ptr<IDeterministicSingleParameterDistributionTypeWriter> deterministicSingleParameterDistributionType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterName() const override;

            OPENSCENARIOLIB_EXP bool IsParameterNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicSingleParameterDistributionTypeWriter> GetWriterDeterministicSingleParameterDistributionType() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministicSingleParameterDistributionType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDeterministicSingleParameterDistributionType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDeterministicSingleParameterDistributionType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DeterministicSingleParameterDistributionTypeImpl: public BaseImpl, public IDeterministicSingleParameterDistributionTypeWriter, public std::enable_shared_from_this<DeterministicSingleParameterDistributionTypeImpl> 
        {
        private:
            bool _isSetDistributionSet = false;
            std::shared_ptr<IDistributionSetWriter> _distributionSet {};
            bool _isSetDistributionRange = false;
            std::shared_ptr<IDistributionRangeWriter> _distributionRange {};
            bool _isSetUserDefinedDistribution = false;
            std::shared_ptr<IUserDefinedDistributionWriter> _userDefinedDistribution {};

        public:

            OPENSCENARIOLIB_EXP DeterministicSingleParameterDistributionTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionSet> GetDistributionSet() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionRange> GetDistributionRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedDistribution> GetUserDefinedDistribution() const override;


            OPENSCENARIOLIB_EXP void SetDistributionSet(std::shared_ptr<IDistributionSetWriter> distributionSet) override;

            OPENSCENARIOLIB_EXP void SetDistributionRange(std::shared_ptr<IDistributionRangeWriter> distributionRange) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedDistribution(std::shared_ptr<IUserDefinedDistributionWriter> userDefinedDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionSetWriter> GetWriterDistributionSet() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionRangeWriter> GetWriterDistributionRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedDistributionWriter> GetWriterUserDefinedDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDistributionSet() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDistributionRange() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDimensions. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDimensions)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DimensionsImpl: public BaseImpl, public IDimensionsWriter, public std::enable_shared_from_this<DimensionsImpl> 
        {
        private:
            bool _isSetHeight = false;
            double _height {};
            bool _isSetLength = false;
            double _length {};
            bool _isSetWidth = false;
            double _width {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DimensionsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetHeight() const override;
            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP double GetWidth() const override;


            OPENSCENARIOLIB_EXP void SetHeight(const double height) override;

            OPENSCENARIOLIB_EXP void SetLength(const double length) override;

            OPENSCENARIOLIB_EXP void SetWidth(const double width) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToHeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWidth(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromHeight() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWidth() const override;

            OPENSCENARIOLIB_EXP bool IsHeightParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWidthParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetHeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLength() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWidth() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDirectionOfTravelDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDirectionOfTravelDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DirectionOfTravelDistributionImpl: public BaseImpl, public IDirectionOfTravelDistributionWriter, public std::enable_shared_from_this<DirectionOfTravelDistributionImpl> 
        {
        private:
            bool _isSetOpposite = false;
            double _opposite {};
            bool _isSetSame = false;
            double _same {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DirectionOfTravelDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetOpposite() const override;
            OPENSCENARIOLIB_EXP double GetSame() const override;


            OPENSCENARIOLIB_EXP void SetOpposite(const double opposite) override;

            OPENSCENARIOLIB_EXP void SetSame(const double same) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOpposite(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSame(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOpposite() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSame() const override;

            OPENSCENARIOLIB_EXP bool IsOppositeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetOpposite() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSame() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDirectory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDirectory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DirectoryImpl: public BaseImpl, public IDirectoryWriter, public std::enable_shared_from_this<DirectoryImpl> 
        {
        private:
            bool _isSetPath = false;
            std::string _path {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP DirectoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetPath() const override;


            OPENSCENARIOLIB_EXP void SetPath(const std::string path) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPath(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPath() const override;

            OPENSCENARIOLIB_EXP bool IsPathParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPath() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDisconnectTrailerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDisconnectTrailerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DisconnectTrailerActionImpl: public BaseImpl, public IDisconnectTrailerActionWriter, public std::enable_shared_from_this<DisconnectTrailerActionImpl> 
        {
        private:

        public:

            OPENSCENARIOLIB_EXP DisconnectTrailerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistanceConditionImpl: public BaseImpl, public IDistanceConditionWriter, public std::enable_shared_from_this<DistanceConditionImpl> 
        {
        private:
            bool _isSetAlongRoute = false;
            bool _alongRoute {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetRelativeDistanceType = false;
            RelativeDistanceType _relativeDistanceType {RelativeDistanceType::RelativeDistanceTypeEnum::EUCLIDIAN_DISTANCE};
            bool _isSetRoutingAlgorithm = false;
            RoutingAlgorithm _routingAlgorithm {RoutingAlgorithm::RoutingAlgorithmEnum::UNDEFINED};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP RelativeDistanceType GetRelativeDistanceType() const override;
            OPENSCENARIOLIB_EXP RoutingAlgorithm GetRoutingAlgorithm() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetRelativeDistanceType(const RelativeDistanceType relativeDistanceType) override;

            OPENSCENARIOLIB_EXP void SetRoutingAlgorithm(const RoutingAlgorithm routingAlgorithm) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRelativeDistanceType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoutingAlgorithm(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRelativeDistanceType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoutingAlgorithm() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRelativeDistanceTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoutingAlgorithmParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAlongRoute() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAlongRoute() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRelativeDistanceType() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeDistanceType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoutingAlgorithm() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutingAlgorithm() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDistributionDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistributionDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistributionDefinitionImpl: public BaseImpl, public IDistributionDefinitionWriter, public std::enable_shared_from_this<DistributionDefinitionImpl> 
        {
        private:
            bool _isSetDeterministic = false;
            std::shared_ptr<IDeterministicWriter> _deterministic {};
            bool _isSetStochastic = false;
            std::shared_ptr<IStochasticWriter> _stochastic {};

        public:

            OPENSCENARIOLIB_EXP DistributionDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministic> GetDeterministic() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStochastic> GetStochastic() const override;


            OPENSCENARIOLIB_EXP void SetDeterministic(std::shared_ptr<IDeterministicWriter> deterministic) override;

            OPENSCENARIOLIB_EXP void SetStochastic(std::shared_ptr<IStochasticWriter> stochastic) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeterministicWriter> GetWriterDeterministic() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStochasticWriter> GetWriterStochastic() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDeterministic() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStochastic() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDistributionRange. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistributionRange)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistributionRangeImpl: public BaseImpl, public IDistributionRangeWriter, public std::enable_shared_from_this<DistributionRangeImpl> 
        {
        private:
            bool _isSetStepWidth = false;
            double _stepWidth {};
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DistributionRangeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetStepWidth() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetStepWidth(const double stepWidth) override;

            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToStepWidth(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromStepWidth() const override;

            OPENSCENARIOLIB_EXP bool IsStepWidthParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStepWidth() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDistributionSet. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistributionSet)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistributionSetImpl: public BaseImpl, public IDistributionSetWriter, public std::enable_shared_from_this<DistributionSetImpl> 
        {
        private:
            bool _isSetElements = false;
            std::vector<std::shared_ptr<IDistributionSetElementWriter>> _elements {};

        public:

            OPENSCENARIOLIB_EXP DistributionSetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IDistributionSetElement>> GetElements() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IDistributionSetElementWriter>> GetWriterElements() const override;
            OPENSCENARIOLIB_EXP int GetElementsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionSetElement> GetElementsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetElements(std::vector<std::shared_ptr<IDistributionSetElementWriter>>& elements) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetElements() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDistributionSetElement. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDistributionSetElement)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DistributionSetElementImpl: public BaseImpl, public IDistributionSetElementWriter, public std::enable_shared_from_this<DistributionSetElementImpl> 
        {
        private:
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP DistributionSetElementImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDomeImage. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDomeImage)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DomeImageImpl: public BaseImpl, public IDomeImageWriter, public std::enable_shared_from_this<DomeImageImpl> 
        {
        private:
            bool _isSetAzimuthOffset = false;
            double _azimuthOffset {0};
            bool _isSetDomeFile = false;
            std::shared_ptr<IFileWriter> _domeFile {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DomeImageImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAzimuthOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetDomeFile() const override;


            OPENSCENARIOLIB_EXP void SetAzimuthOffset(const double azimuthOffset) override;

            OPENSCENARIOLIB_EXP void SetDomeFile(std::shared_ptr<IFileWriter> domeFile) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAzimuthOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAzimuthOffset() const override;

            OPENSCENARIOLIB_EXP bool IsAzimuthOffsetParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterDomeFile() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAzimuthOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAzimuthOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDomeFile() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IDynamicConstraints. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IDynamicConstraints)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class DynamicConstraintsImpl: public BaseImpl, public IDynamicConstraintsWriter, public std::enable_shared_from_this<DynamicConstraintsImpl> 
        {
        private:
            bool _isSetMaxAcceleration = false;
            double _maxAcceleration {};
            bool _isSetMaxAccelerationRate = false;
            double _maxAccelerationRate {};
            bool _isSetMaxDeceleration = false;
            double _maxDeceleration {};
            bool _isSetMaxDecelerationRate = false;
            double _maxDecelerationRate {};
            bool _isSetMaxSpeed = false;
            double _maxSpeed {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP DynamicConstraintsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMaxAcceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxAccelerationRate() const override;
            OPENSCENARIOLIB_EXP double GetMaxDeceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxDecelerationRate() const override;
            OPENSCENARIOLIB_EXP double GetMaxSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMaxAcceleration(const double maxAcceleration) override;

            OPENSCENARIOLIB_EXP void SetMaxAccelerationRate(const double maxAccelerationRate) override;

            OPENSCENARIOLIB_EXP void SetMaxDeceleration(const double maxDeceleration) override;

            OPENSCENARIOLIB_EXP void SetMaxDecelerationRate(const double maxDecelerationRate) override;

            OPENSCENARIOLIB_EXP void SetMaxSpeed(const double maxSpeed) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAcceleration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAccelerationRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDeceleration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDecelerationRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSpeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAcceleration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAccelerationRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDeceleration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDecelerationRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSpeed() const override;

            OPENSCENARIOLIB_EXP bool IsMaxAccelerationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxAccelerationRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxDecelerationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxDecelerationRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxSpeedParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetMaxAcceleration() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxAcceleration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxAccelerationRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxAccelerationRate() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxDeceleration() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxDeceleration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxDecelerationRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxDecelerationRate() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxSpeed() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxSpeed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEndOfRoadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEndOfRoadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EndOfRoadConditionImpl: public BaseImpl, public IEndOfRoadConditionWriter, public std::enable_shared_from_this<EndOfRoadConditionImpl> 
        {
        private:
            bool _isSetDuration = false;
            double _duration {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP EndOfRoadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override;

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDuration() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntitiesImpl: public BaseImpl, public IEntitiesWriter, public std::enable_shared_from_this<EntitiesImpl> 
        {
        private:
            bool _isSetScenarioObjects = false;
            std::vector<std::shared_ptr<IScenarioObjectWriter>> _scenarioObjects {};
            bool _isSetEntitySelections = false;
            std::vector<std::shared_ptr<IEntitySelectionWriter>> _entitySelections {};

        public:

            OPENSCENARIOLIB_EXP EntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IScenarioObject>> GetScenarioObjects() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IScenarioObjectWriter>> GetWriterScenarioObjects() const override;
            OPENSCENARIOLIB_EXP int GetScenarioObjectsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObject> GetScenarioObjectsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntitySelection>> GetEntitySelections() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntitySelectionWriter>> GetWriterEntitySelections() const override;
            OPENSCENARIOLIB_EXP int GetEntitySelectionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntitySelection> GetEntitySelectionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetScenarioObjects(std::vector<std::shared_ptr<IScenarioObjectWriter>>& scenarioObjects) override;

            OPENSCENARIOLIB_EXP void SetEntitySelections(std::vector<std::shared_ptr<IEntitySelectionWriter>>& entitySelections) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual void ResetScenarioObjects() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetScenarioObjects() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetEntitySelections() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntitySelections() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityActionImpl: public BaseImpl, public IEntityActionWriter, public std::enable_shared_from_this<EntityActionImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetAddEntityAction = false;
            std::shared_ptr<IAddEntityActionWriter> _addEntityAction {};
            bool _isSetDeleteEntityAction = false;
            std::shared_ptr<IDeleteEntityActionWriter> _deleteEntityAction {};

        public:

            OPENSCENARIOLIB_EXP EntityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAddEntityAction> GetAddEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeleteEntityAction> GetDeleteEntityAction() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetAddEntityAction(std::shared_ptr<IAddEntityActionWriter> addEntityAction) override;

            OPENSCENARIOLIB_EXP void SetDeleteEntityAction(std::shared_ptr<IDeleteEntityActionWriter> deleteEntityAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAddEntityActionWriter> GetWriterAddEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDeleteEntityActionWriter> GetWriterDeleteEntityAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAddEntityAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDeleteEntityAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityConditionImpl: public BaseImpl, public IEntityConditionWriter, public std::enable_shared_from_this<EntityConditionImpl> 
        {
        private:
            bool _isSetEndOfRoadCondition = false;
            std::shared_ptr<IEndOfRoadConditionWriter> _endOfRoadCondition {};
            bool _isSetCollisionCondition = false;
            std::shared_ptr<ICollisionConditionWriter> _collisionCondition {};
            bool _isSetOffroadCondition = false;
            std::shared_ptr<IOffroadConditionWriter> _offroadCondition {};
            bool _isSetTimeHeadwayCondition = false;
            std::shared_ptr<ITimeHeadwayConditionWriter> _timeHeadwayCondition {};
            bool _isSetTimeToCollisionCondition = false;
            std::shared_ptr<ITimeToCollisionConditionWriter> _timeToCollisionCondition {};
            bool _isSetAccelerationCondition = false;
            std::shared_ptr<IAccelerationConditionWriter> _accelerationCondition {};
            bool _isSetStandStillCondition = false;
            std::shared_ptr<IStandStillConditionWriter> _standStillCondition {};
            bool _isSetSpeedCondition = false;
            std::shared_ptr<ISpeedConditionWriter> _speedCondition {};
            bool _isSetRelativeSpeedCondition = false;
            std::shared_ptr<IRelativeSpeedConditionWriter> _relativeSpeedCondition {};
            bool _isSetTraveledDistanceCondition = false;
            std::shared_ptr<ITraveledDistanceConditionWriter> _traveledDistanceCondition {};
            bool _isSetReachPositionCondition = false;
            std::shared_ptr<IReachPositionConditionWriter> _reachPositionCondition {};
            bool _isSetDistanceCondition = false;
            std::shared_ptr<IDistanceConditionWriter> _distanceCondition {};
            bool _isSetRelativeDistanceCondition = false;
            std::shared_ptr<IRelativeDistanceConditionWriter> _relativeDistanceCondition {};
            bool _isSetRelativeClearanceCondition = false;
            std::shared_ptr<IRelativeClearanceConditionWriter> _relativeClearanceCondition {};
            bool _isSetAngleCondition = false;
            std::shared_ptr<IAngleConditionWriter> _angleCondition {};
            bool _isSetRelativeAngleCondition = false;
            std::shared_ptr<IRelativeAngleConditionWriter> _relativeAngleCondition {};

        public:

            OPENSCENARIOLIB_EXP EntityConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IEndOfRoadCondition> GetEndOfRoadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICollisionCondition> GetCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOffroadCondition> GetOffroadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeHeadwayCondition> GetTimeHeadwayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionCondition> GetTimeToCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAccelerationCondition> GetAccelerationCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStandStillCondition> GetStandStillCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedCondition> GetSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedCondition> GetRelativeSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITraveledDistanceCondition> GetTraveledDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IReachPositionCondition> GetReachPositionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistanceCondition> GetDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeDistanceCondition> GetRelativeDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeClearanceCondition> GetRelativeClearanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAngleCondition> GetAngleCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeAngleCondition> GetRelativeAngleCondition() const override;


            OPENSCENARIOLIB_EXP void SetEndOfRoadCondition(std::shared_ptr<IEndOfRoadConditionWriter> endOfRoadCondition) override;

            OPENSCENARIOLIB_EXP void SetCollisionCondition(std::shared_ptr<ICollisionConditionWriter> collisionCondition) override;

            OPENSCENARIOLIB_EXP void SetOffroadCondition(std::shared_ptr<IOffroadConditionWriter> offroadCondition) override;

            OPENSCENARIOLIB_EXP void SetTimeHeadwayCondition(std::shared_ptr<ITimeHeadwayConditionWriter> timeHeadwayCondition) override;

            OPENSCENARIOLIB_EXP void SetTimeToCollisionCondition(std::shared_ptr<ITimeToCollisionConditionWriter> timeToCollisionCondition) override;

            OPENSCENARIOLIB_EXP void SetAccelerationCondition(std::shared_ptr<IAccelerationConditionWriter> accelerationCondition) override;

            OPENSCENARIOLIB_EXP void SetStandStillCondition(std::shared_ptr<IStandStillConditionWriter> standStillCondition) override;

            OPENSCENARIOLIB_EXP void SetSpeedCondition(std::shared_ptr<ISpeedConditionWriter> speedCondition) override;

            OPENSCENARIOLIB_EXP void SetRelativeSpeedCondition(std::shared_ptr<IRelativeSpeedConditionWriter> relativeSpeedCondition) override;

            OPENSCENARIOLIB_EXP void SetTraveledDistanceCondition(std::shared_ptr<ITraveledDistanceConditionWriter> traveledDistanceCondition) override;

            OPENSCENARIOLIB_EXP void SetReachPositionCondition(std::shared_ptr<IReachPositionConditionWriter> reachPositionCondition) override;

            OPENSCENARIOLIB_EXP void SetDistanceCondition(std::shared_ptr<IDistanceConditionWriter> distanceCondition) override;

            OPENSCENARIOLIB_EXP void SetRelativeDistanceCondition(std::shared_ptr<IRelativeDistanceConditionWriter> relativeDistanceCondition) override;

            OPENSCENARIOLIB_EXP void SetRelativeClearanceCondition(std::shared_ptr<IRelativeClearanceConditionWriter> relativeClearanceCondition) override;

            OPENSCENARIOLIB_EXP void SetAngleCondition(std::shared_ptr<IAngleConditionWriter> angleCondition) override;

            OPENSCENARIOLIB_EXP void SetRelativeAngleCondition(std::shared_ptr<IRelativeAngleConditionWriter> relativeAngleCondition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEndOfRoadConditionWriter> GetWriterEndOfRoadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICollisionConditionWriter> GetWriterCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOffroadConditionWriter> GetWriterOffroadCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeHeadwayConditionWriter> GetWriterTimeHeadwayCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionWriter> GetWriterTimeToCollisionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAccelerationConditionWriter> GetWriterAccelerationCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStandStillConditionWriter> GetWriterStandStillCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedConditionWriter> GetWriterSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedConditionWriter> GetWriterRelativeSpeedCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITraveledDistanceConditionWriter> GetWriterTraveledDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IReachPositionConditionWriter> GetWriterReachPositionCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistanceConditionWriter> GetWriterDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeDistanceConditionWriter> GetWriterRelativeDistanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeClearanceConditionWriter> GetWriterRelativeClearanceCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAngleConditionWriter> GetWriterAngleCondition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeAngleConditionWriter> GetWriterRelativeAngleCondition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEndOfRoadCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCollisionCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOffroadCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeHeadwayCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeToCollisionCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAccelerationCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStandStillCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeSpeedCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTraveledDistanceCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetReachPositionCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDistanceCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeDistanceCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeClearanceCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAngleCondition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeAngleCondition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityDistributionImpl: public BaseImpl, public IEntityDistributionWriter, public std::enable_shared_from_this<EntityDistributionImpl> 
        {
        private:
            bool _isSetEntityDistributionEntry = false;
            std::vector<std::shared_ptr<IEntityDistributionEntryWriter>> _entityDistributionEntry {};

        public:

            OPENSCENARIOLIB_EXP EntityDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityDistributionEntry>> GetEntityDistributionEntry() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityDistributionEntryWriter>> GetWriterEntityDistributionEntry() const override;
            OPENSCENARIOLIB_EXP int GetEntityDistributionEntrySize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityDistributionEntry> GetEntityDistributionEntryAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetEntityDistributionEntry(std::vector<std::shared_ptr<IEntityDistributionEntryWriter>>& entityDistributionEntry) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityDistributionEntry() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityDistributionEntryImpl: public BaseImpl, public IEntityDistributionEntryWriter, public std::enable_shared_from_this<EntityDistributionEntryImpl> 
        {
        private:
            bool _isSetWeight = false;
            double _weight {};
            bool _isSetScenarioObjectTemplate = false;
            std::shared_ptr<IScenarioObjectTemplateWriter> _scenarioObjectTemplate {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP EntityDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObjectTemplate> GetScenarioObjectTemplate() const override;


            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void SetScenarioObjectTemplate(std::shared_ptr<IScenarioObjectTemplateWriter> scenarioObjectTemplate) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObjectTemplateWriter> GetWriterScenarioObjectTemplate() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetScenarioObjectTemplate() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityObjectImpl: public BaseImpl, public IEntityObjectWriter, public std::enable_shared_from_this<EntityObjectImpl> 
        {
        private:
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            bool _isSetVehicle = false;
            std::shared_ptr<IVehicleWriter> _vehicle {};
            bool _isSetPedestrian = false;
            std::shared_ptr<IPedestrianWriter> _pedestrian {};
            bool _isSetMiscObject = false;
            std::shared_ptr<IMiscObjectWriter> _miscObject {};
            bool _isSetExternalObjectReference = false;
            std::shared_ptr<IExternalObjectReferenceWriter> _externalObjectReference {};

        public:

            OPENSCENARIOLIB_EXP EntityObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicle> GetVehicle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrian> GetPedestrian() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObject> GetMiscObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IExternalObjectReference> GetExternalObjectReference() const override;


            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void SetVehicle(std::shared_ptr<IVehicleWriter> vehicle) override;

            OPENSCENARIOLIB_EXP void SetPedestrian(std::shared_ptr<IPedestrianWriter> pedestrian) override;

            OPENSCENARIOLIB_EXP void SetMiscObject(std::shared_ptr<IMiscObjectWriter> miscObject) override;

            OPENSCENARIOLIB_EXP void SetExternalObjectReference(std::shared_ptr<IExternalObjectReferenceWriter> externalObjectReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleWriter> GetWriterVehicle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianWriter> GetWriterPedestrian() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMiscObjectWriter> GetWriterMiscObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IExternalObjectReferenceWriter> GetWriterExternalObjectReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicle() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPedestrian() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMiscObject() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetExternalObjectReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntityRef. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntityRef)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntityRefImpl: public BaseImpl, public IEntityRefWriter, public std::enable_shared_from_this<EntityRefImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;

        public:

            OPENSCENARIOLIB_EXP EntityRefImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEntitySelection. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEntitySelection)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EntitySelectionImpl: public BaseImpl, public IEntitySelectionWriter, public std::enable_shared_from_this<EntitySelectionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetMembers = false;
            std::shared_ptr<ISelectedEntitiesWriter> _members {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP EntitySelectionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISelectedEntities> GetMembers() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetMembers(std::shared_ptr<ISelectedEntitiesWriter> members) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISelectedEntitiesWriter> GetWriterMembers() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMembers() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEnvironment. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironment)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentImpl: public BaseImpl, public IEnvironmentWriter, public std::enable_shared_from_this<EnvironmentImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetTimeOfDay = false;
            std::shared_ptr<ITimeOfDayWriter> _timeOfDay {};
            bool _isSetWeather = false;
            std::shared_ptr<IWeatherWriter> _weather {};
            bool _isSetRoadCondition = false;
            std::shared_ptr<IRoadConditionWriter> _roadCondition {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP EnvironmentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDay> GetTimeOfDay() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWeather> GetWeather() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadCondition> GetRoadCondition() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetTimeOfDay(std::shared_ptr<ITimeOfDayWriter> timeOfDay) override;

            OPENSCENARIOLIB_EXP void SetWeather(std::shared_ptr<IWeatherWriter> weather) override;

            OPENSCENARIOLIB_EXP void SetRoadCondition(std::shared_ptr<IRoadConditionWriter> roadCondition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeOfDayWriter> GetWriterTimeOfDay() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWeatherWriter> GetWriterWeather() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadConditionWriter> GetWriterRoadCondition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTimeOfDay() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeOfDay() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetWeather() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeather() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoadCondition() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadCondition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEnvironmentAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironmentAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentActionImpl: public BaseImpl, public IEnvironmentActionWriter, public std::enable_shared_from_this<EnvironmentActionImpl> 
        {
        private:
            bool _isSetEnvironment = false;
            std::shared_ptr<IEnvironmentWriter> _environment {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};

        public:

            OPENSCENARIOLIB_EXP EnvironmentActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironment> GetEnvironment() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetEnvironment(std::shared_ptr<IEnvironmentWriter> environment) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentWriter> GetWriterEnvironment() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEnvironment() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEnvironmentCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEnvironmentCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EnvironmentCatalogLocationImpl: public BaseImpl, public IEnvironmentCatalogLocationWriter, public std::enable_shared_from_this<EnvironmentCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP EnvironmentCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IEvent. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IEvent)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class EventImpl: public BaseImpl, public IEventWriter, public std::enable_shared_from_this<EventImpl> 
        {
        private:
            bool _isSetMaximumExecutionCount = false;
            uint32_t _maximumExecutionCount {1};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetPriority = false;
            Priority _priority {};
            bool _isSetActions = false;
            std::vector<std::shared_ptr<IActionWriter>> _actions {};
            bool _isSetStartTrigger = false;
            std::shared_ptr<ITriggerWriter> _startTrigger {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP EventImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP uint32_t GetMaximumExecutionCount() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP Priority GetPriority() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAction>> GetActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IActionWriter>> GetWriterActions() const override;
            OPENSCENARIOLIB_EXP int GetActionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAction> GetActionsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStartTrigger() const override;


            OPENSCENARIOLIB_EXP void SetMaximumExecutionCount(const uint32_t maximumExecutionCount) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetPriority(const Priority priority) override;

            OPENSCENARIOLIB_EXP void SetActions(std::vector<std::shared_ptr<IActionWriter>>& actions) override;

            OPENSCENARIOLIB_EXP void SetStartTrigger(std::shared_ptr<ITriggerWriter> startTrigger) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaximumExecutionCount(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPriority(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaximumExecutionCount() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPriority() const override;

            OPENSCENARIOLIB_EXP bool IsMaximumExecutionCountParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPriorityParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStartTrigger() const override;
            OPENSCENARIOLIB_EXP virtual void ResetMaximumExecutionCount() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaximumExecutionCount() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPriority() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetActions() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStartTrigger() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStartTrigger() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IExternalObjectReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IExternalObjectReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ExternalObjectReferenceImpl: public BaseImpl, public IExternalObjectReferenceWriter, public std::enable_shared_from_this<ExternalObjectReferenceImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ExternalObjectReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IFile. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFile)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FileImpl: public BaseImpl, public IFileWriter, public std::enable_shared_from_this<FileImpl> 
        {
        private:
            bool _isSetFilepath = false;
            std::string _filepath {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP FileImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetFilepath() const override;


            OPENSCENARIOLIB_EXP void SetFilepath(const std::string filepath) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFilepath(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFilepath() const override;

            OPENSCENARIOLIB_EXP bool IsFilepathParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetFilepath() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IFileHeader. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFileHeader)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FileHeaderImpl: public BaseImpl, public IFileHeaderWriter, public std::enable_shared_from_this<FileHeaderImpl> 
        {
        private:
            bool _isSetAuthor = false;
            std::string _author {};
            bool _isSetDate = false;
            DateTime _date {};
            bool _isSetDescription = false;
            std::string _description {};
            bool _isSetRevMajor = false;
            uint16_t _revMajor {};
            bool _isSetRevMinor = false;
            uint16_t _revMinor {};
            bool _isSetLicense = false;
            std::shared_ptr<ILicenseWriter> _license {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveUnsignedShortExpression(std::string& attributeKey, unsigned short& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDateTimeExpression(std::string& attributeKey, DateTime& value) override;		
            OPENSCENARIOLIB_EXP FileHeaderImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetAuthor() const override;
            OPENSCENARIOLIB_EXP DateTime GetDate() const override;
            OPENSCENARIOLIB_EXP std::string GetDescription() const override;
            OPENSCENARIOLIB_EXP uint16_t GetRevMajor() const override;
            OPENSCENARIOLIB_EXP uint16_t GetRevMinor() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILicense> GetLicense() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetAuthor(const std::string author) override;

            OPENSCENARIOLIB_EXP void SetDate(const DateTime date) override;

            OPENSCENARIOLIB_EXP void SetDescription(const std::string description) override;

            OPENSCENARIOLIB_EXP void SetRevMajor(const uint16_t revMajor) override;

            OPENSCENARIOLIB_EXP void SetRevMinor(const uint16_t revMinor) override;

            OPENSCENARIOLIB_EXP void SetLicense(std::shared_ptr<ILicenseWriter> license) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAuthor(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDescription(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRevMajor(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRevMinor(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAuthor() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDescription() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRevMajor() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRevMinor() const override;

            OPENSCENARIOLIB_EXP bool IsAuthorParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDescriptionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRevMajorParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRevMinorParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILicenseWriter> GetWriterLicense() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAuthor() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDescription() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRevMajor() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRevMinor() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLicense() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLicense() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IFinalSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFinalSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FinalSpeedImpl: public BaseImpl, public IFinalSpeedWriter, public std::enable_shared_from_this<FinalSpeedImpl> 
        {
        private:
            bool _isSetAbsoluteSpeed = false;
            std::shared_ptr<IAbsoluteSpeedWriter> _absoluteSpeed {};
            bool _isSetRelativeSpeedToMaster = false;
            std::shared_ptr<IRelativeSpeedToMasterWriter> _relativeSpeedToMaster {};

        public:

            OPENSCENARIOLIB_EXP FinalSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteSpeed> GetAbsoluteSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedToMaster> GetRelativeSpeedToMaster() const override;


            OPENSCENARIOLIB_EXP void SetAbsoluteSpeed(std::shared_ptr<IAbsoluteSpeedWriter> absoluteSpeed) override;

            OPENSCENARIOLIB_EXP void SetRelativeSpeedToMaster(std::shared_ptr<IRelativeSpeedToMasterWriter> relativeSpeedToMaster) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteSpeedWriter> GetWriterAbsoluteSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeSpeedToMasterWriter> GetWriterRelativeSpeedToMaster() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAbsoluteSpeed() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeSpeedToMaster() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IFog. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFog)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FogImpl: public BaseImpl, public IFogWriter, public std::enable_shared_from_this<FogImpl> 
        {
        private:
            bool _isSetVisualRange = false;
            double _visualRange {};
            bool _isSetBoundingBox = false;
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP FogImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetVisualRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;


            OPENSCENARIOLIB_EXP void SetVisualRange(const double visualRange) override;

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVisualRange(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVisualRange() const override;

            OPENSCENARIOLIB_EXP bool IsVisualRangeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVisualRange() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetBoundingBox() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetBoundingBox() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IFollowTrajectoryAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IFollowTrajectoryAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class FollowTrajectoryActionImpl: public BaseImpl, public IFollowTrajectoryActionWriter, public std::enable_shared_from_this<FollowTrajectoryActionImpl> 
        {
        private:
            bool _isSetInitialDistanceOffset = false;
            double _initialDistanceOffset {0};
            bool _isSetTrajectory = false;
            std::shared_ptr<ITrajectoryWriter> _trajectory {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            bool _isSetTimeReference = false;
            std::shared_ptr<ITimeReferenceWriter> _timeReference {};
            bool _isSetTrajectoryFollowingMode = false;
            std::shared_ptr<ITrajectoryFollowingModeWriter> _trajectoryFollowingMode {};
            bool _isSetTrajectoryRef = false;
            std::shared_ptr<ITrajectoryRefWriter> _trajectoryRef {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP FollowTrajectoryActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetInitialDistanceOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectory> GetTrajectory() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeReference> GetTimeReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryFollowingMode> GetTrajectoryFollowingMode() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryRef> GetTrajectoryRef() const override;


            OPENSCENARIOLIB_EXP void SetInitialDistanceOffset(const double initialDistanceOffset) override;

            OPENSCENARIOLIB_EXP void SetTrajectory(std::shared_ptr<ITrajectoryWriter> trajectory) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void SetTimeReference(std::shared_ptr<ITimeReferenceWriter> timeReference) override;

            OPENSCENARIOLIB_EXP void SetTrajectoryFollowingMode(std::shared_ptr<ITrajectoryFollowingModeWriter> trajectoryFollowingMode) override;

            OPENSCENARIOLIB_EXP void SetTrajectoryRef(std::shared_ptr<ITrajectoryRefWriter> trajectoryRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToInitialDistanceOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromInitialDistanceOffset() const override;

            OPENSCENARIOLIB_EXP bool IsInitialDistanceOffsetParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryWriter> GetWriterTrajectory() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeReferenceWriter> GetWriterTimeReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryFollowingModeWriter> GetWriterTrajectoryFollowingMode() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryRefWriter> GetWriterTrajectoryRef() const override;
            OPENSCENARIOLIB_EXP virtual void ResetInitialDistanceOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetInitialDistanceOffset() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrajectory() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectory() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCatalogReference() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeReference() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectoryFollowingMode() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrajectoryRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectoryRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IGear. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IGear)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class GearImpl: public BaseImpl, public IGearWriter, public std::enable_shared_from_this<GearImpl> 
        {
        private:
            bool _isSetManualGear = false;
            std::shared_ptr<IManualGearWriter> _manualGear {};
            bool _isSetAutomaticGear = false;
            std::shared_ptr<IAutomaticGearWriter> _automaticGear {};

        public:

            OPENSCENARIOLIB_EXP GearImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IManualGear> GetManualGear() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAutomaticGear> GetAutomaticGear() const override;


            OPENSCENARIOLIB_EXP void SetManualGear(std::shared_ptr<IManualGearWriter> manualGear) override;

            OPENSCENARIOLIB_EXP void SetAutomaticGear(std::shared_ptr<IAutomaticGearWriter> automaticGear) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IManualGearWriter> GetWriterManualGear() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAutomaticGearWriter> GetWriterAutomaticGear() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetManualGear() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAutomaticGear() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IGeoPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IGeoPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class GeoPositionImpl: public BaseImpl, public IGeoPositionWriter, public std::enable_shared_from_this<GeoPositionImpl> 
        {
        private:
            bool _isSetAltitude = false;
            double _altitude {0};
            bool _isSetHeight = false;
            double _height {0};
            bool _isSetLatitude = false;
            double _latitude {0};
            bool _isSetLatitudeDeg = false;
            double _latitudeDeg {};
            bool _isSetLongitude = false;
            double _longitude {0};
            bool _isSetLongitudeDeg = false;
            double _longitudeDeg {0};
            bool _isSetVerticalRoadSelection = false;
            int _verticalRoadSelection {};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP GeoPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAltitude() const override;
            OPENSCENARIOLIB_EXP double GetHeight() const override;
            OPENSCENARIOLIB_EXP double GetLatitude() const override;
            OPENSCENARIOLIB_EXP double GetLatitudeDeg() const override;
            OPENSCENARIOLIB_EXP double GetLongitude() const override;
            OPENSCENARIOLIB_EXP double GetLongitudeDeg() const override;
            OPENSCENARIOLIB_EXP int GetVerticalRoadSelection() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetAltitude(const double altitude) override;

            OPENSCENARIOLIB_EXP void SetHeight(const double height) override;

            OPENSCENARIOLIB_EXP void SetLatitude(const double latitude) override;

            OPENSCENARIOLIB_EXP void SetLatitudeDeg(const double latitudeDeg) override;

            OPENSCENARIOLIB_EXP void SetLongitude(const double longitude) override;

            OPENSCENARIOLIB_EXP void SetLongitudeDeg(const double longitudeDeg) override;

            OPENSCENARIOLIB_EXP void SetVerticalRoadSelection(const int verticalRoadSelection) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAltitude(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToHeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLatitude(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLatitudeDeg(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLongitude(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLongitudeDeg(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVerticalRoadSelection(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAltitude() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromHeight() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLatitude() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLatitudeDeg() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLongitude() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLongitudeDeg() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVerticalRoadSelection() const override;

            OPENSCENARIOLIB_EXP bool IsAltitudeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsHeightParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLatitudeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLatitudeDegParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLongitudeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLongitudeDegParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVerticalRoadSelectionParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAltitude() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAltitude() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetHeight() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetHeight() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLatitude() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLatitude() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLatitudeDeg() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLatitudeDeg() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLongitude() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLongitude() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLongitudeDeg() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLongitudeDeg() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVerticalRoadSelection() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVerticalRoadSelection() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IGlobalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IGlobalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class GlobalActionImpl: public BaseImpl, public IGlobalActionWriter, public std::enable_shared_from_this<GlobalActionImpl> 
        {
        private:
            bool _isSetEnvironmentAction = false;
            std::shared_ptr<IEnvironmentActionWriter> _environmentAction {};
            bool _isSetEntityAction = false;
            std::shared_ptr<IEntityActionWriter> _entityAction {};
            bool _isSetInfrastructureAction = false;
            std::shared_ptr<IInfrastructureActionWriter> _infrastructureAction {};
            bool _isSetSetMonitorAction = false;
            std::shared_ptr<ISetMonitorActionWriter> _setMonitorAction {};
            bool _isSetParameterAction = false;
            std::shared_ptr<IParameterActionWriter> _parameterAction {};
            bool _isSetTrafficAction = false;
            std::shared_ptr<ITrafficActionWriter> _trafficAction {};
            bool _isSetVariableAction = false;
            std::shared_ptr<IVariableActionWriter> _variableAction {};

        public:

            OPENSCENARIOLIB_EXP GlobalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentAction> GetEnvironmentAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityAction> GetEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInfrastructureAction> GetInfrastructureAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISetMonitorAction> GetSetMonitorAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAction> GetParameterAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficAction> GetTrafficAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableAction> GetVariableAction() const override;


            OPENSCENARIOLIB_EXP void SetEnvironmentAction(std::shared_ptr<IEnvironmentActionWriter> environmentAction) override;

            OPENSCENARIOLIB_EXP void SetEntityAction(std::shared_ptr<IEntityActionWriter> entityAction) override;

            OPENSCENARIOLIB_EXP void SetInfrastructureAction(std::shared_ptr<IInfrastructureActionWriter> infrastructureAction) override;

            OPENSCENARIOLIB_EXP void SetSetMonitorAction(std::shared_ptr<ISetMonitorActionWriter> setMonitorAction) override;

            OPENSCENARIOLIB_EXP void SetParameterAction(std::shared_ptr<IParameterActionWriter> parameterAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficAction(std::shared_ptr<ITrafficActionWriter> trafficAction) override;

            OPENSCENARIOLIB_EXP void SetVariableAction(std::shared_ptr<IVariableActionWriter> variableAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEnvironmentActionWriter> GetWriterEnvironmentAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityActionWriter> GetWriterEntityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInfrastructureActionWriter> GetWriterInfrastructureAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISetMonitorActionWriter> GetWriterSetMonitorAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterActionWriter> GetWriterParameterAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficActionWriter> GetWriterTrafficAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableActionWriter> GetWriterVariableAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEnvironmentAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetInfrastructureAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSetMonitorAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IHistogram. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IHistogram)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class HistogramImpl: public BaseImpl, public IHistogramWriter, public std::enable_shared_from_this<HistogramImpl> 
        {
        private:
            bool _isSetBins = false;
            std::vector<std::shared_ptr<IHistogramBinWriter>> _bins {};

        public:

            OPENSCENARIOLIB_EXP HistogramImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IHistogramBin>> GetBins() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IHistogramBinWriter>> GetWriterBins() const override;
            OPENSCENARIOLIB_EXP int GetBinsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IHistogramBin> GetBinsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetBins(std::vector<std::shared_ptr<IHistogramBinWriter>>& bins) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetBins() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IHistogramBin. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IHistogramBin)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class HistogramBinImpl: public BaseImpl, public IHistogramBinWriter, public std::enable_shared_from_this<HistogramBinImpl> 
        {
        private:
            bool _isSetWeight = false;
            double _weight {};
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP HistogramBinImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IInRoutePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInRoutePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InRoutePositionImpl: public BaseImpl, public IInRoutePositionWriter, public std::enable_shared_from_this<InRoutePositionImpl> 
        {
        private:
            bool _isSetFromCurrentEntity = false;
            std::shared_ptr<IPositionOfCurrentEntityWriter> _fromCurrentEntity {};
            bool _isSetFromRoadCoordinates = false;
            std::shared_ptr<IPositionInRoadCoordinatesWriter> _fromRoadCoordinates {};
            bool _isSetFromLaneCoordinates = false;
            std::shared_ptr<IPositionInLaneCoordinatesWriter> _fromLaneCoordinates {};

        public:

            OPENSCENARIOLIB_EXP InRoutePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionOfCurrentEntity> GetFromCurrentEntity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInRoadCoordinates> GetFromRoadCoordinates() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInLaneCoordinates> GetFromLaneCoordinates() const override;


            OPENSCENARIOLIB_EXP void SetFromCurrentEntity(std::shared_ptr<IPositionOfCurrentEntityWriter> fromCurrentEntity) override;

            OPENSCENARIOLIB_EXP void SetFromRoadCoordinates(std::shared_ptr<IPositionInRoadCoordinatesWriter> fromRoadCoordinates) override;

            OPENSCENARIOLIB_EXP void SetFromLaneCoordinates(std::shared_ptr<IPositionInLaneCoordinatesWriter> fromLaneCoordinates) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionOfCurrentEntityWriter> GetWriterFromCurrentEntity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInRoadCoordinatesWriter> GetWriterFromRoadCoordinates() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionInLaneCoordinatesWriter> GetWriterFromLaneCoordinates() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFromCurrentEntity() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFromRoadCoordinates() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFromLaneCoordinates() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IInfrastructureAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInfrastructureAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InfrastructureActionImpl: public BaseImpl, public IInfrastructureActionWriter, public std::enable_shared_from_this<InfrastructureActionImpl> 
        {
        private:
            bool _isSetTrafficSignalAction = false;
            std::shared_ptr<ITrafficSignalActionWriter> _trafficSignalAction {};

        public:

            OPENSCENARIOLIB_EXP InfrastructureActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalAction> GetTrafficSignalAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficSignalAction(std::shared_ptr<ITrafficSignalActionWriter> trafficSignalAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalActionWriter> GetWriterTrafficSignalAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IInit. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInit)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InitImpl: public BaseImpl, public IInitWriter, public std::enable_shared_from_this<InitImpl> 
        {
        private:
            bool _isSetActions = false;
            std::shared_ptr<IInitActionsWriter> _actions {};

        public:

            OPENSCENARIOLIB_EXP InitImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IInitActions> GetActions() const override;


            OPENSCENARIOLIB_EXP void SetActions(std::shared_ptr<IInitActionsWriter> actions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IInitActionsWriter> GetWriterActions() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IInitActions. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IInitActions)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class InitActionsImpl: public BaseImpl, public IInitActionsWriter, public std::enable_shared_from_this<InitActionsImpl> 
        {
        private:
            bool _isSetGlobalActions = false;
            std::vector<std::shared_ptr<IGlobalActionWriter>> _globalActions {};
            bool _isSetUserDefinedActions = false;
            std::vector<std::shared_ptr<IUserDefinedActionWriter>> _userDefinedActions {};
            bool _isSetPrivates = false;
            std::vector<std::shared_ptr<IPrivateWriter>> _privates {};

        public:

            OPENSCENARIOLIB_EXP InitActionsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IGlobalAction>> GetGlobalActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IGlobalActionWriter>> GetWriterGlobalActions() const override;
            OPENSCENARIOLIB_EXP int GetGlobalActionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGlobalAction> GetGlobalActionsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IUserDefinedAction>> GetUserDefinedActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IUserDefinedActionWriter>> GetWriterUserDefinedActions() const override;
            OPENSCENARIOLIB_EXP int GetUserDefinedActionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedAction> GetUserDefinedActionsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivate>> GetPrivates() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateWriter>> GetWriterPrivates() const override;
            OPENSCENARIOLIB_EXP int GetPrivatesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivate> GetPrivatesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetGlobalActions(std::vector<std::shared_ptr<IGlobalActionWriter>>& globalActions) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedActions(std::vector<std::shared_ptr<IUserDefinedActionWriter>>& userDefinedActions) override;

            OPENSCENARIOLIB_EXP void SetPrivates(std::vector<std::shared_ptr<IPrivateWriter>>& privates) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual void ResetGlobalActions() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetGlobalActions() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetUserDefinedActions() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedActions() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPrivates() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPrivates() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IKnot. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IKnot)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class KnotImpl: public BaseImpl, public IKnotWriter, public std::enable_shared_from_this<KnotImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP KnotImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILane. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILane)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneImpl: public BaseImpl, public ILaneWriter, public std::enable_shared_from_this<LaneImpl> 
        {
        private:
            bool _isSetId = false;
            int _id {};

        public:

			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP LaneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP int GetId() const override;


            OPENSCENARIOLIB_EXP void SetId(const int id) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromId() const override;

            OPENSCENARIOLIB_EXP bool IsIdParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetId() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILaneChangeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneChangeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneChangeActionImpl: public BaseImpl, public ILaneChangeActionWriter, public std::enable_shared_from_this<LaneChangeActionImpl> 
        {
        private:
            bool _isSetTargetLaneOffset = false;
            double _targetLaneOffset {0};
            bool _isSetLaneChangeActionDynamics = false;
            std::shared_ptr<ITransitionDynamicsWriter> _laneChangeActionDynamics {};
            bool _isSetLaneChangeTarget = false;
            std::shared_ptr<ILaneChangeTargetWriter> _laneChangeTarget {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LaneChangeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamics> GetLaneChangeActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeTarget> GetLaneChangeTarget() const override;


            OPENSCENARIOLIB_EXP void SetTargetLaneOffset(const double targetLaneOffset) override;

            OPENSCENARIOLIB_EXP void SetLaneChangeActionDynamics(std::shared_ptr<ITransitionDynamicsWriter> laneChangeActionDynamics) override;

            OPENSCENARIOLIB_EXP void SetLaneChangeTarget(std::shared_ptr<ILaneChangeTargetWriter> laneChangeTarget) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTargetLaneOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTargetLaneOffset() const override;

            OPENSCENARIOLIB_EXP bool IsTargetLaneOffsetParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamicsWriter> GetWriterLaneChangeActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeTargetWriter> GetWriterLaneChangeTarget() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTargetLaneOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetLaneOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneChangeActionDynamics() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneChangeTarget() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILaneChangeTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneChangeTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneChangeTargetImpl: public BaseImpl, public ILaneChangeTargetWriter, public std::enable_shared_from_this<LaneChangeTargetImpl> 
        {
        private:
            bool _isSetRelativeTargetLane = false;
            std::shared_ptr<IRelativeTargetLaneWriter> _relativeTargetLane {};
            bool _isSetAbsoluteTargetLane = false;
            std::shared_ptr<IAbsoluteTargetLaneWriter> _absoluteTargetLane {};

        public:

            OPENSCENARIOLIB_EXP LaneChangeTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLane> GetRelativeTargetLane() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLane> GetAbsoluteTargetLane() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetLane(std::shared_ptr<IRelativeTargetLaneWriter> relativeTargetLane) override;

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetLane(std::shared_ptr<IAbsoluteTargetLaneWriter> absoluteTargetLane) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneWriter> GetWriterRelativeTargetLane() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneWriter> GetWriterAbsoluteTargetLane() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeTargetLane() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAbsoluteTargetLane() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILaneOffsetAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetActionImpl: public BaseImpl, public ILaneOffsetActionWriter, public std::enable_shared_from_this<LaneOffsetActionImpl> 
        {
        private:
            bool _isSetContinuous = false;
            bool _continuous {};
            bool _isSetLaneOffsetActionDynamics = false;
            std::shared_ptr<ILaneOffsetActionDynamicsWriter> _laneOffsetActionDynamics {};
            bool _isSetLaneOffsetTarget = false;
            std::shared_ptr<ILaneOffsetTargetWriter> _laneOffsetTarget {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP LaneOffsetActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionDynamics> GetLaneOffsetActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetTarget> GetLaneOffsetTarget() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override;

            OPENSCENARIOLIB_EXP void SetLaneOffsetActionDynamics(std::shared_ptr<ILaneOffsetActionDynamicsWriter> laneOffsetActionDynamics) override;

            OPENSCENARIOLIB_EXP void SetLaneOffsetTarget(std::shared_ptr<ILaneOffsetTargetWriter> laneOffsetTarget) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override;

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionDynamicsWriter> GetWriterLaneOffsetActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetTargetWriter> GetWriterLaneOffsetTarget() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetContinuous() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneOffsetActionDynamics() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneOffsetTarget() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILaneOffsetActionDynamics. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetActionDynamics)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetActionDynamicsImpl: public BaseImpl, public ILaneOffsetActionDynamicsWriter, public std::enable_shared_from_this<LaneOffsetActionDynamicsImpl> 
        {
        private:
            bool _isSetDynamicsShape = false;
            DynamicsShape _dynamicsShape {};
            bool _isSetMaxLateralAcc = false;
            double _maxLateralAcc {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LaneOffsetActionDynamicsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DynamicsShape GetDynamicsShape() const override;
            OPENSCENARIOLIB_EXP double GetMaxLateralAcc() const override;


            OPENSCENARIOLIB_EXP void SetDynamicsShape(const DynamicsShape dynamicsShape) override;

            OPENSCENARIOLIB_EXP void SetMaxLateralAcc(const double maxLateralAcc) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsShape(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxLateralAcc(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsShape() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxLateralAcc() const override;

            OPENSCENARIOLIB_EXP bool IsDynamicsShapeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxLateralAccParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicsShape() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxLateralAcc() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxLateralAcc() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILaneOffsetTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILaneOffsetTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LaneOffsetTargetImpl: public BaseImpl, public ILaneOffsetTargetWriter, public std::enable_shared_from_this<LaneOffsetTargetImpl> 
        {
        private:
            bool _isSetRelativeTargetLaneOffset = false;
            std::shared_ptr<IRelativeTargetLaneOffsetWriter> _relativeTargetLaneOffset {};
            bool _isSetAbsoluteTargetLaneOffset = false;
            std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> _absoluteTargetLaneOffset {};

        public:

            OPENSCENARIOLIB_EXP LaneOffsetTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneOffset> GetRelativeTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneOffset> GetAbsoluteTargetLaneOffset() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetLaneOffset(std::shared_ptr<IRelativeTargetLaneOffsetWriter> relativeTargetLaneOffset) override;

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetLaneOffset(std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> absoluteTargetLaneOffset) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetLaneOffsetWriter> GetWriterRelativeTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetLaneOffsetWriter> GetWriterAbsoluteTargetLaneOffset() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeTargetLaneOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAbsoluteTargetLaneOffset() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILanePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILanePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LanePositionImpl: public BaseImpl, public ILanePositionWriter, public std::enable_shared_from_this<LanePositionImpl> 
        {
        private:
            bool _isSetLaneId = false;
            std::string _laneId {};
            bool _isSetOffset = false;
            double _offset {0};
            bool _isSetRoadId = false;
            std::string _roadId {};
            bool _isSetS = false;
            double _s {};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LanePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetLaneId() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP std::string GetRoadId() const override;
            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetLaneId(const std::string laneId) override;

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override;

            OPENSCENARIOLIB_EXP void SetRoadId(const std::string roadId) override;

            OPENSCENARIOLIB_EXP void SetS(const double s) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoadId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneId() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoadId() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override;

            OPENSCENARIOLIB_EXP bool IsLaneIdParameterized() override;
            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoadIdParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneId() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadId() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetS() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILateralAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILateralAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LateralActionImpl: public BaseImpl, public ILateralActionWriter, public std::enable_shared_from_this<LateralActionImpl> 
        {
        private:
            bool _isSetLaneChangeAction = false;
            std::shared_ptr<ILaneChangeActionWriter> _laneChangeAction {};
            bool _isSetLaneOffsetAction = false;
            std::shared_ptr<ILaneOffsetActionWriter> _laneOffsetAction {};
            bool _isSetLateralDistanceAction = false;
            std::shared_ptr<ILateralDistanceActionWriter> _lateralDistanceAction {};

        public:

            OPENSCENARIOLIB_EXP LateralActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeAction> GetLaneChangeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetAction> GetLaneOffsetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralDistanceAction> GetLateralDistanceAction() const override;


            OPENSCENARIOLIB_EXP void SetLaneChangeAction(std::shared_ptr<ILaneChangeActionWriter> laneChangeAction) override;

            OPENSCENARIOLIB_EXP void SetLaneOffsetAction(std::shared_ptr<ILaneOffsetActionWriter> laneOffsetAction) override;

            OPENSCENARIOLIB_EXP void SetLateralDistanceAction(std::shared_ptr<ILateralDistanceActionWriter> lateralDistanceAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneChangeActionWriter> GetWriterLaneChangeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILaneOffsetActionWriter> GetWriterLaneOffsetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralDistanceActionWriter> GetWriterLateralDistanceAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneChangeAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneOffsetAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLateralDistanceAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILateralDistanceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILateralDistanceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LateralDistanceActionImpl: public BaseImpl, public ILateralDistanceActionWriter, public std::enable_shared_from_this<LateralDistanceActionImpl> 
        {
        private:
            bool _isSetContinuous = false;
            bool _continuous {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetDisplacement = false;
            LateralDisplacement _displacement {LateralDisplacement::LateralDisplacementEnum::ANY};
            bool _isSetDistance = false;
            double _distance {0};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetDynamicConstraints = false;
            std::shared_ptr<IDynamicConstraintsWriter> _dynamicConstraints {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LateralDistanceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP LateralDisplacement GetDisplacement() const override;
            OPENSCENARIOLIB_EXP double GetDistance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraints> GetDynamicConstraints() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetDisplacement(const LateralDisplacement displacement) override;

            OPENSCENARIOLIB_EXP void SetDistance(const double distance) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetDynamicConstraints(std::shared_ptr<IDynamicConstraintsWriter> dynamicConstraints) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDisplacement(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDistance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDisplacement() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDisplacementParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDistanceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraintsWriter> GetWriterDynamicConstraints() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetContinuous() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDisplacement() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDisplacement() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDistance() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDistance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDynamicConstraints() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicConstraints() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILicense. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILicense)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LicenseImpl: public BaseImpl, public ILicenseWriter, public std::enable_shared_from_this<LicenseImpl> 
        {
        private:
            bool _isSetText = false;
            std::string _text {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetResource = false;
            std::string _resource {};
            bool _isSetSpdxId = false;
            std::string _spdxId {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP LicenseImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetText() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetResource() const override;
            OPENSCENARIOLIB_EXP std::string GetSpdxId() const override;


            OPENSCENARIOLIB_EXP void SetText(const std::string text) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetResource(const std::string resource) override;

            OPENSCENARIOLIB_EXP void SetSpdxId(const std::string spdxId) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToText(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToResource(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpdxId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromText() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromResource() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpdxId() const override;

            OPENSCENARIOLIB_EXP bool IsTextParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsResourceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSpdxIdParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetText() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetText() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetResource() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetResource() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSpdxId() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSpdxId() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILightState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILightState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LightStateImpl: public BaseImpl, public ILightStateWriter, public std::enable_shared_from_this<LightStateImpl> 
        {
        private:
            bool _isSetFlashingOffDuration = false;
            double _flashingOffDuration {0.5};
            bool _isSetFlashingOnDuration = false;
            double _flashingOnDuration {0.5};
            bool _isSetLuminousIntensity = false;
            double _luminousIntensity {};
            bool _isSetMode = false;
            LightMode _mode {};
            bool _isSetColor = false;
            std::shared_ptr<IColorWriter> _color {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LightStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetFlashingOffDuration() const override;
            OPENSCENARIOLIB_EXP double GetFlashingOnDuration() const override;
            OPENSCENARIOLIB_EXP double GetLuminousIntensity() const override;
            OPENSCENARIOLIB_EXP LightMode GetMode() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IColor> GetColor() const override;


            OPENSCENARIOLIB_EXP void SetFlashingOffDuration(const double flashingOffDuration) override;

            OPENSCENARIOLIB_EXP void SetFlashingOnDuration(const double flashingOnDuration) override;

            OPENSCENARIOLIB_EXP void SetLuminousIntensity(const double luminousIntensity) override;

            OPENSCENARIOLIB_EXP void SetMode(const LightMode mode) override;

            OPENSCENARIOLIB_EXP void SetColor(std::shared_ptr<IColorWriter> color) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFlashingOffDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFlashingOnDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLuminousIntensity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMode(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFlashingOffDuration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFlashingOnDuration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLuminousIntensity() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMode() const override;

            OPENSCENARIOLIB_EXP bool IsFlashingOffDurationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFlashingOnDurationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLuminousIntensityParameterized() override;
            OPENSCENARIOLIB_EXP bool IsModeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IColorWriter> GetWriterColor() const override;
            OPENSCENARIOLIB_EXP virtual void ResetFlashingOffDuration() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFlashingOffDuration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFlashingOnDuration() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFlashingOnDuration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLuminousIntensity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLuminousIntensity() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMode() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetColor() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetColor() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILightStateAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILightStateAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LightStateActionImpl: public BaseImpl, public ILightStateActionWriter, public std::enable_shared_from_this<LightStateActionImpl> 
        {
        private:
            bool _isSetTransitionTime = false;
            double _transitionTime {0};
            bool _isSetLightType = false;
            std::shared_ptr<ILightTypeWriter> _lightType {};
            bool _isSetLightState = false;
            std::shared_ptr<ILightStateWriter> _lightState {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LightStateActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTransitionTime() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILightType> GetLightType() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILightState> GetLightState() const override;


            OPENSCENARIOLIB_EXP void SetTransitionTime(const double transitionTime) override;

            OPENSCENARIOLIB_EXP void SetLightType(std::shared_ptr<ILightTypeWriter> lightType) override;

            OPENSCENARIOLIB_EXP void SetLightState(std::shared_ptr<ILightStateWriter> lightState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTransitionTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTransitionTime() const override;

            OPENSCENARIOLIB_EXP bool IsTransitionTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILightTypeWriter> GetWriterLightType() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILightStateWriter> GetWriterLightState() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTransitionTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTransitionTime() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLightType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLightState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILightType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILightType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LightTypeImpl: public BaseImpl, public ILightTypeWriter, public std::enable_shared_from_this<LightTypeImpl> 
        {
        private:
            bool _isSetVehicleLight = false;
            std::shared_ptr<IVehicleLightWriter> _vehicleLight {};
            bool _isSetUserDefinedLight = false;
            std::shared_ptr<IUserDefinedLightWriter> _userDefinedLight {};

        public:

            OPENSCENARIOLIB_EXP LightTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleLight> GetVehicleLight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedLight> GetUserDefinedLight() const override;


            OPENSCENARIOLIB_EXP void SetVehicleLight(std::shared_ptr<IVehicleLightWriter> vehicleLight) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedLight(std::shared_ptr<IUserDefinedLightWriter> userDefinedLight) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleLightWriter> GetWriterVehicleLight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedLightWriter> GetWriterUserDefinedLight() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleLight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedLight() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILogNormalDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILogNormalDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LogNormalDistributionImpl: public BaseImpl, public ILogNormalDistributionWriter, public std::enable_shared_from_this<LogNormalDistributionImpl> 
        {
        private:
            bool _isSetExpectedValue = false;
            double _expectedValue {};
            bool _isSetVariance = false;
            double _variance {};
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LogNormalDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetExpectedValue() const override;
            OPENSCENARIOLIB_EXP double GetVariance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetExpectedValue(const double expectedValue) override;

            OPENSCENARIOLIB_EXP void SetVariance(const double variance) override;

            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToExpectedValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVariance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromExpectedValue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVariance() const override;

            OPENSCENARIOLIB_EXP bool IsExpectedValueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVarianceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetExpectedValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariance() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRange() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILongitudinalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILongitudinalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LongitudinalActionImpl: public BaseImpl, public ILongitudinalActionWriter, public std::enable_shared_from_this<LongitudinalActionImpl> 
        {
        private:
            bool _isSetSpeedAction = false;
            std::shared_ptr<ISpeedActionWriter> _speedAction {};
            bool _isSetLongitudinalDistanceAction = false;
            std::shared_ptr<ILongitudinalDistanceActionWriter> _longitudinalDistanceAction {};
            bool _isSetSpeedProfileAction = false;
            std::shared_ptr<ISpeedProfileActionWriter> _speedProfileAction {};

        public:

            OPENSCENARIOLIB_EXP LongitudinalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedAction> GetSpeedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalDistanceAction> GetLongitudinalDistanceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedProfileAction> GetSpeedProfileAction() const override;


            OPENSCENARIOLIB_EXP void SetSpeedAction(std::shared_ptr<ISpeedActionWriter> speedAction) override;

            OPENSCENARIOLIB_EXP void SetLongitudinalDistanceAction(std::shared_ptr<ILongitudinalDistanceActionWriter> longitudinalDistanceAction) override;

            OPENSCENARIOLIB_EXP void SetSpeedProfileAction(std::shared_ptr<ISpeedProfileActionWriter> speedProfileAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionWriter> GetWriterSpeedAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalDistanceActionWriter> GetWriterLongitudinalDistanceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedProfileActionWriter> GetWriterSpeedProfileAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLongitudinalDistanceAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedProfileAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ILongitudinalDistanceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ILongitudinalDistanceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class LongitudinalDistanceActionImpl: public BaseImpl, public ILongitudinalDistanceActionWriter, public std::enable_shared_from_this<LongitudinalDistanceActionImpl> 
        {
        private:
            bool _isSetContinuous = false;
            bool _continuous {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetDisplacement = false;
            LongitudinalDisplacement _displacement {LongitudinalDisplacement::LongitudinalDisplacementEnum::TRAILING_REFERENCED_ENTITY};
            bool _isSetDistance = false;
            double _distance {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetTimeGap = false;
            double _timeGap {};
            bool _isSetDynamicConstraints = false;
            std::shared_ptr<IDynamicConstraintsWriter> _dynamicConstraints {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP LongitudinalDistanceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP LongitudinalDisplacement GetDisplacement() const override;
            OPENSCENARIOLIB_EXP double GetDistance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP double GetTimeGap() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraints> GetDynamicConstraints() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetDisplacement(const LongitudinalDisplacement displacement) override;

            OPENSCENARIOLIB_EXP void SetDistance(const double distance) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetTimeGap(const double timeGap) override;

            OPENSCENARIOLIB_EXP void SetDynamicConstraints(std::shared_ptr<IDynamicConstraintsWriter> dynamicConstraints) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDisplacement(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDistance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTimeGap(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDisplacement() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTimeGap() const override;

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDisplacementParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDistanceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTimeGapParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraintsWriter> GetWriterDynamicConstraints() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetContinuous() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDisplacement() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDisplacement() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDistance() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDistance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTimeGap() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeGap() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDynamicConstraints() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicConstraints() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IManeuver. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuver)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverImpl: public BaseImpl, public IManeuverWriter, public std::enable_shared_from_this<ManeuverImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetEvents = false;
            std::vector<std::shared_ptr<IEventWriter>> _events {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ManeuverImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEvent>> GetEvents() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEventWriter>> GetWriterEvents() const override;
            OPENSCENARIOLIB_EXP int GetEventsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEvent> GetEventsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetEvents(std::vector<std::shared_ptr<IEventWriter>>& events) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEvents() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IManeuverCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuverCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverCatalogLocationImpl: public BaseImpl, public IManeuverCatalogLocationWriter, public std::enable_shared_from_this<ManeuverCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP ManeuverCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IManeuverGroup. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManeuverGroup)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManeuverGroupImpl: public BaseImpl, public IManeuverGroupWriter, public std::enable_shared_from_this<ManeuverGroupImpl> 
        {
        private:
            bool _isSetMaximumExecutionCount = false;
            uint32_t _maximumExecutionCount {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetActors = false;
            std::shared_ptr<IActorsWriter> _actors {};
            bool _isSetCatalogReferences = false;
            std::vector<std::shared_ptr<ICatalogReferenceWriter>> _catalogReferences {};
            bool _isSetManeuvers = false;
            std::vector<std::shared_ptr<IManeuverWriter>> _maneuvers {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ManeuverGroupImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP uint32_t GetMaximumExecutionCount() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActors> GetActors() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICatalogReference>> GetCatalogReferences() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICatalogReferenceWriter>> GetWriterCatalogReferences() const override;
            OPENSCENARIOLIB_EXP int GetCatalogReferencesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReferencesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuver>> GetManeuvers() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IManeuverWriter>> GetWriterManeuvers() const override;
            OPENSCENARIOLIB_EXP int GetManeuversSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IManeuver> GetManeuversAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetMaximumExecutionCount(const uint32_t maximumExecutionCount) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetActors(std::shared_ptr<IActorsWriter> actors) override;

            OPENSCENARIOLIB_EXP void SetCatalogReferences(std::vector<std::shared_ptr<ICatalogReferenceWriter>>& catalogReferences) override;

            OPENSCENARIOLIB_EXP void SetManeuvers(std::vector<std::shared_ptr<IManeuverWriter>>& maneuvers) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaximumExecutionCount(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaximumExecutionCount() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsMaximumExecutionCountParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IActorsWriter> GetWriterActors() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaximumExecutionCount() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetActors() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCatalogReferences() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReferences() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetManeuvers() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetManeuvers() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IManualGear. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IManualGear)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ManualGearImpl: public BaseImpl, public IManualGearWriter, public std::enable_shared_from_this<ManualGearImpl> 
        {
        private:
            bool _isSetNumber = false;
            int _number {};

        public:

			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP ManualGearImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP int GetNumber() const override;


            OPENSCENARIOLIB_EXP void SetNumber(const int number) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToNumber(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumber() const override;

            OPENSCENARIOLIB_EXP bool IsNumberParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetNumber() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IMiscObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IMiscObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class MiscObjectImpl: public BaseImpl, public IMiscObjectWriter, public std::enable_shared_from_this<MiscObjectImpl> 
        {
        private:
            bool _isSetMass = false;
            double _mass {};
            bool _isSetMiscObjectCategory = false;
            MiscObjectCategory _miscObjectCategory {};
            bool _isSetModel3d = false;
            std::string _model3d {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetBoundingBox = false;
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP MiscObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMass() const override;
            OPENSCENARIOLIB_EXP MiscObjectCategory GetMiscObjectCategory() const override;
            OPENSCENARIOLIB_EXP std::string GetModel3d() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetMass(const double mass) override;

            OPENSCENARIOLIB_EXP void SetMiscObjectCategory(const MiscObjectCategory miscObjectCategory) override;

            OPENSCENARIOLIB_EXP void SetModel3d(const std::string model3d) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMass(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMiscObjectCategory(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToModel3d(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMass() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMiscObjectCategory() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromModel3d() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsMassParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMiscObjectCategoryParameterized() override;
            OPENSCENARIOLIB_EXP bool IsModel3dParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMass() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMiscObjectCategory() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetModel3d() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetModel3d() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetBoundingBox() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IMiscObjectCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IMiscObjectCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class MiscObjectCatalogLocationImpl: public BaseImpl, public IMiscObjectCatalogLocationWriter, public std::enable_shared_from_this<MiscObjectCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP MiscObjectCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IModifyRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IModifyRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ModifyRuleImpl: public BaseImpl, public IModifyRuleWriter, public std::enable_shared_from_this<ModifyRuleImpl> 
        {
        private:
            bool _isSetAddValue = false;
            std::shared_ptr<IParameterAddValueRuleWriter> _addValue {};
            bool _isSetMultiplyByValue = false;
            std::shared_ptr<IParameterMultiplyByValueRuleWriter> _multiplyByValue {};

        public:

            OPENSCENARIOLIB_EXP ModifyRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAddValueRule> GetAddValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterMultiplyByValueRule> GetMultiplyByValue() const override;


            OPENSCENARIOLIB_EXP void SetAddValue(std::shared_ptr<IParameterAddValueRuleWriter> addValue) override;

            OPENSCENARIOLIB_EXP void SetMultiplyByValue(std::shared_ptr<IParameterMultiplyByValueRuleWriter> multiplyByValue) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAddValueRuleWriter> GetWriterAddValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterMultiplyByValueRuleWriter> GetWriterMultiplyByValue() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAddValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMultiplyByValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IMonitorDeclaration. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IMonitorDeclaration)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class MonitorDeclarationImpl: public BaseImpl, public IMonitorDeclarationWriter, public std::enable_shared_from_this<MonitorDeclarationImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetValue = false;
            bool _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP MonitorDeclarationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP bool GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetValue(const bool value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements INone. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of INone)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class NoneImpl: public BaseImpl, public INoneWriter, public std::enable_shared_from_this<NoneImpl> 
        {
        private:

        public:

            OPENSCENARIOLIB_EXP NoneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements INormalDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of INormalDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class NormalDistributionImpl: public BaseImpl, public INormalDistributionWriter, public std::enable_shared_from_this<NormalDistributionImpl> 
        {
        private:
            bool _isSetExpectedValue = false;
            double _expectedValue {};
            bool _isSetVariance = false;
            double _variance {};
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP NormalDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetExpectedValue() const override;
            OPENSCENARIOLIB_EXP double GetVariance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetExpectedValue(const double expectedValue) override;

            OPENSCENARIOLIB_EXP void SetVariance(const double variance) override;

            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToExpectedValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVariance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromExpectedValue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVariance() const override;

            OPENSCENARIOLIB_EXP bool IsExpectedValueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVarianceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetExpectedValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariance() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRange() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements INurbs. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of INurbs)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class NurbsImpl: public BaseImpl, public INurbsWriter, public std::enable_shared_from_this<NurbsImpl> 
        {
        private:
            bool _isSetOrder = false;
            uint32_t _order {};
            bool _isSetControlPoints = false;
            std::vector<std::shared_ptr<IControlPointWriter>> _controlPoints {};
            bool _isSetKnots = false;
            std::vector<std::shared_ptr<IKnotWriter>> _knots {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
            OPENSCENARIOLIB_EXP NurbsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP uint32_t GetOrder() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControlPoint>> GetControlPoints() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IControlPointWriter>> GetWriterControlPoints() const override;
            OPENSCENARIOLIB_EXP int GetControlPointsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControlPoint> GetControlPointsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IKnot>> GetKnots() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IKnotWriter>> GetWriterKnots() const override;
            OPENSCENARIOLIB_EXP int GetKnotsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IKnot> GetKnotsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetOrder(const uint32_t order) override;

            OPENSCENARIOLIB_EXP void SetControlPoints(std::vector<std::shared_ptr<IControlPointWriter>>& controlPoints) override;

            OPENSCENARIOLIB_EXP void SetKnots(std::vector<std::shared_ptr<IKnotWriter>>& knots) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOrder(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOrder() const override;

            OPENSCENARIOLIB_EXP bool IsOrderParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetOrder() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetControlPoints() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetKnots() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IObjectController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IObjectController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ObjectControllerImpl: public BaseImpl, public IObjectControllerWriter, public std::enable_shared_from_this<ObjectControllerImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};
            bool _isSetController = false;
            std::shared_ptr<IControllerWriter> _controller {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ObjectControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IController> GetController() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void SetController(std::shared_ptr<IControllerWriter> controller) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerWriter> GetWriterController() const override;
            OPENSCENARIOLIB_EXP virtual void ResetName() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetController() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOffroadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOffroadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OffroadConditionImpl: public BaseImpl, public IOffroadConditionWriter, public std::enable_shared_from_this<OffroadConditionImpl> 
        {
        private:
            bool _isSetDuration = false;
            double _duration {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OffroadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override;

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDuration() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOpenScenario. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOpenScenario)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OpenScenarioImpl: public BaseImpl, public IOpenScenarioWriter, public std::enable_shared_from_this<OpenScenarioImpl> 
        {
        private:
            bool _isSetFileHeader = false;
            std::shared_ptr<IFileHeaderWriter> _fileHeader {};
            bool _isSetOpenScenarioCategory = false;
            std::shared_ptr<IOpenScenarioCategoryWriter> _openScenarioCategory {};

        public:

            OPENSCENARIOLIB_EXP OpenScenarioImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IFileHeader> GetFileHeader() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioCategory> GetOpenScenarioCategory() const override;


            OPENSCENARIOLIB_EXP void SetFileHeader(std::shared_ptr<IFileHeaderWriter> fileHeader) override;

            OPENSCENARIOLIB_EXP void SetOpenScenarioCategory(std::shared_ptr<IOpenScenarioCategoryWriter> openScenarioCategory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileHeaderWriter> GetWriterFileHeader() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioCategoryWriter> GetWriterOpenScenarioCategory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFileHeader() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOpenScenarioCategory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOpenScenarioCategory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOpenScenarioCategory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OpenScenarioCategoryImpl: public BaseImpl, public IOpenScenarioCategoryWriter, public std::enable_shared_from_this<OpenScenarioCategoryImpl> 
        {
        private:
            bool _isSetScenarioDefinition = false;
            std::shared_ptr<IScenarioDefinitionWriter> _scenarioDefinition {};
            bool _isSetCatalogDefinition = false;
            std::shared_ptr<ICatalogDefinitionWriter> _catalogDefinition {};
            bool _isSetParameterValueDistributionDefinition = false;
            std::shared_ptr<IParameterValueDistributionDefinitionWriter> _parameterValueDistributionDefinition {};

        public:

            OPENSCENARIOLIB_EXP OpenScenarioCategoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioDefinition> GetScenarioDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogDefinition> GetCatalogDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterValueDistributionDefinition> GetParameterValueDistributionDefinition() const override;


            OPENSCENARIOLIB_EXP void SetScenarioDefinition(std::shared_ptr<IScenarioDefinitionWriter> scenarioDefinition) override;

            OPENSCENARIOLIB_EXP void SetCatalogDefinition(std::shared_ptr<ICatalogDefinitionWriter> catalogDefinition) override;

            OPENSCENARIOLIB_EXP void SetParameterValueDistributionDefinition(std::shared_ptr<IParameterValueDistributionDefinitionWriter> parameterValueDistributionDefinition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioDefinitionWriter> GetWriterScenarioDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogDefinitionWriter> GetWriterCatalogDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterValueDistributionDefinitionWriter> GetWriterParameterValueDistributionDefinition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetScenarioDefinition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogDefinition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterValueDistributionDefinition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOrientation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOrientation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OrientationImpl: public BaseImpl, public IOrientationWriter, public std::enable_shared_from_this<OrientationImpl> 
        {
        private:
            bool _isSetH = false;
            double _h {0};
            bool _isSetP = false;
            double _p {0};
            bool _isSetR = false;
            double _r {0};
            bool _isSetType = false;
            ReferenceContext _type {ReferenceContext::ReferenceContextEnum::ABSOLUTE};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OrientationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetH() const override;
            OPENSCENARIOLIB_EXP double GetP() const override;
            OPENSCENARIOLIB_EXP double GetR() const override;
            OPENSCENARIOLIB_EXP ReferenceContext GetType() const override;


            OPENSCENARIOLIB_EXP void SetH(const double h) override;

            OPENSCENARIOLIB_EXP void SetP(const double p) override;

            OPENSCENARIOLIB_EXP void SetR(const double r) override;

            OPENSCENARIOLIB_EXP void SetType(const ReferenceContext type) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToH(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToP(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToR(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromH() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromP() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromR() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override;

            OPENSCENARIOLIB_EXP bool IsHParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetH() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetH() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetP() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetP() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetR() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetR() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetType() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideBrakeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideBrakeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideBrakeActionImpl: public BaseImpl, public IOverrideBrakeActionWriter, public std::enable_shared_from_this<OverrideBrakeActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetValue = false;
            double _value {};
            bool _isSetBrakeInput = false;
            std::shared_ptr<IBrakeInputWriter> _brakeInput {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideBrakeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeInput> GetBrakeInput() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetBrakeInput(std::shared_ptr<IBrakeInputWriter> brakeInput) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeInputWriter> GetWriterBrakeInput() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetValue() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetBrakeInput() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetBrakeInput() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideClutchAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideClutchAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideClutchActionImpl: public BaseImpl, public IOverrideClutchActionWriter, public std::enable_shared_from_this<OverrideClutchActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetMaxRate = false;
            double _maxRate {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideClutchActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetMaxRate() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetMaxRate(const double maxRate) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideControllerValueAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideControllerValueAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideControllerValueActionImpl: public BaseImpl, public IOverrideControllerValueActionWriter, public std::enable_shared_from_this<OverrideControllerValueActionImpl> 
        {
        private:
            bool _isSetThrottle = false;
            std::shared_ptr<IOverrideThrottleActionWriter> _throttle {};
            bool _isSetBrake = false;
            std::shared_ptr<IOverrideBrakeActionWriter> _brake {};
            bool _isSetClutch = false;
            std::shared_ptr<IOverrideClutchActionWriter> _clutch {};
            bool _isSetParkingBrake = false;
            std::shared_ptr<IOverrideParkingBrakeActionWriter> _parkingBrake {};
            bool _isSetSteeringWheel = false;
            std::shared_ptr<IOverrideSteeringWheelActionWriter> _steeringWheel {};
            bool _isSetGear = false;
            std::shared_ptr<IOverrideGearActionWriter> _gear {};

        public:

            OPENSCENARIOLIB_EXP OverrideControllerValueActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideThrottleAction> GetThrottle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideBrakeAction> GetBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideClutchAction> GetClutch() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideParkingBrakeAction> GetParkingBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideSteeringWheelAction> GetSteeringWheel() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideGearAction> GetGear() const override;


            OPENSCENARIOLIB_EXP void SetThrottle(std::shared_ptr<IOverrideThrottleActionWriter> throttle) override;

            OPENSCENARIOLIB_EXP void SetBrake(std::shared_ptr<IOverrideBrakeActionWriter> brake) override;

            OPENSCENARIOLIB_EXP void SetClutch(std::shared_ptr<IOverrideClutchActionWriter> clutch) override;

            OPENSCENARIOLIB_EXP void SetParkingBrake(std::shared_ptr<IOverrideParkingBrakeActionWriter> parkingBrake) override;

            OPENSCENARIOLIB_EXP void SetSteeringWheel(std::shared_ptr<IOverrideSteeringWheelActionWriter> steeringWheel) override;

            OPENSCENARIOLIB_EXP void SetGear(std::shared_ptr<IOverrideGearActionWriter> gear) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideThrottleActionWriter> GetWriterThrottle() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideBrakeActionWriter> GetWriterBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideClutchActionWriter> GetWriterClutch() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideParkingBrakeActionWriter> GetWriterParkingBrake() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideSteeringWheelActionWriter> GetWriterSteeringWheel() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOverrideGearActionWriter> GetWriterGear() const override;
            OPENSCENARIOLIB_EXP virtual void ResetThrottle() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetThrottle() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetBrake() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetBrake() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetClutch() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetClutch() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParkingBrake() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParkingBrake() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSteeringWheel() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSteeringWheel() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetGear() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetGear() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideGearAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideGearAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideGearActionImpl: public BaseImpl, public IOverrideGearActionWriter, public std::enable_shared_from_this<OverrideGearActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetNumber = false;
            double _number {};
            bool _isSetGear = false;
            std::shared_ptr<IGearWriter> _gear {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideGearActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetNumber() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGear> GetGear() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetNumber(const double number) override;

            OPENSCENARIOLIB_EXP void SetGear(std::shared_ptr<IGearWriter> gear) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToNumber(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumber() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNumberParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IGearWriter> GetWriterGear() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetNumber() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetNumber() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetGear() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetGear() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideParkingBrakeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideParkingBrakeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideParkingBrakeActionImpl: public BaseImpl, public IOverrideParkingBrakeActionWriter, public std::enable_shared_from_this<OverrideParkingBrakeActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetValue = false;
            double _value {};
            bool _isSetBrakeInput = false;
            std::shared_ptr<IBrakeInputWriter> _brakeInput {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideParkingBrakeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeInput> GetBrakeInput() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetBrakeInput(std::shared_ptr<IBrakeInputWriter> brakeInput) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBrakeInputWriter> GetWriterBrakeInput() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetValue() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetBrakeInput() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetBrakeInput() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideSteeringWheelAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideSteeringWheelAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideSteeringWheelActionImpl: public BaseImpl, public IOverrideSteeringWheelActionWriter, public std::enable_shared_from_this<OverrideSteeringWheelActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetMaxRate = false;
            double _maxRate {};
            bool _isSetMaxTorque = false;
            double _maxTorque {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideSteeringWheelActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetMaxRate() const override;
            OPENSCENARIOLIB_EXP double GetMaxTorque() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetMaxRate(const double maxRate) override;

            OPENSCENARIOLIB_EXP void SetMaxTorque(const double maxTorque) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxTorque(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxTorque() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxTorqueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxRate() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxTorque() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxTorque() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IOverrideThrottleAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IOverrideThrottleAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class OverrideThrottleActionImpl: public BaseImpl, public IOverrideThrottleActionWriter, public std::enable_shared_from_this<OverrideThrottleActionImpl> 
        {
        private:
            bool _isSetActive = false;
            bool _active {};
            bool _isSetMaxRate = false;
            double _maxRate {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP OverrideThrottleActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetActive() const override;
            OPENSCENARIOLIB_EXP double GetMaxRate() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetActive(const bool active) override;

            OPENSCENARIOLIB_EXP void SetMaxRate(const double maxRate) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToActive(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromActive() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsActiveParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetActive() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterActionImpl: public BaseImpl, public IParameterActionWriter, public std::enable_shared_from_this<ParameterActionImpl> 
        {
        private:
            bool _isSetParameterRef = false;
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef  = nullptr;
            bool _isSetSetAction = false;
            std::shared_ptr<IParameterSetActionWriter> _setAction {};
            bool _isSetModifyAction = false;
            std::shared_ptr<IParameterModifyActionWriter> _modifyAction {};

        public:

            OPENSCENARIOLIB_EXP ParameterActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterSetAction> GetSetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterModifyAction> GetModifyAction() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override;

            OPENSCENARIOLIB_EXP void SetSetAction(std::shared_ptr<IParameterSetActionWriter> setAction) override;

            OPENSCENARIOLIB_EXP void SetModifyAction(std::shared_ptr<IParameterModifyActionWriter> modifyAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterRef() const override;

            OPENSCENARIOLIB_EXP bool IsParameterRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterSetActionWriter> GetWriterSetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterModifyActionWriter> GetWriterModifyAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSetAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetModifyAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterAddValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAddValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterAddValueRuleImpl: public BaseImpl, public IParameterAddValueRuleWriter, public std::enable_shared_from_this<ParameterAddValueRuleImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ParameterAddValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterAssignment. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterAssignment)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterAssignmentImpl: public BaseImpl, public IParameterAssignmentWriter, public std::enable_shared_from_this<ParameterAssignmentImpl> 
        {
        private:
            bool _isSetParameterRef = false;
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef  = nullptr;
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual bool IsTypedStringAttribute(std::string& attributeKey) override;

            OPENSCENARIOLIB_EXP ParameterAssignmentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterConditionImpl: public BaseImpl, public IParameterConditionWriter, public std::enable_shared_from_this<ParameterConditionImpl> 
        {
        private:
            bool _isSetParameterRef = false;
            std::shared_ptr<INamedReference<IParameterDeclaration>> _parameterRef  = nullptr;
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ParameterConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IParameterDeclaration>> GetParameterRef() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetParameterRef(std::shared_ptr<INamedReference<IParameterDeclaration>> parameterRef) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsParameterRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterDeclaration. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterDeclaration)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterDeclarationImpl: public BaseImpl, public IParameterDeclarationWriter, public std::enable_shared_from_this<ParameterDeclarationImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterType = false;
            ParameterType _parameterType {};
            bool _isSetValue = false;
            std::string _value {};
            bool _isSetConstraintGroups = false;
            std::vector<std::shared_ptr<IValueConstraintGroupWriter>> _constraintGroups {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual bool IsTypedStringAttribute(std::string& attributeKey) override;

            OPENSCENARIOLIB_EXP ParameterDeclarationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP ParameterType GetParameterType() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IValueConstraintGroup>> GetConstraintGroups() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IValueConstraintGroupWriter>> GetWriterConstraintGroups() const override;
            OPENSCENARIOLIB_EXP int GetConstraintGroupsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IValueConstraintGroup> GetConstraintGroupsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterType(const ParameterType parameterType) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void SetConstraintGroups(std::vector<std::shared_ptr<IValueConstraintGroupWriter>>& constraintGroups) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsParameterTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetConstraintGroups() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetConstraintGroups() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterModifyAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterModifyAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterModifyActionImpl: public BaseImpl, public IParameterModifyActionWriter, public std::enable_shared_from_this<ParameterModifyActionImpl> 
        {
        private:
            bool _isSetRule = false;
            std::shared_ptr<IModifyRuleWriter> _rule {};

        public:

            OPENSCENARIOLIB_EXP ParameterModifyActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IModifyRule> GetRule() const override;


            OPENSCENARIOLIB_EXP void SetRule(std::shared_ptr<IModifyRuleWriter> rule) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IModifyRuleWriter> GetWriterRule() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterMultiplyByValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterMultiplyByValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterMultiplyByValueRuleImpl: public BaseImpl, public IParameterMultiplyByValueRuleWriter, public std::enable_shared_from_this<ParameterMultiplyByValueRuleImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ParameterMultiplyByValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterSetAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterSetAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterSetActionImpl: public BaseImpl, public IParameterSetActionWriter, public std::enable_shared_from_this<ParameterSetActionImpl> 
        {
        private:
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ParameterSetActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterValueDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterValueDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterValueDistributionImpl: public BaseImpl, public IParameterValueDistributionWriter, public std::enable_shared_from_this<ParameterValueDistributionImpl> 
        {
        private:
            bool _isSetScenarioFile = false;
            std::shared_ptr<IFileWriter> _scenarioFile {};
            bool _isSetDistributionDefinition = false;
            std::shared_ptr<IDistributionDefinitionWriter> _distributionDefinition {};

        public:

            OPENSCENARIOLIB_EXP ParameterValueDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetScenarioFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionDefinition> GetDistributionDefinition() const override;


            OPENSCENARIOLIB_EXP void SetScenarioFile(std::shared_ptr<IFileWriter> scenarioFile) override;

            OPENSCENARIOLIB_EXP void SetDistributionDefinition(std::shared_ptr<IDistributionDefinitionWriter> distributionDefinition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterScenarioFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDistributionDefinitionWriter> GetWriterDistributionDefinition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetScenarioFile() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDistributionDefinition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterValueDistributionDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterValueDistributionDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterValueDistributionDefinitionImpl: public BaseImpl, public IParameterValueDistributionDefinitionWriter, public std::enable_shared_from_this<ParameterValueDistributionDefinitionImpl> 
        {
        private:
            bool _isSetParameterValueDistribution = false;
            std::shared_ptr<IParameterValueDistributionWriter> _parameterValueDistribution {};

        public:

            OPENSCENARIOLIB_EXP ParameterValueDistributionDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterValueDistribution> GetParameterValueDistribution() const override;


            OPENSCENARIOLIB_EXP void SetParameterValueDistribution(std::shared_ptr<IParameterValueDistributionWriter> parameterValueDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterValueDistributionWriter> GetWriterParameterValueDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterValueDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IParameterValueSet. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IParameterValueSet)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ParameterValueSetImpl: public BaseImpl, public IParameterValueSetWriter, public std::enable_shared_from_this<ParameterValueSetImpl> 
        {
        private:
            bool _isSetParameterAssignments = false;
            std::vector<std::shared_ptr<IParameterAssignmentWriter>> _parameterAssignments {};

        public:

            OPENSCENARIOLIB_EXP ParameterValueSetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignment>> GetParameterAssignments() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterAssignmentWriter>> GetWriterParameterAssignments() const override;
            OPENSCENARIOLIB_EXP int GetParameterAssignmentsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterAssignment> GetParameterAssignmentsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetParameterAssignments(std::vector<std::shared_ptr<IParameterAssignmentWriter>>& parameterAssignments) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterAssignments() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPedestrian. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrian)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianImpl: public BaseImpl, public IPedestrianWriter, public std::enable_shared_from_this<PedestrianImpl> 
        {
        private:
            bool _isSetMass = false;
            double _mass {};
            bool _isSetModel = false;
            std::string _model {};
            bool _isSetModel3d = false;
            std::string _model3d {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetPedestrianCategory = false;
            PedestrianCategory _pedestrianCategory {};
            bool _isSetRole = false;
            Role _role {Role::RoleEnum::NONE};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetBoundingBox = false;
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PedestrianImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMass() const override;
            OPENSCENARIOLIB_EXP std::string GetModel() const override;
            OPENSCENARIOLIB_EXP std::string GetModel3d() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP PedestrianCategory GetPedestrianCategory() const override;
            OPENSCENARIOLIB_EXP Role GetRole() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetMass(const double mass) override;

            OPENSCENARIOLIB_EXP void SetModel(const std::string model) override;

            OPENSCENARIOLIB_EXP void SetModel3d(const std::string model3d) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetPedestrianCategory(const PedestrianCategory pedestrianCategory) override;

            OPENSCENARIOLIB_EXP void SetRole(const Role role) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMass(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToModel(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToModel3d(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPedestrianCategory(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRole(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMass() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromModel() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromModel3d() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPedestrianCategory() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRole() const override;

            OPENSCENARIOLIB_EXP bool IsMassParameterized() override;
            OPENSCENARIOLIB_EXP bool IsModelParameterized() override;
            OPENSCENARIOLIB_EXP bool IsModel3dParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPedestrianCategoryParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoleParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMass() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetModel() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetModel() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetModel3d() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetModel3d() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPedestrianCategory() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRole() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRole() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetBoundingBox() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPedestrianAnimation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrianAnimation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianAnimationImpl: public BaseImpl, public IPedestrianAnimationWriter, public std::enable_shared_from_this<PedestrianAnimationImpl> 
        {
        private:
            bool _isSetMotion = false;
            PedestrianMotionType _motion {};
            bool _isSetUserDefinedPedestrianAnimation = false;
            std::string _userDefinedPedestrianAnimation {};
            bool _isSetGestures = false;
            std::vector<std::shared_ptr<IPedestrianGestureWriter>> _gestures {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP PedestrianAnimationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP PedestrianMotionType GetMotion() const override;
            OPENSCENARIOLIB_EXP std::string GetUserDefinedPedestrianAnimation() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrianGesture>> GetGestures() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPedestrianGestureWriter>> GetWriterGestures() const override;
            OPENSCENARIOLIB_EXP int GetGesturesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPedestrianGesture> GetGesturesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetMotion(const PedestrianMotionType motion) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedPedestrianAnimation(const std::string userDefinedPedestrianAnimation) override;

            OPENSCENARIOLIB_EXP void SetGestures(std::vector<std::shared_ptr<IPedestrianGestureWriter>>& gestures) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMotion(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToUserDefinedPedestrianAnimation(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMotion() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromUserDefinedPedestrianAnimation() const override;

            OPENSCENARIOLIB_EXP bool IsMotionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsUserDefinedPedestrianAnimationParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetMotion() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMotion() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetUserDefinedPedestrianAnimation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedPedestrianAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetGestures() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetGestures() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPedestrianCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrianCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianCatalogLocationImpl: public BaseImpl, public IPedestrianCatalogLocationWriter, public std::enable_shared_from_this<PedestrianCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP PedestrianCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPedestrianGesture. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPedestrianGesture)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PedestrianGestureImpl: public BaseImpl, public IPedestrianGestureWriter, public std::enable_shared_from_this<PedestrianGestureImpl> 
        {
        private:
            bool _isSetGesture = false;
            PedestrianGestureType _gesture {};

        public:

            OPENSCENARIOLIB_EXP PedestrianGestureImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP PedestrianGestureType GetGesture() const override;


            OPENSCENARIOLIB_EXP void SetGesture(const PedestrianGestureType gesture) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToGesture(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromGesture() const override;

            OPENSCENARIOLIB_EXP bool IsGestureParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetGesture() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPerformance. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPerformance)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PerformanceImpl: public BaseImpl, public IPerformanceWriter, public std::enable_shared_from_this<PerformanceImpl> 
        {
        private:
            bool _isSetMaxAcceleration = false;
            double _maxAcceleration {};
            bool _isSetMaxAccelerationRate = false;
            double _maxAccelerationRate {};
            bool _isSetMaxDeceleration = false;
            double _maxDeceleration {};
            bool _isSetMaxDecelerationRate = false;
            double _maxDecelerationRate {};
            bool _isSetMaxSpeed = false;
            double _maxSpeed {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PerformanceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMaxAcceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxAccelerationRate() const override;
            OPENSCENARIOLIB_EXP double GetMaxDeceleration() const override;
            OPENSCENARIOLIB_EXP double GetMaxDecelerationRate() const override;
            OPENSCENARIOLIB_EXP double GetMaxSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMaxAcceleration(const double maxAcceleration) override;

            OPENSCENARIOLIB_EXP void SetMaxAccelerationRate(const double maxAccelerationRate) override;

            OPENSCENARIOLIB_EXP void SetMaxDeceleration(const double maxDeceleration) override;

            OPENSCENARIOLIB_EXP void SetMaxDecelerationRate(const double maxDecelerationRate) override;

            OPENSCENARIOLIB_EXP void SetMaxSpeed(const double maxSpeed) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAcceleration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxAccelerationRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDeceleration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxDecelerationRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMaxSpeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAcceleration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxAccelerationRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDeceleration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxDecelerationRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMaxSpeed() const override;

            OPENSCENARIOLIB_EXP bool IsMaxAccelerationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxAccelerationRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxDecelerationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxDecelerationRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsMaxSpeedParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxAcceleration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxAccelerationRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxAccelerationRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxDeceleration() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMaxDecelerationRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxDecelerationRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMaxSpeed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPhase. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPhase)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PhaseImpl: public BaseImpl, public IPhaseWriter, public std::enable_shared_from_this<PhaseImpl> 
        {
        private:
            bool _isSetDuration = false;
            double _duration {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetTrafficSignalStates = false;
            std::vector<std::shared_ptr<ITrafficSignalStateWriter>> _trafficSignalStates {};
            bool _isSetTrafficSignalGroupState = false;
            std::shared_ptr<ITrafficSignalGroupStateWriter> _trafficSignalGroupState {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PhaseImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDuration() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalState>> GetTrafficSignalStates() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalStateWriter>> GetWriterTrafficSignalStates() const override;
            OPENSCENARIOLIB_EXP int GetTrafficSignalStatesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalState> GetTrafficSignalStatesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalGroupState> GetTrafficSignalGroupState() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalStates(std::vector<std::shared_ptr<ITrafficSignalStateWriter>>& trafficSignalStates) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalGroupState(std::shared_ptr<ITrafficSignalGroupStateWriter> trafficSignalGroupState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalGroupStateWriter> GetWriterTrafficSignalGroupState() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDuration() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficSignalStates() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalStates() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficSignalGroupState() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalGroupState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPoissonDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPoissonDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PoissonDistributionImpl: public BaseImpl, public IPoissonDistributionWriter, public std::enable_shared_from_this<PoissonDistributionImpl> 
        {
        private:
            bool _isSetExpectedValue = false;
            double _expectedValue {};
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PoissonDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetExpectedValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetExpectedValue(const double expectedValue) override;

            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToExpectedValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromExpectedValue() const override;

            OPENSCENARIOLIB_EXP bool IsExpectedValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetExpectedValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRange() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPolygon. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPolygon)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PolygonImpl: public BaseImpl, public IPolygonWriter, public std::enable_shared_from_this<PolygonImpl> 
        {
        private:
            bool _isSetPositions = false;
            std::vector<std::shared_ptr<IPositionWriter>> _positions {};

        public:

            OPENSCENARIOLIB_EXP PolygonImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPosition>> GetPositions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPositionWriter>> GetWriterPositions() const override;
            OPENSCENARIOLIB_EXP int GetPositionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPositionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetPositions(std::vector<std::shared_ptr<IPositionWriter>>& positions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPositions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPolyline. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPolyline)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PolylineImpl: public BaseImpl, public IPolylineWriter, public std::enable_shared_from_this<PolylineImpl> 
        {
        private:
            bool _isSetVertices = false;
            std::vector<std::shared_ptr<IVertexWriter>> _vertices {};

        public:

            OPENSCENARIOLIB_EXP PolylineImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVertex>> GetVertices() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVertexWriter>> GetWriterVertices() const override;
            OPENSCENARIOLIB_EXP int GetVerticesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVertex> GetVerticesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetVertices(std::vector<std::shared_ptr<IVertexWriter>>& vertices) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetVertices() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionImpl: public BaseImpl, public IPositionWriter, public std::enable_shared_from_this<PositionImpl> 
        {
        private:
            bool _isSetWorldPosition = false;
            std::shared_ptr<IWorldPositionWriter> _worldPosition {};
            bool _isSetRelativeWorldPosition = false;
            std::shared_ptr<IRelativeWorldPositionWriter> _relativeWorldPosition {};
            bool _isSetRelativeObjectPosition = false;
            std::shared_ptr<IRelativeObjectPositionWriter> _relativeObjectPosition {};
            bool _isSetRoadPosition = false;
            std::shared_ptr<IRoadPositionWriter> _roadPosition {};
            bool _isSetRelativeRoadPosition = false;
            std::shared_ptr<IRelativeRoadPositionWriter> _relativeRoadPosition {};
            bool _isSetLanePosition = false;
            std::shared_ptr<ILanePositionWriter> _lanePosition {};
            bool _isSetRelativeLanePosition = false;
            std::shared_ptr<IRelativeLanePositionWriter> _relativeLanePosition {};
            bool _isSetRoutePosition = false;
            std::shared_ptr<IRoutePositionWriter> _routePosition {};
            bool _isSetGeoPosition = false;
            std::shared_ptr<IGeoPositionWriter> _geoPosition {};
            bool _isSetTrajectoryPosition = false;
            std::shared_ptr<ITrajectoryPositionWriter> _trajectoryPosition {};

        public:

            OPENSCENARIOLIB_EXP PositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IWorldPosition> GetWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeWorldPosition> GetRelativeWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeObjectPosition> GetRelativeObjectPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadPosition> GetRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeRoadPosition> GetRelativeRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILanePosition> GetLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeLanePosition> GetRelativeLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutePosition> GetRoutePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGeoPosition> GetGeoPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryPosition> GetTrajectoryPosition() const override;


            OPENSCENARIOLIB_EXP void SetWorldPosition(std::shared_ptr<IWorldPositionWriter> worldPosition) override;

            OPENSCENARIOLIB_EXP void SetRelativeWorldPosition(std::shared_ptr<IRelativeWorldPositionWriter> relativeWorldPosition) override;

            OPENSCENARIOLIB_EXP void SetRelativeObjectPosition(std::shared_ptr<IRelativeObjectPositionWriter> relativeObjectPosition) override;

            OPENSCENARIOLIB_EXP void SetRoadPosition(std::shared_ptr<IRoadPositionWriter> roadPosition) override;

            OPENSCENARIOLIB_EXP void SetRelativeRoadPosition(std::shared_ptr<IRelativeRoadPositionWriter> relativeRoadPosition) override;

            OPENSCENARIOLIB_EXP void SetLanePosition(std::shared_ptr<ILanePositionWriter> lanePosition) override;

            OPENSCENARIOLIB_EXP void SetRelativeLanePosition(std::shared_ptr<IRelativeLanePositionWriter> relativeLanePosition) override;

            OPENSCENARIOLIB_EXP void SetRoutePosition(std::shared_ptr<IRoutePositionWriter> routePosition) override;

            OPENSCENARIOLIB_EXP void SetGeoPosition(std::shared_ptr<IGeoPositionWriter> geoPosition) override;

            OPENSCENARIOLIB_EXP void SetTrajectoryPosition(std::shared_ptr<ITrajectoryPositionWriter> trajectoryPosition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IWorldPositionWriter> GetWriterWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeWorldPositionWriter> GetWriterRelativeWorldPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeObjectPositionWriter> GetWriterRelativeObjectPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadPositionWriter> GetWriterRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeRoadPositionWriter> GetWriterRelativeRoadPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILanePositionWriter> GetWriterLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeLanePositionWriter> GetWriterRelativeLanePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutePositionWriter> GetWriterRoutePosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IGeoPositionWriter> GetWriterGeoPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryPositionWriter> GetWriterTrajectoryPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWorldPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeWorldPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeObjectPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeRoadPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLanePosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeLanePosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutePosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetGeoPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectoryPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPositionInLaneCoordinates. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionInLaneCoordinates)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionInLaneCoordinatesImpl: public BaseImpl, public IPositionInLaneCoordinatesWriter, public std::enable_shared_from_this<PositionInLaneCoordinatesImpl> 
        {
        private:
            bool _isSetLaneId = false;
            std::string _laneId {};
            bool _isSetLaneOffset = false;
            double _laneOffset {0};
            bool _isSetPathS = false;
            double _pathS {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PositionInLaneCoordinatesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetLaneId() const override;
            OPENSCENARIOLIB_EXP double GetLaneOffset() const override;
            OPENSCENARIOLIB_EXP double GetPathS() const override;


            OPENSCENARIOLIB_EXP void SetLaneId(const std::string laneId) override;

            OPENSCENARIOLIB_EXP void SetLaneOffset(const double laneOffset) override;

            OPENSCENARIOLIB_EXP void SetPathS(const double pathS) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLaneOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPathS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneId() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLaneOffset() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPathS() const override;

            OPENSCENARIOLIB_EXP bool IsLaneIdParameterized() override;
            OPENSCENARIOLIB_EXP bool IsLaneOffsetParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPathSParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneId() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLaneOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLaneOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPathS() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPositionInRoadCoordinates. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionInRoadCoordinates)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionInRoadCoordinatesImpl: public BaseImpl, public IPositionInRoadCoordinatesWriter, public std::enable_shared_from_this<PositionInRoadCoordinatesImpl> 
        {
        private:
            bool _isSetPathS = false;
            double _pathS {};
            bool _isSetT = false;
            double _t {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PositionInRoadCoordinatesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetPathS() const override;
            OPENSCENARIOLIB_EXP double GetT() const override;


            OPENSCENARIOLIB_EXP void SetPathS(const double pathS) override;

            OPENSCENARIOLIB_EXP void SetT(const double t) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPathS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToT(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPathS() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromT() const override;

            OPENSCENARIOLIB_EXP bool IsPathSParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPathS() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetT() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPositionOfCurrentEntity. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPositionOfCurrentEntity)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PositionOfCurrentEntityImpl: public BaseImpl, public IPositionOfCurrentEntityWriter, public std::enable_shared_from_this<PositionOfCurrentEntityImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;

        public:

            OPENSCENARIOLIB_EXP PositionOfCurrentEntityImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPrecipitation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrecipitation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrecipitationImpl: public BaseImpl, public IPrecipitationWriter, public std::enable_shared_from_this<PrecipitationImpl> 
        {
        private:
            bool _isSetIntensity = false;
            double _intensity {};
            bool _isSetPrecipitationIntensity = false;
            double _precipitationIntensity {};
            bool _isSetPrecipitationType = false;
            PrecipitationType _precipitationType {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP PrecipitationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetIntensity() const override;
            OPENSCENARIOLIB_EXP double GetPrecipitationIntensity() const override;
            OPENSCENARIOLIB_EXP PrecipitationType GetPrecipitationType() const override;


            OPENSCENARIOLIB_EXP void SetIntensity(const double intensity) override;

            OPENSCENARIOLIB_EXP void SetPrecipitationIntensity(const double precipitationIntensity) override;

            OPENSCENARIOLIB_EXP void SetPrecipitationType(const PrecipitationType precipitationType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToIntensity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPrecipitationIntensity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPrecipitationType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromIntensity() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPrecipitationIntensity() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPrecipitationType() const override;

            OPENSCENARIOLIB_EXP bool IsIntensityParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPrecipitationIntensityParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPrecipitationTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetIntensity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetIntensity() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPrecipitationIntensity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPrecipitationIntensity() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPrecipitationType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPrivate. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrivate)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrivateImpl: public BaseImpl, public IPrivateWriter, public std::enable_shared_from_this<PrivateImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetPrivateActions = false;
            std::vector<std::shared_ptr<IPrivateActionWriter>> _privateActions {};

        public:

            OPENSCENARIOLIB_EXP PrivateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateAction>> GetPrivateActions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPrivateActionWriter>> GetWriterPrivateActions() const override;
            OPENSCENARIOLIB_EXP int GetPrivateActionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrivateAction> GetPrivateActionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetPrivateActions(std::vector<std::shared_ptr<IPrivateActionWriter>>& privateActions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPrivateActions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IPrivateAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IPrivateAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PrivateActionImpl: public BaseImpl, public IPrivateActionWriter, public std::enable_shared_from_this<PrivateActionImpl> 
        {
        private:
            bool _isSetLongitudinalAction = false;
            std::shared_ptr<ILongitudinalActionWriter> _longitudinalAction {};
            bool _isSetLateralAction = false;
            std::shared_ptr<ILateralActionWriter> _lateralAction {};
            bool _isSetVisibilityAction = false;
            std::shared_ptr<IVisibilityActionWriter> _visibilityAction {};
            bool _isSetSynchronizeAction = false;
            std::shared_ptr<ISynchronizeActionWriter> _synchronizeAction {};
            bool _isSetActivateControllerAction = false;
            std::shared_ptr<IActivateControllerActionWriter> _activateControllerAction {};
            bool _isSetControllerAction = false;
            std::shared_ptr<IControllerActionWriter> _controllerAction {};
            bool _isSetTeleportAction = false;
            std::shared_ptr<ITeleportActionWriter> _teleportAction {};
            bool _isSetRoutingAction = false;
            std::shared_ptr<IRoutingActionWriter> _routingAction {};
            bool _isSetAppearanceAction = false;
            std::shared_ptr<IAppearanceActionWriter> _appearanceAction {};
            bool _isSetTrailerAction = false;
            std::shared_ptr<ITrailerActionWriter> _trailerAction {};

        public:

            OPENSCENARIOLIB_EXP PrivateActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalAction> GetLongitudinalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralAction> GetLateralAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVisibilityAction> GetVisibilityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISynchronizeAction> GetSynchronizeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerAction> GetActivateControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerAction> GetControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITeleportAction> GetTeleportAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutingAction> GetRoutingAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAppearanceAction> GetAppearanceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerAction> GetTrailerAction() const override;


            OPENSCENARIOLIB_EXP void SetLongitudinalAction(std::shared_ptr<ILongitudinalActionWriter> longitudinalAction) override;

            OPENSCENARIOLIB_EXP void SetLateralAction(std::shared_ptr<ILateralActionWriter> lateralAction) override;

            OPENSCENARIOLIB_EXP void SetVisibilityAction(std::shared_ptr<IVisibilityActionWriter> visibilityAction) override;

            OPENSCENARIOLIB_EXP void SetSynchronizeAction(std::shared_ptr<ISynchronizeActionWriter> synchronizeAction) override;

            OPENSCENARIOLIB_EXP void SetActivateControllerAction(std::shared_ptr<IActivateControllerActionWriter> activateControllerAction) override;

            OPENSCENARIOLIB_EXP void SetControllerAction(std::shared_ptr<IControllerActionWriter> controllerAction) override;

            OPENSCENARIOLIB_EXP void SetTeleportAction(std::shared_ptr<ITeleportActionWriter> teleportAction) override;

            OPENSCENARIOLIB_EXP void SetRoutingAction(std::shared_ptr<IRoutingActionWriter> routingAction) override;

            OPENSCENARIOLIB_EXP void SetAppearanceAction(std::shared_ptr<IAppearanceActionWriter> appearanceAction) override;

            OPENSCENARIOLIB_EXP void SetTrailerAction(std::shared_ptr<ITrailerActionWriter> trailerAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ILongitudinalActionWriter> GetWriterLongitudinalAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILateralActionWriter> GetWriterLateralAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVisibilityActionWriter> GetWriterVisibilityAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISynchronizeActionWriter> GetWriterSynchronizeAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IActivateControllerActionWriter> GetWriterActivateControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerActionWriter> GetWriterControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITeleportActionWriter> GetWriterTeleportAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoutingActionWriter> GetWriterRoutingAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAppearanceActionWriter> GetWriterAppearanceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerActionWriter> GetWriterTrailerAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLongitudinalAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLateralAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVisibilityAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSynchronizeAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetActivateControllerAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTeleportAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutingAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAppearanceAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailerAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IProbabilityDistributionSet. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProbabilityDistributionSet)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ProbabilityDistributionSetImpl: public BaseImpl, public IProbabilityDistributionSetWriter, public std::enable_shared_from_this<ProbabilityDistributionSetImpl> 
        {
        private:
            bool _isSetElements = false;
            std::vector<std::shared_ptr<IProbabilityDistributionSetElementWriter>> _elements {};

        public:

            OPENSCENARIOLIB_EXP ProbabilityDistributionSetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IProbabilityDistributionSetElement>> GetElements() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IProbabilityDistributionSetElementWriter>> GetWriterElements() const override;
            OPENSCENARIOLIB_EXP int GetElementsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProbabilityDistributionSetElement> GetElementsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetElements(std::vector<std::shared_ptr<IProbabilityDistributionSetElementWriter>>& elements) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetElements() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IProbabilityDistributionSetElement. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProbabilityDistributionSetElement)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ProbabilityDistributionSetElementImpl: public BaseImpl, public IProbabilityDistributionSetElementWriter, public std::enable_shared_from_this<ProbabilityDistributionSetElementImpl> 
        {
        private:
            bool _isSetValue = false;
            std::string _value {};
            bool _isSetWeight = false;
            double _weight {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ProbabilityDistributionSetElementImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetValue() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IProperties. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProperties)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PropertiesImpl: public BaseImpl, public IPropertiesWriter, public std::enable_shared_from_this<PropertiesImpl> 
        {
        private:
            bool _isSetProperties = false;
            std::vector<std::shared_ptr<IPropertyWriter>> _properties {};
            bool _isSetFiles = false;
            std::vector<std::shared_ptr<IFileWriter>> _files {};
            bool _isSetCustomContent = false;
            std::vector<std::shared_ptr<ICustomContentWriter>> _customContent {};

        public:

            OPENSCENARIOLIB_EXP PropertiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IProperty>> GetProperties() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPropertyWriter>> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP int GetPropertiesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperty> GetPropertiesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IFile>> GetFiles() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IFileWriter>> GetWriterFiles() const override;
            OPENSCENARIOLIB_EXP int GetFilesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetFilesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICustomContent>> GetCustomContent() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ICustomContentWriter>> GetWriterCustomContent() const override;
            OPENSCENARIOLIB_EXP int GetCustomContentSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICustomContent> GetCustomContentAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetProperties(std::vector<std::shared_ptr<IPropertyWriter>>& properties) override;

            OPENSCENARIOLIB_EXP void SetFiles(std::vector<std::shared_ptr<IFileWriter>>& files) override;

            OPENSCENARIOLIB_EXP void SetCustomContent(std::vector<std::shared_ptr<ICustomContentWriter>>& customContent) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFiles() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFiles() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCustomContent() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCustomContent() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IProperty. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IProperty)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class PropertyImpl: public BaseImpl, public IPropertyWriter, public std::enable_shared_from_this<PropertyImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP PropertyImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRandomRouteAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRandomRouteAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RandomRouteActionImpl: public BaseImpl, public IRandomRouteActionWriter, public std::enable_shared_from_this<RandomRouteActionImpl> 
        {
        private:

        public:

            OPENSCENARIOLIB_EXP RandomRouteActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRange. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRange)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RangeImpl: public BaseImpl, public IRangeWriter, public std::enable_shared_from_this<RangeImpl> 
        {
        private:
            bool _isSetLowerLimit = false;
            double _lowerLimit {};
            bool _isSetUpperLimit = false;
            double _upperLimit {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RangeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetLowerLimit() const override;
            OPENSCENARIOLIB_EXP double GetUpperLimit() const override;


            OPENSCENARIOLIB_EXP void SetLowerLimit(const double lowerLimit) override;

            OPENSCENARIOLIB_EXP void SetUpperLimit(const double upperLimit) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLowerLimit(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToUpperLimit(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLowerLimit() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromUpperLimit() const override;

            OPENSCENARIOLIB_EXP bool IsLowerLimitParameterized() override;
            OPENSCENARIOLIB_EXP bool IsUpperLimitParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetLowerLimit() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUpperLimit() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IReachPositionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IReachPositionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ReachPositionConditionImpl: public BaseImpl, public IReachPositionConditionWriter, public std::enable_shared_from_this<ReachPositionConditionImpl> 
        {
        private:
            bool _isSetTolerance = false;
            double _tolerance {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP ReachPositionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTolerance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTolerance(const double tolerance) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTolerance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTolerance() const override;

            OPENSCENARIOLIB_EXP bool IsToleranceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTolerance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeAngleCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeAngleCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeAngleConditionImpl: public BaseImpl, public IRelativeAngleConditionWriter, public std::enable_shared_from_this<RelativeAngleConditionImpl> 
        {
        private:
            bool _isSetAngle = false;
            double _angle {};
            bool _isSetAngleTolerance = false;
            double _angleTolerance {};
            bool _isSetAngleType = false;
            AngleType _angleType {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeAngleConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAngle() const override;
            OPENSCENARIOLIB_EXP double GetAngleTolerance() const override;
            OPENSCENARIOLIB_EXP AngleType GetAngleType() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetAngle(const double angle) override;

            OPENSCENARIOLIB_EXP void SetAngleTolerance(const double angleTolerance) override;

            OPENSCENARIOLIB_EXP void SetAngleType(const AngleType angleType) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngle(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngleTolerance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAngleType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngle() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngleTolerance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAngleType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsAngleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsAngleToleranceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsAngleTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetAngle() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAngleTolerance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAngleType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeClearanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeClearanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeClearanceConditionImpl: public BaseImpl, public IRelativeClearanceConditionWriter, public std::enable_shared_from_this<RelativeClearanceConditionImpl> 
        {
        private:
            bool _isSetDistanceBackward = false;
            double _distanceBackward {0};
            bool _isSetDistanceForward = false;
            double _distanceForward {0};
            bool _isSetFreeSpace = false;
            bool _freeSpace {};
            bool _isSetOppositeLanes = false;
            bool _oppositeLanes {};
            bool _isSetRelativeLaneRange = false;
            std::vector<std::shared_ptr<IRelativeLaneRangeWriter>> _relativeLaneRange {};
            bool _isSetEntityRef = false;
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRef {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeClearanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDistanceBackward() const override;
            OPENSCENARIOLIB_EXP double GetDistanceForward() const override;
            OPENSCENARIOLIB_EXP bool GetFreeSpace() const override;
            OPENSCENARIOLIB_EXP bool GetOppositeLanes() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRelativeLaneRange>> GetRelativeLaneRange() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRelativeLaneRangeWriter>> GetWriterRelativeLaneRange() const override;
            OPENSCENARIOLIB_EXP int GetRelativeLaneRangeSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeLaneRange> GetRelativeLaneRangeAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRef() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRef() const override;
            OPENSCENARIOLIB_EXP int GetEntityRefSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetDistanceBackward(const double distanceBackward) override;

            OPENSCENARIOLIB_EXP void SetDistanceForward(const double distanceForward) override;

            OPENSCENARIOLIB_EXP void SetFreeSpace(const bool freeSpace) override;

            OPENSCENARIOLIB_EXP void SetOppositeLanes(const bool oppositeLanes) override;

            OPENSCENARIOLIB_EXP void SetRelativeLaneRange(std::vector<std::shared_ptr<IRelativeLaneRangeWriter>>& relativeLaneRange) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDistanceBackward(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDistanceForward(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreeSpace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOppositeLanes(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistanceBackward() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistanceForward() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreeSpace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOppositeLanes() const override;

            OPENSCENARIOLIB_EXP bool IsDistanceBackwardParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDistanceForwardParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreeSpaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsOppositeLanesParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetDistanceBackward() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDistanceBackward() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDistanceForward() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDistanceForward() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreeSpace() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOppositeLanes() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRelativeLaneRange() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeLaneRange() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetEntityRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeDistanceConditionImpl: public BaseImpl, public IRelativeDistanceConditionWriter, public std::enable_shared_from_this<RelativeDistanceConditionImpl> 
        {
        private:
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetRelativeDistanceType = false;
            RelativeDistanceType _relativeDistanceType {};
            bool _isSetRoutingAlgorithm = false;
            RoutingAlgorithm _routingAlgorithm {RoutingAlgorithm::RoutingAlgorithmEnum::UNDEFINED};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeDistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP RelativeDistanceType GetRelativeDistanceType() const override;
            OPENSCENARIOLIB_EXP RoutingAlgorithm GetRoutingAlgorithm() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetRelativeDistanceType(const RelativeDistanceType relativeDistanceType) override;

            OPENSCENARIOLIB_EXP void SetRoutingAlgorithm(const RoutingAlgorithm routingAlgorithm) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRelativeDistanceType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoutingAlgorithm(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRelativeDistanceType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoutingAlgorithm() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRelativeDistanceTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoutingAlgorithmParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeDistanceType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoutingAlgorithm() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutingAlgorithm() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeLanePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeLanePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeLanePositionImpl: public BaseImpl, public IRelativeLanePositionWriter, public std::enable_shared_from_this<RelativeLanePositionImpl> 
        {
        private:
            bool _isSetDLane = false;
            int _dLane {};
            bool _isSetDs = false;
            double _ds {};
            bool _isSetDsLane = false;
            double _dsLane {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetOffset = false;
            double _offset {0};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP RelativeLanePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP int GetDLane() const override;
            OPENSCENARIOLIB_EXP double GetDs() const override;
            OPENSCENARIOLIB_EXP double GetDsLane() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDLane(const int dLane) override;

            OPENSCENARIOLIB_EXP void SetDs(const double ds) override;

            OPENSCENARIOLIB_EXP void SetDsLane(const double dsLane) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDLane(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDs(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDsLane(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDLane() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDs() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDsLane() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override;

            OPENSCENARIOLIB_EXP bool IsDLaneParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDsParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDsLaneParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDLane() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDs() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDs() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDsLane() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDsLane() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOffset() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOffset() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeLaneRange. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeLaneRange)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeLaneRangeImpl: public BaseImpl, public IRelativeLaneRangeWriter, public std::enable_shared_from_this<RelativeLaneRangeImpl> 
        {
        private:
            bool _isSetFrom = false;
            int _from {};
            bool _isSetTo = false;
            int _to {};

        public:

			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP RelativeLaneRangeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP int GetFrom() const override;
            OPENSCENARIOLIB_EXP int GetTo() const override;


            OPENSCENARIOLIB_EXP void SetFrom(const int from) override;

            OPENSCENARIOLIB_EXP void SetTo(const int to) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFrom(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTo(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFrom() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTo() const override;

            OPENSCENARIOLIB_EXP bool IsFromParameterized() override;
            OPENSCENARIOLIB_EXP bool IsToParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetFrom() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFrom() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTo() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTo() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeObjectPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeObjectPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeObjectPositionImpl: public BaseImpl, public IRelativeObjectPositionWriter, public std::enable_shared_from_this<RelativeObjectPositionImpl> 
        {
        private:
            bool _isSetDx = false;
            double _dx {};
            bool _isSetDy = false;
            double _dy {};
            bool _isSetDz = false;
            double _dz {0};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeObjectPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDy() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override;

            OPENSCENARIOLIB_EXP void SetDy(const double dy) override;

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDy(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDy() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDyParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDzParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDx() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDy() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDz() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDz() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeRoadPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeRoadPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeRoadPositionImpl: public BaseImpl, public IRelativeRoadPositionWriter, public std::enable_shared_from_this<RelativeRoadPositionImpl> 
        {
        private:
            bool _isSetDs = false;
            double _ds {};
            bool _isSetDt = false;
            double _dt {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeRoadPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDs() const override;
            OPENSCENARIOLIB_EXP double GetDt() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDs(const double ds) override;

            OPENSCENARIOLIB_EXP void SetDt(const double dt) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDs(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDt(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDs() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDt() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsDsParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDtParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDs() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDt() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeSpeedCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeSpeedCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeSpeedConditionImpl: public BaseImpl, public IRelativeSpeedConditionWriter, public std::enable_shared_from_this<RelativeSpeedConditionImpl> 
        {
        private:
            bool _isSetDirection = false;
            DirectionalDimension _direction {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeSpeedConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DirectionalDimension GetDirection() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetDirection(const DirectionalDimension direction) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDirection(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDirection() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsDirectionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetDirection() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirection() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeSpeedToMaster. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeSpeedToMaster)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeSpeedToMasterImpl: public BaseImpl, public IRelativeSpeedToMasterWriter, public std::enable_shared_from_this<RelativeSpeedToMasterImpl> 
        {
        private:
            bool _isSetSpeedTargetValueType = false;
            SpeedTargetValueType _speedTargetValueType {};
            bool _isSetValue = false;
            double _value {};
            bool _isSetSteadyState = false;
            std::shared_ptr<ISteadyStateWriter> _steadyState {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeSpeedToMasterImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP SpeedTargetValueType GetSpeedTargetValueType() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISteadyState> GetSteadyState() const override;


            OPENSCENARIOLIB_EXP void SetSpeedTargetValueType(const SpeedTargetValueType speedTargetValueType) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetSteadyState(std::shared_ptr<ISteadyStateWriter> steadyState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeedTargetValueType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeedTargetValueType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsSpeedTargetValueTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISteadyStateWriter> GetWriterSteadyState() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedTargetValueType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSteadyState() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSteadyState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeTargetLane. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetLane)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetLaneImpl: public BaseImpl, public IRelativeTargetLaneWriter, public std::enable_shared_from_this<RelativeTargetLaneImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetValue = false;
            int _value {};

        public:

			virtual void ResolveIntExpression(std::string& attributeKey, int& value) override;		
            OPENSCENARIOLIB_EXP RelativeTargetLaneImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP int GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetValue(const int value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeTargetLaneOffset. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetLaneOffset)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetLaneOffsetImpl: public BaseImpl, public IRelativeTargetLaneOffsetWriter, public std::enable_shared_from_this<RelativeTargetLaneOffsetImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeTargetLaneOffsetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeTargetSpeed. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeTargetSpeed)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeTargetSpeedImpl: public BaseImpl, public IRelativeTargetSpeedWriter, public std::enable_shared_from_this<RelativeTargetSpeedImpl> 
        {
        private:
            bool _isSetContinuous = false;
            bool _continuous {};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetSpeedTargetValueType = false;
            SpeedTargetValueType _speedTargetValueType {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeTargetSpeedImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP SpeedTargetValueType GetSpeedTargetValueType() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetSpeedTargetValueType(const SpeedTargetValueType speedTargetValueType) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeedTargetValueType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeedTargetValueType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSpeedTargetValueTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetContinuous() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedTargetValueType() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRelativeWorldPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRelativeWorldPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RelativeWorldPositionImpl: public BaseImpl, public IRelativeWorldPositionWriter, public std::enable_shared_from_this<RelativeWorldPositionImpl> 
        {
        private:
            bool _isSetDx = false;
            double _dx {};
            bool _isSetDy = false;
            double _dy {};
            bool _isSetDz = false;
            double _dz {0};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RelativeWorldPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDy() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override;

            OPENSCENARIOLIB_EXP void SetDy(const double dy) override;

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDy(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDy() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDyParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDzParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDx() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDy() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDz() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDz() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoadCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadConditionImpl: public BaseImpl, public IRoadConditionWriter, public std::enable_shared_from_this<RoadConditionImpl> 
        {
        private:
            bool _isSetFrictionScaleFactor = false;
            double _frictionScaleFactor {};
            bool _isSetWetness = false;
            Wetness _wetness {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RoadConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetFrictionScaleFactor() const override;
            OPENSCENARIOLIB_EXP Wetness GetWetness() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetFrictionScaleFactor(const double frictionScaleFactor) override;

            OPENSCENARIOLIB_EXP void SetWetness(const Wetness wetness) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFrictionScaleFactor(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWetness(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFrictionScaleFactor() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWetness() const override;

            OPENSCENARIOLIB_EXP bool IsFrictionScaleFactorParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWetnessParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFrictionScaleFactor() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetWetness() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWetness() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoadCursor. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadCursor)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadCursorImpl: public BaseImpl, public IRoadCursorWriter, public std::enable_shared_from_this<RoadCursorImpl> 
        {
        private:
            bool _isSetRoadId = false;
            std::string _roadId {};
            bool _isSetS = false;
            double _s {};
            bool _isSetLane = false;
            std::vector<std::shared_ptr<ILaneWriter>> _lane {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RoadCursorImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetRoadId() const override;
            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ILane>> GetLane() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ILaneWriter>> GetWriterLane() const override;
            OPENSCENARIOLIB_EXP int GetLaneSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILane> GetLaneAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetRoadId(const std::string roadId) override;

            OPENSCENARIOLIB_EXP void SetS(const double s) override;

            OPENSCENARIOLIB_EXP void SetLane(std::vector<std::shared_ptr<ILaneWriter>>& lane) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoadId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoadId() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override;

            OPENSCENARIOLIB_EXP bool IsRoadIdParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadId() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetS() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetS() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetLane() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLane() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoadNetwork. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadNetwork)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadNetworkImpl: public BaseImpl, public IRoadNetworkWriter, public std::enable_shared_from_this<RoadNetworkImpl> 
        {
        private:
            bool _isSetLogicFile = false;
            std::shared_ptr<IFileWriter> _logicFile {};
            bool _isSetSceneGraphFile = false;
            std::shared_ptr<IFileWriter> _sceneGraphFile {};
            bool _isSetTrafficSignals = false;
            std::vector<std::shared_ptr<ITrafficSignalControllerWriter>> _trafficSignals {};
            bool _isSetUsedArea = false;
            std::shared_ptr<IUsedAreaWriter> _usedArea {};

        public:

            OPENSCENARIOLIB_EXP RoadNetworkImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetLogicFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFile> GetSceneGraphFile() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalController>> GetTrafficSignals() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficSignalControllerWriter>> GetWriterTrafficSignals() const override;
            OPENSCENARIOLIB_EXP int GetTrafficSignalsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalController> GetTrafficSignalsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUsedArea> GetUsedArea() const override;


            OPENSCENARIOLIB_EXP void SetLogicFile(std::shared_ptr<IFileWriter> logicFile) override;

            OPENSCENARIOLIB_EXP void SetSceneGraphFile(std::shared_ptr<IFileWriter> sceneGraphFile) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignals(std::vector<std::shared_ptr<ITrafficSignalControllerWriter>>& trafficSignals) override;

            OPENSCENARIOLIB_EXP void SetUsedArea(std::shared_ptr<IUsedAreaWriter> usedArea) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterLogicFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFileWriter> GetWriterSceneGraphFile() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUsedAreaWriter> GetWriterUsedArea() const override;
            OPENSCENARIOLIB_EXP virtual void ResetLogicFile() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLogicFile() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSceneGraphFile() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSceneGraphFile() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficSignals() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignals() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetUsedArea() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetUsedArea() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoadPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadPositionImpl: public BaseImpl, public IRoadPositionWriter, public std::enable_shared_from_this<RoadPositionImpl> 
        {
        private:
            bool _isSetRoadId = false;
            std::string _roadId {};
            bool _isSetS = false;
            double _s {};
            bool _isSetT = false;
            double _t {};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RoadPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetRoadId() const override;
            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP double GetT() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;


            OPENSCENARIOLIB_EXP void SetRoadId(const std::string roadId) override;

            OPENSCENARIOLIB_EXP void SetS(const double s) override;

            OPENSCENARIOLIB_EXP void SetT(const double t) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoadId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToT(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoadId() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromT() const override;

            OPENSCENARIOLIB_EXP bool IsRoadIdParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadId() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetS() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetT() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoadRange. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoadRange)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoadRangeImpl: public BaseImpl, public IRoadRangeWriter, public std::enable_shared_from_this<RoadRangeImpl> 
        {
        private:
            bool _isSetLength = false;
            double _length {};
            bool _isSetRoadCursor = false;
            std::vector<std::shared_ptr<IRoadCursorWriter>> _roadCursor {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP RoadRangeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetLength() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoadCursor>> GetRoadCursor() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoadCursorWriter>> GetWriterRoadCursor() const override;
            OPENSCENARIOLIB_EXP int GetRoadCursorSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadCursor> GetRoadCursorAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetLength(const double length) override;

            OPENSCENARIOLIB_EXP void SetRoadCursor(std::vector<std::shared_ptr<IRoadCursorWriter>>& roadCursor) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToLength(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromLength() const override;

            OPENSCENARIOLIB_EXP bool IsLengthParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetLength() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetLength() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadCursor() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoute. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoute)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteImpl: public BaseImpl, public IRouteWriter, public std::enable_shared_from_this<RouteImpl> 
        {
        private:
            bool _isSetClosed = false;
            bool _closed {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetWaypoints = false;
            std::vector<std::shared_ptr<IWaypointWriter>> _waypoints {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP RouteImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetClosed() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IWaypoint>> GetWaypoints() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IWaypointWriter>> GetWriterWaypoints() const override;
            OPENSCENARIOLIB_EXP int GetWaypointsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWaypoint> GetWaypointsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetClosed(const bool closed) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetWaypoints(std::vector<std::shared_ptr<IWaypointWriter>>& waypoints) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToClosed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromClosed() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsClosedParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetClosed() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWaypoints() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRouteCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRouteCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteCatalogLocationImpl: public BaseImpl, public IRouteCatalogLocationWriter, public std::enable_shared_from_this<RouteCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP RouteCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoutePosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoutePosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoutePositionImpl: public BaseImpl, public IRoutePositionWriter, public std::enable_shared_from_this<RoutePositionImpl> 
        {
        private:
            bool _isSetRouteRef = false;
            std::shared_ptr<IRouteRefWriter> _routeRef {};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};
            bool _isSetInRoutePosition = false;
            std::shared_ptr<IInRoutePositionWriter> _inRoutePosition {};

        public:

            OPENSCENARIOLIB_EXP RoutePositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteRef> GetRouteRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInRoutePosition> GetInRoutePosition() const override;


            OPENSCENARIOLIB_EXP void SetRouteRef(std::shared_ptr<IRouteRefWriter> routeRef) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void SetInRoutePosition(std::shared_ptr<IInRoutePositionWriter> inRoutePosition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteRefWriter> GetWriterRouteRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IInRoutePositionWriter> GetWriterInRoutePosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRouteRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetInRoutePosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRouteRef. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRouteRef)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RouteRefImpl: public BaseImpl, public IRouteRefWriter, public std::enable_shared_from_this<RouteRefImpl> 
        {
        private:
            bool _isSetRoute = false;
            std::shared_ptr<IRouteWriter> _route {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};

        public:

            OPENSCENARIOLIB_EXP RouteRefImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRoute> GetRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetRoute(std::shared_ptr<IRouteWriter> route) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRouteWriter> GetWriterRoute() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoute() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IRoutingAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IRoutingAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class RoutingActionImpl: public BaseImpl, public IRoutingActionWriter, public std::enable_shared_from_this<RoutingActionImpl> 
        {
        private:
            bool _isSetAssignRouteAction = false;
            std::shared_ptr<IAssignRouteActionWriter> _assignRouteAction {};
            bool _isSetFollowTrajectoryAction = false;
            std::shared_ptr<IFollowTrajectoryActionWriter> _followTrajectoryAction {};
            bool _isSetAcquirePositionAction = false;
            std::shared_ptr<IAcquirePositionActionWriter> _acquirePositionAction {};
            bool _isSetRandomRouteAction = false;
            std::shared_ptr<IRandomRouteActionWriter> _randomRouteAction {};

        public:

            OPENSCENARIOLIB_EXP RoutingActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignRouteAction> GetAssignRouteAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFollowTrajectoryAction> GetFollowTrajectoryAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAcquirePositionAction> GetAcquirePositionAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRandomRouteAction> GetRandomRouteAction() const override;


            OPENSCENARIOLIB_EXP void SetAssignRouteAction(std::shared_ptr<IAssignRouteActionWriter> assignRouteAction) override;

            OPENSCENARIOLIB_EXP void SetFollowTrajectoryAction(std::shared_ptr<IFollowTrajectoryActionWriter> followTrajectoryAction) override;

            OPENSCENARIOLIB_EXP void SetAcquirePositionAction(std::shared_ptr<IAcquirePositionActionWriter> acquirePositionAction) override;

            OPENSCENARIOLIB_EXP void SetRandomRouteAction(std::shared_ptr<IRandomRouteActionWriter> randomRouteAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IAssignRouteActionWriter> GetWriterAssignRouteAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFollowTrajectoryActionWriter> GetWriterFollowTrajectoryAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAcquirePositionActionWriter> GetWriterAcquirePositionAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRandomRouteActionWriter> GetWriterRandomRouteAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAssignRouteAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFollowTrajectoryAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAcquirePositionAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRandomRouteAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IScenarioDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IScenarioDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ScenarioDefinitionImpl: public BaseImpl, public IScenarioDefinitionWriter, public std::enable_shared_from_this<ScenarioDefinitionImpl> 
        {
        private:
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetVariableDeclarations = false;
            std::vector<std::shared_ptr<IVariableDeclarationWriter>> _variableDeclarations {};
            bool _isSetMonitorDeclarations = false;
            std::vector<std::shared_ptr<IMonitorDeclarationWriter>> _monitorDeclarations {};
            bool _isSetCatalogLocations = false;
            std::shared_ptr<ICatalogLocationsWriter> _catalogLocations {};
            bool _isSetRoadNetwork = false;
            std::shared_ptr<IRoadNetworkWriter> _roadNetwork {};
            bool _isSetEntities = false;
            std::shared_ptr<IEntitiesWriter> _entities {};
            bool _isSetStoryboard = false;
            std::shared_ptr<IStoryboardWriter> _storyboard {};

        public:

            OPENSCENARIOLIB_EXP ScenarioDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVariableDeclaration>> GetVariableDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVariableDeclarationWriter>> GetWriterVariableDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetVariableDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableDeclaration> GetVariableDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMonitorDeclaration>> GetMonitorDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IMonitorDeclarationWriter>> GetWriterMonitorDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetMonitorDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IMonitorDeclaration> GetMonitorDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogLocations> GetCatalogLocations() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadNetwork> GetRoadNetwork() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntities> GetEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboard> GetStoryboard() const override;


            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetVariableDeclarations(std::vector<std::shared_ptr<IVariableDeclarationWriter>>& variableDeclarations) override;

            OPENSCENARIOLIB_EXP void SetMonitorDeclarations(std::vector<std::shared_ptr<IMonitorDeclarationWriter>>& monitorDeclarations) override;

            OPENSCENARIOLIB_EXP void SetCatalogLocations(std::shared_ptr<ICatalogLocationsWriter> catalogLocations) override;

            OPENSCENARIOLIB_EXP void SetRoadNetwork(std::shared_ptr<IRoadNetworkWriter> roadNetwork) override;

            OPENSCENARIOLIB_EXP void SetEntities(std::shared_ptr<IEntitiesWriter> entities) override;

            OPENSCENARIOLIB_EXP void SetStoryboard(std::shared_ptr<IStoryboardWriter> storyboard) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogLocationsWriter> GetWriterCatalogLocations() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadNetworkWriter> GetWriterRoadNetwork() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntitiesWriter> GetWriterEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStoryboardWriter> GetWriterStoryboard() const override;
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVariableDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetMonitorDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMonitorDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogLocations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadNetwork() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntities() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStoryboard() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IScenarioObject. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IScenarioObject)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ScenarioObjectImpl: public BaseImpl, public IScenarioObjectWriter, public std::enable_shared_from_this<ScenarioObjectImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetEntityObject = false;
            std::shared_ptr<IEntityObjectWriter> _entityObject {};
            bool _isSetObjectController = false;
            std::vector<std::shared_ptr<IObjectControllerWriter>> _objectController {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP ScenarioObjectImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObject> GetEntityObject() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IObjectController>> GetObjectController() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IObjectControllerWriter>> GetWriterObjectController() const override;
            OPENSCENARIOLIB_EXP int GetObjectControllerSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectController> GetObjectControllerAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetEntityObject(std::shared_ptr<IEntityObjectWriter> entityObject) override;

            OPENSCENARIOLIB_EXP void SetObjectController(std::vector<std::shared_ptr<IObjectControllerWriter>>& objectController) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObjectWriter> GetWriterEntityObject() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityObject() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetObjectController() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetObjectController() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IScenarioObjectTemplate. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IScenarioObjectTemplate)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ScenarioObjectTemplateImpl: public BaseImpl, public IScenarioObjectTemplateWriter, public std::enable_shared_from_this<ScenarioObjectTemplateImpl> 
        {
        private:
            bool _isSetEntitiyObject = false;
            std::shared_ptr<IEntityObjectWriter> _entitiyObject {};
            bool _isSetObjectController = false;
            std::vector<std::shared_ptr<IObjectControllerWriter>> _objectController {};

        public:

            OPENSCENARIOLIB_EXP ScenarioObjectTemplateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObject> GetEntitiyObject() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IObjectController>> GetObjectController() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IObjectControllerWriter>> GetWriterObjectController() const override;
            OPENSCENARIOLIB_EXP int GetObjectControllerSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IObjectController> GetObjectControllerAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetEntitiyObject(std::shared_ptr<IEntityObjectWriter> entitiyObject) override;

            OPENSCENARIOLIB_EXP void SetObjectController(std::vector<std::shared_ptr<IObjectControllerWriter>>& objectController) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityObjectWriter> GetWriterEntitiyObject() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntitiyObject() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetObjectController() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetObjectController() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISelectedEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISelectedEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SelectedEntitiesImpl: public BaseImpl, public ISelectedEntitiesWriter, public std::enable_shared_from_this<SelectedEntitiesImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRef {};
            bool _isSetByType = false;
            std::vector<std::shared_ptr<IByTypeWriter>> _byType {};

        public:

            OPENSCENARIOLIB_EXP SelectedEntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRef() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRef() const override;
            OPENSCENARIOLIB_EXP int GetEntityRefSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IByType>> GetByType() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IByTypeWriter>> GetWriterByType() const override;
            OPENSCENARIOLIB_EXP int GetByTypeSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IByType> GetByTypeAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRef) override;

            OPENSCENARIOLIB_EXP void SetByType(std::vector<std::shared_ptr<IByTypeWriter>>& byType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetByType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISensorReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISensorReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SensorReferenceImpl: public BaseImpl, public ISensorReferenceWriter, public std::enable_shared_from_this<SensorReferenceImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP SensorReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISensorReferenceSet. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISensorReferenceSet)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SensorReferenceSetImpl: public BaseImpl, public ISensorReferenceSetWriter, public std::enable_shared_from_this<SensorReferenceSetImpl> 
        {
        private:
            bool _isSetSensorReferences = false;
            std::vector<std::shared_ptr<ISensorReferenceWriter>> _sensorReferences {};

        public:

            OPENSCENARIOLIB_EXP SensorReferenceSetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ISensorReference>> GetSensorReferences() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ISensorReferenceWriter>> GetWriterSensorReferences() const override;
            OPENSCENARIOLIB_EXP int GetSensorReferencesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISensorReference> GetSensorReferencesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetSensorReferences(std::vector<std::shared_ptr<ISensorReferenceWriter>>& sensorReferences) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetSensorReferences() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISetMonitorAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISetMonitorAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SetMonitorActionImpl: public BaseImpl, public ISetMonitorActionWriter, public std::enable_shared_from_this<SetMonitorActionImpl> 
        {
        private:
            bool _isSetMonitorRef = false;
            std::shared_ptr<INamedReference<IMonitorDeclaration>> _monitorRef  = nullptr;
            bool _isSetValue = false;
            bool _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP SetMonitorActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IMonitorDeclaration>> GetMonitorRef() const override;
            OPENSCENARIOLIB_EXP bool GetValue() const override;


            OPENSCENARIOLIB_EXP void SetMonitorRef(std::shared_ptr<INamedReference<IMonitorDeclaration>> monitorRef) override;

            OPENSCENARIOLIB_EXP void SetValue(const bool value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMonitorRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMonitorRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsMonitorRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetMonitorRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IShape. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IShape)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ShapeImpl: public BaseImpl, public IShapeWriter, public std::enable_shared_from_this<ShapeImpl> 
        {
        private:
            bool _isSetPolyline = false;
            std::shared_ptr<IPolylineWriter> _polyline {};
            bool _isSetClothoid = false;
            std::shared_ptr<IClothoidWriter> _clothoid {};
            bool _isSetClothoidSpline = false;
            std::shared_ptr<IClothoidSplineWriter> _clothoidSpline {};
            bool _isSetNurbs = false;
            std::shared_ptr<INurbsWriter> _nurbs {};

        public:

            OPENSCENARIOLIB_EXP ShapeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPolyline> GetPolyline() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoid> GetClothoid() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoidSpline> GetClothoidSpline() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INurbs> GetNurbs() const override;


            OPENSCENARIOLIB_EXP void SetPolyline(std::shared_ptr<IPolylineWriter> polyline) override;

            OPENSCENARIOLIB_EXP void SetClothoid(std::shared_ptr<IClothoidWriter> clothoid) override;

            OPENSCENARIOLIB_EXP void SetClothoidSpline(std::shared_ptr<IClothoidSplineWriter> clothoidSpline) override;

            OPENSCENARIOLIB_EXP void SetNurbs(std::shared_ptr<INurbsWriter> nurbs) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPolylineWriter> GetWriterPolyline() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoidWriter> GetWriterClothoid() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IClothoidSplineWriter> GetWriterClothoidSpline() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INurbsWriter> GetWriterNurbs() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPolyline() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetClothoid() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetClothoidSpline() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetNurbs() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISimulationTimeCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISimulationTimeCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SimulationTimeConditionImpl: public BaseImpl, public ISimulationTimeConditionWriter, public std::enable_shared_from_this<SimulationTimeConditionImpl> 
        {
        private:
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP SimulationTimeConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISpeedAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedActionImpl: public BaseImpl, public ISpeedActionWriter, public std::enable_shared_from_this<SpeedActionImpl> 
        {
        private:
            bool _isSetSpeedActionDynamics = false;
            std::shared_ptr<ITransitionDynamicsWriter> _speedActionDynamics {};
            bool _isSetSpeedActionTarget = false;
            std::shared_ptr<ISpeedActionTargetWriter> _speedActionTarget {};

        public:

            OPENSCENARIOLIB_EXP SpeedActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamics> GetSpeedActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionTarget> GetSpeedActionTarget() const override;


            OPENSCENARIOLIB_EXP void SetSpeedActionDynamics(std::shared_ptr<ITransitionDynamicsWriter> speedActionDynamics) override;

            OPENSCENARIOLIB_EXP void SetSpeedActionTarget(std::shared_ptr<ISpeedActionTargetWriter> speedActionTarget) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITransitionDynamicsWriter> GetWriterSpeedActionDynamics() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedActionTargetWriter> GetWriterSpeedActionTarget() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedActionDynamics() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedActionTarget() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISpeedActionTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedActionTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedActionTargetImpl: public BaseImpl, public ISpeedActionTargetWriter, public std::enable_shared_from_this<SpeedActionTargetImpl> 
        {
        private:
            bool _isSetRelativeTargetSpeed = false;
            std::shared_ptr<IRelativeTargetSpeedWriter> _relativeTargetSpeed {};
            bool _isSetAbsoluteTargetSpeed = false;
            std::shared_ptr<IAbsoluteTargetSpeedWriter> _absoluteTargetSpeed {};

        public:

            OPENSCENARIOLIB_EXP SpeedActionTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetSpeed> GetRelativeTargetSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetSpeed> GetAbsoluteTargetSpeed() const override;


            OPENSCENARIOLIB_EXP void SetRelativeTargetSpeed(std::shared_ptr<IRelativeTargetSpeedWriter> relativeTargetSpeed) override;

            OPENSCENARIOLIB_EXP void SetAbsoluteTargetSpeed(std::shared_ptr<IAbsoluteTargetSpeedWriter> absoluteTargetSpeed) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRelativeTargetSpeedWriter> GetWriterRelativeTargetSpeed() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAbsoluteTargetSpeedWriter> GetWriterAbsoluteTargetSpeed() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeTargetSpeed() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAbsoluteTargetSpeed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISpeedCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedConditionImpl: public BaseImpl, public ISpeedConditionWriter, public std::enable_shared_from_this<SpeedConditionImpl> 
        {
        private:
            bool _isSetDirection = false;
            DirectionalDimension _direction {};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP SpeedConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DirectionalDimension GetDirection() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetDirection(const DirectionalDimension direction) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDirection(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDirection() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsDirectionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetDirection() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirection() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISpeedProfileAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedProfileAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedProfileActionImpl: public BaseImpl, public ISpeedProfileActionWriter, public std::enable_shared_from_this<SpeedProfileActionImpl> 
        {
        private:
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetFollowingMode = false;
            FollowingMode _followingMode {};
            bool _isSetDynamicConstraints = false;
            std::shared_ptr<IDynamicConstraintsWriter> _dynamicConstraints {};
            bool _isSetSpeedProfileEntry = false;
            std::vector<std::shared_ptr<ISpeedProfileEntryWriter>> _speedProfileEntry {};

        public:

            OPENSCENARIOLIB_EXP SpeedProfileActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP FollowingMode GetFollowingMode() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraints> GetDynamicConstraints() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ISpeedProfileEntry>> GetSpeedProfileEntry() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ISpeedProfileEntryWriter>> GetWriterSpeedProfileEntry() const override;
            OPENSCENARIOLIB_EXP int GetSpeedProfileEntrySize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISpeedProfileEntry> GetSpeedProfileEntryAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetFollowingMode(const FollowingMode followingMode) override;

            OPENSCENARIOLIB_EXP void SetDynamicConstraints(std::shared_ptr<IDynamicConstraintsWriter> dynamicConstraints) override;

            OPENSCENARIOLIB_EXP void SetSpeedProfileEntry(std::vector<std::shared_ptr<ISpeedProfileEntryWriter>>& speedProfileEntry) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFollowingMode(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFollowingMode() const override;

            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFollowingModeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDynamicConstraintsWriter> GetWriterDynamicConstraints() const override;
            OPENSCENARIOLIB_EXP virtual void ResetEntityRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFollowingMode() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDynamicConstraints() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicConstraints() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeedProfileEntry() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISpeedProfileEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISpeedProfileEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SpeedProfileEntryImpl: public BaseImpl, public ISpeedProfileEntryWriter, public std::enable_shared_from_this<SpeedProfileEntryImpl> 
        {
        private:
            bool _isSetSpeed = false;
            double _speed {};
            bool _isSetTime = false;
            double _time {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP SpeedProfileEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetSpeed() const override;
            OPENSCENARIOLIB_EXP double GetTime() const override;


            OPENSCENARIOLIB_EXP void SetSpeed(const double speed) override;

            OPENSCENARIOLIB_EXP void SetTime(const double time) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeed() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override;

            OPENSCENARIOLIB_EXP bool IsSpeedParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeed() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTime() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStandStillCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStandStillCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StandStillConditionImpl: public BaseImpl, public IStandStillConditionWriter, public std::enable_shared_from_this<StandStillConditionImpl> 
        {
        private:
            bool _isSetDuration = false;
            double _duration {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP StandStillConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDuration() const override;


            OPENSCENARIOLIB_EXP void SetDuration(const double duration) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDuration(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDuration() const override;

            OPENSCENARIOLIB_EXP bool IsDurationParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDuration() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISteadyState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISteadyState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SteadyStateImpl: public BaseImpl, public ISteadyStateWriter, public std::enable_shared_from_this<SteadyStateImpl> 
        {
        private:
            bool _isSetTargetDistanceSteadyState = false;
            std::shared_ptr<ITargetDistanceSteadyStateWriter> _targetDistanceSteadyState {};
            bool _isSetTargetTimeSteadyState = false;
            std::shared_ptr<ITargetTimeSteadyStateWriter> _targetTimeSteadyState {};

        public:

            OPENSCENARIOLIB_EXP SteadyStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITargetDistanceSteadyState> GetTargetDistanceSteadyState() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITargetTimeSteadyState> GetTargetTimeSteadyState() const override;


            OPENSCENARIOLIB_EXP void SetTargetDistanceSteadyState(std::shared_ptr<ITargetDistanceSteadyStateWriter> targetDistanceSteadyState) override;

            OPENSCENARIOLIB_EXP void SetTargetTimeSteadyState(std::shared_ptr<ITargetTimeSteadyStateWriter> targetTimeSteadyState) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITargetDistanceSteadyStateWriter> GetWriterTargetDistanceSteadyState() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITargetTimeSteadyStateWriter> GetWriterTargetTimeSteadyState() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetDistanceSteadyState() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetTimeSteadyState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStochastic. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStochastic)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StochasticImpl: public BaseImpl, public IStochasticWriter, public std::enable_shared_from_this<StochasticImpl> 
        {
        private:
            bool _isSetNumberOfTestRuns = false;
            uint32_t _numberOfTestRuns {};
            bool _isSetRandomSeed = false;
            double _randomSeed {};
            bool _isSetStochasticDistributions = false;
            std::vector<std::shared_ptr<IStochasticDistributionWriter>> _stochasticDistributions {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP StochasticImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP uint32_t GetNumberOfTestRuns() const override;
            OPENSCENARIOLIB_EXP double GetRandomSeed() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStochasticDistribution>> GetStochasticDistributions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStochasticDistributionWriter>> GetWriterStochasticDistributions() const override;
            OPENSCENARIOLIB_EXP int GetStochasticDistributionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStochasticDistribution> GetStochasticDistributionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetNumberOfTestRuns(const uint32_t numberOfTestRuns) override;

            OPENSCENARIOLIB_EXP void SetRandomSeed(const double randomSeed) override;

            OPENSCENARIOLIB_EXP void SetStochasticDistributions(std::vector<std::shared_ptr<IStochasticDistributionWriter>>& stochasticDistributions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToNumberOfTestRuns(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRandomSeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumberOfTestRuns() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRandomSeed() const override;

            OPENSCENARIOLIB_EXP bool IsNumberOfTestRunsParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRandomSeedParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetNumberOfTestRuns() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRandomSeed() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRandomSeed() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStochasticDistributions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStochasticDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStochasticDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StochasticDistributionImpl: public BaseImpl, public IStochasticDistributionWriter, public std::enable_shared_from_this<StochasticDistributionImpl> 
        {
        private:
            bool _isSetParameterName = false;
            std::string _parameterName {};
            bool _isSetStochasticDistributionType = false;
            std::shared_ptr<IStochasticDistributionTypeWriter> _stochasticDistributionType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP StochasticDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetParameterName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStochasticDistributionType> GetStochasticDistributionType() const override;


            OPENSCENARIOLIB_EXP void SetParameterName(const std::string parameterName) override;

            OPENSCENARIOLIB_EXP void SetStochasticDistributionType(std::shared_ptr<IStochasticDistributionTypeWriter> stochasticDistributionType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToParameterName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromParameterName() const override;

            OPENSCENARIOLIB_EXP bool IsParameterNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IStochasticDistributionTypeWriter> GetWriterStochasticDistributionType() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStochasticDistributionType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStochasticDistributionType. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStochasticDistributionType)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StochasticDistributionTypeImpl: public BaseImpl, public IStochasticDistributionTypeWriter, public std::enable_shared_from_this<StochasticDistributionTypeImpl> 
        {
        private:
            bool _isSetProbabilityDistributionSet = false;
            std::shared_ptr<IProbabilityDistributionSetWriter> _probabilityDistributionSet {};
            bool _isSetNormalDistribution = false;
            std::shared_ptr<INormalDistributionWriter> _normalDistribution {};
            bool _isSetLogNormalDistribution = false;
            std::shared_ptr<ILogNormalDistributionWriter> _logNormalDistribution {};
            bool _isSetUniformDistribution = false;
            std::shared_ptr<IUniformDistributionWriter> _uniformDistribution {};
            bool _isSetPoissonDistribution = false;
            std::shared_ptr<IPoissonDistributionWriter> _poissonDistribution {};
            bool _isSetHistogram = false;
            std::shared_ptr<IHistogramWriter> _histogram {};
            bool _isSetUserDefinedDistribution = false;
            std::shared_ptr<IUserDefinedDistributionWriter> _userDefinedDistribution {};

        public:

            OPENSCENARIOLIB_EXP StochasticDistributionTypeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IProbabilityDistributionSet> GetProbabilityDistributionSet() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INormalDistribution> GetNormalDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILogNormalDistribution> GetLogNormalDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUniformDistribution> GetUniformDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPoissonDistribution> GetPoissonDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IHistogram> GetHistogram() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedDistribution> GetUserDefinedDistribution() const override;


            OPENSCENARIOLIB_EXP void SetProbabilityDistributionSet(std::shared_ptr<IProbabilityDistributionSetWriter> probabilityDistributionSet) override;

            OPENSCENARIOLIB_EXP void SetNormalDistribution(std::shared_ptr<INormalDistributionWriter> normalDistribution) override;

            OPENSCENARIOLIB_EXP void SetLogNormalDistribution(std::shared_ptr<ILogNormalDistributionWriter> logNormalDistribution) override;

            OPENSCENARIOLIB_EXP void SetUniformDistribution(std::shared_ptr<IUniformDistributionWriter> uniformDistribution) override;

            OPENSCENARIOLIB_EXP void SetPoissonDistribution(std::shared_ptr<IPoissonDistributionWriter> poissonDistribution) override;

            OPENSCENARIOLIB_EXP void SetHistogram(std::shared_ptr<IHistogramWriter> histogram) override;

            OPENSCENARIOLIB_EXP void SetUserDefinedDistribution(std::shared_ptr<IUserDefinedDistributionWriter> userDefinedDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IProbabilityDistributionSetWriter> GetWriterProbabilityDistributionSet() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INormalDistributionWriter> GetWriterNormalDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ILogNormalDistributionWriter> GetWriterLogNormalDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUniformDistributionWriter> GetWriterUniformDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPoissonDistributionWriter> GetWriterPoissonDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IHistogramWriter> GetWriterHistogram() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IUserDefinedDistributionWriter> GetWriterUserDefinedDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProbabilityDistributionSet() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetNormalDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetLogNormalDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUniformDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPoissonDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetHistogram() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryImpl: public BaseImpl, public IStoryWriter, public std::enable_shared_from_this<StoryImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetActs = false;
            std::vector<std::shared_ptr<IActWriter>> _acts {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP StoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IAct>> GetActs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IActWriter>> GetWriterActs() const override;
            OPENSCENARIOLIB_EXP int GetActsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAct> GetActsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetActs(std::vector<std::shared_ptr<IActWriter>>& acts) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetActs() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStoryboard. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStoryboard)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryboardImpl: public BaseImpl, public IStoryboardWriter, public std::enable_shared_from_this<StoryboardImpl> 
        {
        private:
            bool _isSetInit = false;
            std::shared_ptr<IInitWriter> _init {};
            bool _isSetStories = false;
            std::vector<std::shared_ptr<IStoryWriter>> _stories {};
            bool _isSetStopTrigger = false;
            std::shared_ptr<ITriggerWriter> _stopTrigger {};

        public:

            OPENSCENARIOLIB_EXP StoryboardImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IInit> GetInit() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStory>> GetStories() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IStoryWriter>> GetWriterStories() const override;
            OPENSCENARIOLIB_EXP int GetStoriesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IStory> GetStoriesAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrigger> GetStopTrigger() const override;


            OPENSCENARIOLIB_EXP void SetInit(std::shared_ptr<IInitWriter> init) override;

            OPENSCENARIOLIB_EXP void SetStories(std::vector<std::shared_ptr<IStoryWriter>>& stories) override;

            OPENSCENARIOLIB_EXP void SetStopTrigger(std::shared_ptr<ITriggerWriter> stopTrigger) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IInitWriter> GetWriterInit() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITriggerWriter> GetWriterStopTrigger() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetInit() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStories() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStories() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetStopTrigger() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetStopTrigger() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IStoryboardElementStateCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IStoryboardElementStateCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class StoryboardElementStateConditionImpl: public BaseImpl, public IStoryboardElementStateConditionWriter, public std::enable_shared_from_this<StoryboardElementStateConditionImpl> 
        {
        private:
            bool _isSetState = false;
            StoryboardElementState _state {};
            bool _isSetStoryboardElementRef = false;
            std::shared_ptr<INamedReference<IStoryboardElement>> _storyboardElementRef  = nullptr;
            bool _isSetStoryboardElementType = false;
            StoryboardElementType _storyboardElementType {};

        public:

            OPENSCENARIOLIB_EXP StoryboardElementStateConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP StoryboardElementState GetState() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IStoryboardElement>> GetStoryboardElementRef() const override;
            OPENSCENARIOLIB_EXP StoryboardElementType GetStoryboardElementType() const override;


            OPENSCENARIOLIB_EXP void SetState(const StoryboardElementState state) override;

            OPENSCENARIOLIB_EXP void SetStoryboardElementRef(std::shared_ptr<INamedReference<IStoryboardElement>> storyboardElementRef) override;

            OPENSCENARIOLIB_EXP void SetStoryboardElementType(const StoryboardElementType storyboardElementType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToStoryboardElementRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToStoryboardElementType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromStoryboardElementRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromStoryboardElementType() const override;

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStoryboardElementRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStoryboardElementTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStoryboardElementRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetStoryboardElementType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISun. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISun)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SunImpl: public BaseImpl, public ISunWriter, public std::enable_shared_from_this<SunImpl> 
        {
        private:
            bool _isSetAzimuth = false;
            double _azimuth {};
            bool _isSetElevation = false;
            double _elevation {};
            bool _isSetIlluminance = false;
            double _illuminance {0};
            bool _isSetIntensity = false;
            double _intensity {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP SunImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAzimuth() const override;
            OPENSCENARIOLIB_EXP double GetElevation() const override;
            OPENSCENARIOLIB_EXP double GetIlluminance() const override;
            OPENSCENARIOLIB_EXP double GetIntensity() const override;


            OPENSCENARIOLIB_EXP void SetAzimuth(const double azimuth) override;

            OPENSCENARIOLIB_EXP void SetElevation(const double elevation) override;

            OPENSCENARIOLIB_EXP void SetIlluminance(const double illuminance) override;

            OPENSCENARIOLIB_EXP void SetIntensity(const double intensity) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAzimuth(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToElevation(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToIlluminance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToIntensity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAzimuth() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromElevation() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromIlluminance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromIntensity() const override;

            OPENSCENARIOLIB_EXP bool IsAzimuthParameterized() override;
            OPENSCENARIOLIB_EXP bool IsElevationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsIlluminanceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsIntensityParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetAzimuth() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetElevation() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetIlluminance() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetIlluminance() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetIntensity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetIntensity() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ISynchronizeAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ISynchronizeAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class SynchronizeActionImpl: public BaseImpl, public ISynchronizeActionWriter, public std::enable_shared_from_this<SynchronizeActionImpl> 
        {
        private:
            bool _isSetMasterEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _masterEntityRef  = nullptr;
            bool _isSetTargetTolerance = false;
            double _targetTolerance {};
            bool _isSetTargetToleranceMaster = false;
            double _targetToleranceMaster {};
            bool _isSetTargetPositionMaster = false;
            std::shared_ptr<IPositionWriter> _targetPositionMaster {};
            bool _isSetTargetPosition = false;
            std::shared_ptr<IPositionWriter> _targetPosition {};
            bool _isSetFinalSpeed = false;
            std::shared_ptr<IFinalSpeedWriter> _finalSpeed {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP SynchronizeActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetMasterEntityRef() const override;
            OPENSCENARIOLIB_EXP double GetTargetTolerance() const override;
            OPENSCENARIOLIB_EXP double GetTargetToleranceMaster() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetTargetPositionMaster() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetTargetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFinalSpeed> GetFinalSpeed() const override;


            OPENSCENARIOLIB_EXP void SetMasterEntityRef(std::shared_ptr<INamedReference<IEntity>> masterEntityRef) override;

            OPENSCENARIOLIB_EXP void SetTargetTolerance(const double targetTolerance) override;

            OPENSCENARIOLIB_EXP void SetTargetToleranceMaster(const double targetToleranceMaster) override;

            OPENSCENARIOLIB_EXP void SetTargetPositionMaster(std::shared_ptr<IPositionWriter> targetPositionMaster) override;

            OPENSCENARIOLIB_EXP void SetTargetPosition(std::shared_ptr<IPositionWriter> targetPosition) override;

            OPENSCENARIOLIB_EXP void SetFinalSpeed(std::shared_ptr<IFinalSpeedWriter> finalSpeed) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMasterEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTargetTolerance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTargetToleranceMaster(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMasterEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTargetTolerance() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTargetToleranceMaster() const override;

            OPENSCENARIOLIB_EXP bool IsMasterEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTargetToleranceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTargetToleranceMasterParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterTargetPositionMaster() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterTargetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFinalSpeedWriter> GetWriterFinalSpeed() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMasterEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTargetTolerance() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetTolerance() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTargetToleranceMaster() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetToleranceMaster() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetPositionMaster() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTargetPosition() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFinalSpeed() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFinalSpeed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITargetDistanceSteadyState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITargetDistanceSteadyState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TargetDistanceSteadyStateImpl: public BaseImpl, public ITargetDistanceSteadyStateWriter, public std::enable_shared_from_this<TargetDistanceSteadyStateImpl> 
        {
        private:
            bool _isSetDistance = false;
            double _distance {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TargetDistanceSteadyStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDistance() const override;


            OPENSCENARIOLIB_EXP void SetDistance(const double distance) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDistance(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDistance() const override;

            OPENSCENARIOLIB_EXP bool IsDistanceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDistance() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITargetTimeSteadyState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITargetTimeSteadyState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TargetTimeSteadyStateImpl: public BaseImpl, public ITargetTimeSteadyStateWriter, public std::enable_shared_from_this<TargetTimeSteadyStateImpl> 
        {
        private:
            bool _isSetTime = false;
            double _time {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TargetTimeSteadyStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTime() const override;


            OPENSCENARIOLIB_EXP void SetTime(const double time) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override;

            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetTime() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITeleportAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITeleportAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TeleportActionImpl: public BaseImpl, public ITeleportActionWriter, public std::enable_shared_from_this<TeleportActionImpl> 
        {
        private:
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

            OPENSCENARIOLIB_EXP TeleportActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeHeadwayCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeHeadwayCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeHeadwayConditionImpl: public BaseImpl, public ITimeHeadwayConditionWriter, public std::enable_shared_from_this<TimeHeadwayConditionImpl> 
        {
        private:
            bool _isSetAlongRoute = false;
            bool _alongRoute {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetEntityRef = false;
            std::shared_ptr<INamedReference<IEntity>> _entityRef  = nullptr;
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetRelativeDistanceType = false;
            RelativeDistanceType _relativeDistanceType {RelativeDistanceType::RelativeDistanceTypeEnum::EUCLIDIAN_DISTANCE};
            bool _isSetRoutingAlgorithm = false;
            RoutingAlgorithm _routingAlgorithm {};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TimeHeadwayConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IEntity>> GetEntityRef() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP RelativeDistanceType GetRelativeDistanceType() const override;
            OPENSCENARIOLIB_EXP RoutingAlgorithm GetRoutingAlgorithm() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<INamedReference<IEntity>> entityRef) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetRelativeDistanceType(const RelativeDistanceType relativeDistanceType) override;

            OPENSCENARIOLIB_EXP void SetRoutingAlgorithm(const RoutingAlgorithm routingAlgorithm) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToEntityRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRelativeDistanceType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoutingAlgorithm(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromEntityRef() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRelativeDistanceType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoutingAlgorithm() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsEntityRefParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRelativeDistanceTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoutingAlgorithmParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetAlongRoute() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAlongRoute() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRelativeDistanceType() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeDistanceType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoutingAlgorithm() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutingAlgorithm() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeOfDay. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeOfDay)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeOfDayImpl: public BaseImpl, public ITimeOfDayWriter, public std::enable_shared_from_this<TimeOfDayImpl> 
        {
        private:
            bool _isSetAnimation = false;
            bool _animation {};
            bool _isSetDateTime = false;
            DateTime _dateTime {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDateTimeExpression(std::string& attributeKey, DateTime& value) override;		
            OPENSCENARIOLIB_EXP TimeOfDayImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetAnimation() const override;
            OPENSCENARIOLIB_EXP DateTime GetDateTime() const override;


            OPENSCENARIOLIB_EXP void SetAnimation(const bool animation) override;

            OPENSCENARIOLIB_EXP void SetDateTime(const DateTime dateTime) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAnimation(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDateTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAnimation() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDateTime() const override;

            OPENSCENARIOLIB_EXP bool IsAnimationParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDateTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetAnimation() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDateTime() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeOfDayCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeOfDayCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeOfDayConditionImpl: public BaseImpl, public ITimeOfDayConditionWriter, public std::enable_shared_from_this<TimeOfDayConditionImpl> 
        {
        private:
            bool _isSetDateTime = false;
            DateTime _dateTime {};
            bool _isSetRule = false;
            Rule _rule {};

        public:

			virtual void ResolveDateTimeExpression(std::string& attributeKey, DateTime& value) override;		
            OPENSCENARIOLIB_EXP TimeOfDayConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DateTime GetDateTime() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;


            OPENSCENARIOLIB_EXP void SetDateTime(const DateTime dateTime) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDateTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDateTime() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP bool IsDateTimeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDateTime() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeReference. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeReference)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeReferenceImpl: public BaseImpl, public ITimeReferenceWriter, public std::enable_shared_from_this<TimeReferenceImpl> 
        {
        private:
            bool _isSetNone = false;
            std::shared_ptr<INoneWriter> _none {};
            bool _isSetTiming = false;
            std::shared_ptr<ITimingWriter> _timing {};

        public:

            OPENSCENARIOLIB_EXP TimeReferenceImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INone> GetNone() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITiming> GetTiming() const override;


            OPENSCENARIOLIB_EXP void SetNone(std::shared_ptr<INoneWriter> none) override;

            OPENSCENARIOLIB_EXP void SetTiming(std::shared_ptr<ITimingWriter> timing) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<INoneWriter> GetWriterNone() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimingWriter> GetWriterTiming() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetNone() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTiming() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeToCollisionCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeToCollisionCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeToCollisionConditionImpl: public BaseImpl, public ITimeToCollisionConditionWriter, public std::enable_shared_from_this<TimeToCollisionConditionImpl> 
        {
        private:
            bool _isSetAlongRoute = false;
            bool _alongRoute {};
            bool _isSetCoordinateSystem = false;
            CoordinateSystem _coordinateSystem {CoordinateSystem::CoordinateSystemEnum::ENTITY};
            bool _isSetFreespace = false;
            bool _freespace {};
            bool _isSetRelativeDistanceType = false;
            RelativeDistanceType _relativeDistanceType {RelativeDistanceType::RelativeDistanceTypeEnum::EUCLIDIAN_DISTANCE};
            bool _isSetRoutingAlgorithm = false;
            RoutingAlgorithm _routingAlgorithm {};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            double _value {};
            bool _isSetTimeToCollisionConditionTarget = false;
            std::shared_ptr<ITimeToCollisionConditionTargetWriter> _timeToCollisionConditionTarget {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TimeToCollisionConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetAlongRoute() const override;
            OPENSCENARIOLIB_EXP CoordinateSystem GetCoordinateSystem() const override;
            OPENSCENARIOLIB_EXP bool GetFreespace() const override;
            OPENSCENARIOLIB_EXP RelativeDistanceType GetRelativeDistanceType() const override;
            OPENSCENARIOLIB_EXP RoutingAlgorithm GetRoutingAlgorithm() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionTarget> GetTimeToCollisionConditionTarget() const override;


            OPENSCENARIOLIB_EXP void SetAlongRoute(const bool alongRoute) override;

            OPENSCENARIOLIB_EXP void SetCoordinateSystem(const CoordinateSystem coordinateSystem) override;

            OPENSCENARIOLIB_EXP void SetFreespace(const bool freespace) override;

            OPENSCENARIOLIB_EXP void SetRelativeDistanceType(const RelativeDistanceType relativeDistanceType) override;

            OPENSCENARIOLIB_EXP void SetRoutingAlgorithm(const RoutingAlgorithm routingAlgorithm) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void SetTimeToCollisionConditionTarget(std::shared_ptr<ITimeToCollisionConditionTargetWriter> timeToCollisionConditionTarget) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAlongRoute(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCoordinateSystem(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFreespace(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRelativeDistanceType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRoutingAlgorithm(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAlongRoute() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCoordinateSystem() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFreespace() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRelativeDistanceType() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRoutingAlgorithm() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsAlongRouteParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCoordinateSystemParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFreespaceParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRelativeDistanceTypeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoutingAlgorithmParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITimeToCollisionConditionTargetWriter> GetWriterTimeToCollisionConditionTarget() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAlongRoute() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAlongRoute() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCoordinateSystem() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCoordinateSystem() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetFreespace() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRelativeDistanceType() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRelativeDistanceType() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRoutingAlgorithm() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRoutingAlgorithm() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTimeToCollisionConditionTarget() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITimeToCollisionConditionTarget. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITimeToCollisionConditionTarget)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimeToCollisionConditionTargetImpl: public BaseImpl, public ITimeToCollisionConditionTargetWriter, public std::enable_shared_from_this<TimeToCollisionConditionTargetImpl> 
        {
        private:
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};
            bool _isSetEntityRef = false;
            std::shared_ptr<IEntityRefWriter> _entityRef {};

        public:

            OPENSCENARIOLIB_EXP TimeToCollisionConditionTargetImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRef() const override;


            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void SetEntityRef(std::shared_ptr<IEntityRefWriter> entityRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRefWriter> GetWriterEntityRef() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITiming. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITiming)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TimingImpl: public BaseImpl, public ITimingWriter, public std::enable_shared_from_this<TimingImpl> 
        {
        private:
            bool _isSetDomainAbsoluteRelative = false;
            ReferenceContext _domainAbsoluteRelative {};
            bool _isSetOffset = false;
            double _offset {};
            bool _isSetScale = false;
            double _scale {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TimingImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP ReferenceContext GetDomainAbsoluteRelative() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP double GetScale() const override;


            OPENSCENARIOLIB_EXP void SetDomainAbsoluteRelative(const ReferenceContext domainAbsoluteRelative) override;

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override;

            OPENSCENARIOLIB_EXP void SetScale(const double scale) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDomainAbsoluteRelative(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToScale(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDomainAbsoluteRelative() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromScale() const override;

            OPENSCENARIOLIB_EXP bool IsDomainAbsoluteRelativeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override;
            OPENSCENARIOLIB_EXP bool IsScaleParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDomainAbsoluteRelative() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetScale() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficActionImpl: public BaseImpl, public ITrafficActionWriter, public std::enable_shared_from_this<TrafficActionImpl> 
        {
        private:
            bool _isSetTrafficName = false;
            std::string _trafficName {};
            bool _isSetTrafficSourceAction = false;
            std::shared_ptr<ITrafficSourceActionWriter> _trafficSourceAction {};
            bool _isSetTrafficSinkAction = false;
            std::shared_ptr<ITrafficSinkActionWriter> _trafficSinkAction {};
            bool _isSetTrafficSwarmAction = false;
            std::shared_ptr<ITrafficSwarmActionWriter> _trafficSwarmAction {};
            bool _isSetTrafficAreaAction = false;
            std::shared_ptr<ITrafficAreaActionWriter> _trafficAreaAction {};
            bool _isSetTrafficStopAction = false;
            std::shared_ptr<ITrafficStopActionWriter> _trafficStopAction {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetTrafficName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSourceAction> GetTrafficSourceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSinkAction> GetTrafficSinkAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSwarmAction> GetTrafficSwarmAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficAreaAction> GetTrafficAreaAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficStopAction> GetTrafficStopAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficName(const std::string trafficName) override;

            OPENSCENARIOLIB_EXP void SetTrafficSourceAction(std::shared_ptr<ITrafficSourceActionWriter> trafficSourceAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficSinkAction(std::shared_ptr<ITrafficSinkActionWriter> trafficSinkAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficSwarmAction(std::shared_ptr<ITrafficSwarmActionWriter> trafficSwarmAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficAreaAction(std::shared_ptr<ITrafficAreaActionWriter> trafficAreaAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficStopAction(std::shared_ptr<ITrafficStopActionWriter> trafficStopAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficName() const override;

            OPENSCENARIOLIB_EXP bool IsTrafficNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSourceActionWriter> GetWriterTrafficSourceAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSinkActionWriter> GetWriterTrafficSinkAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSwarmActionWriter> GetWriterTrafficSwarmAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficAreaActionWriter> GetWriterTrafficAreaAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficStopActionWriter> GetWriterTrafficStopAction() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTrafficName() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSourceAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSinkAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSwarmAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficAreaAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficStopAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficArea. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficArea)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficAreaImpl: public BaseImpl, public ITrafficAreaWriter, public std::enable_shared_from_this<TrafficAreaImpl> 
        {
        private:
            bool _isSetPolygon = false;
            std::shared_ptr<IPolygonWriter> _polygon {};
            bool _isSetRoadRange = false;
            std::vector<std::shared_ptr<IRoadRangeWriter>> _roadRange {};

        public:

            OPENSCENARIOLIB_EXP TrafficAreaImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IPolygon> GetPolygon() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoadRange>> GetRoadRange() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IRoadRangeWriter>> GetWriterRoadRange() const override;
            OPENSCENARIOLIB_EXP int GetRoadRangeSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRoadRange> GetRoadRangeAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetPolygon(std::shared_ptr<IPolygonWriter> polygon) override;

            OPENSCENARIOLIB_EXP void SetRoadRange(std::vector<std::shared_ptr<IRoadRangeWriter>>& roadRange) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPolygonWriter> GetWriterPolygon() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPolygon() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRoadRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficAreaAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficAreaAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficAreaActionImpl: public BaseImpl, public ITrafficAreaActionWriter, public std::enable_shared_from_this<TrafficAreaActionImpl> 
        {
        private:
            bool _isSetContinuous = false;
            bool _continuous {};
            bool _isSetNumberOfEntities = false;
            uint32_t _numberOfEntities {};
            bool _isSetTrafficDistribution = false;
            std::shared_ptr<ITrafficDistributionWriter> _trafficDistribution {};
            bool _isSetTrafficArea = false;
            std::shared_ptr<ITrafficAreaWriter> _trafficArea {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP TrafficAreaActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetContinuous() const override;
            OPENSCENARIOLIB_EXP uint32_t GetNumberOfEntities() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistribution> GetTrafficDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficArea> GetTrafficArea() const override;


            OPENSCENARIOLIB_EXP void SetContinuous(const bool continuous) override;

            OPENSCENARIOLIB_EXP void SetNumberOfEntities(const uint32_t numberOfEntities) override;

            OPENSCENARIOLIB_EXP void SetTrafficDistribution(std::shared_ptr<ITrafficDistributionWriter> trafficDistribution) override;

            OPENSCENARIOLIB_EXP void SetTrafficArea(std::shared_ptr<ITrafficAreaWriter> trafficArea) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContinuous(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToNumberOfEntities(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContinuous() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumberOfEntities() const override;

            OPENSCENARIOLIB_EXP bool IsContinuousParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNumberOfEntitiesParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistributionWriter> GetWriterTrafficDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficAreaWriter> GetWriterTrafficArea() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetContinuous() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetNumberOfEntities() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficArea() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficDefinition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficDefinition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficDefinitionImpl: public BaseImpl, public ITrafficDefinitionWriter, public std::enable_shared_from_this<TrafficDefinitionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetVehicleCategoryDistribution = false;
            std::shared_ptr<IVehicleCategoryDistributionWriter> _vehicleCategoryDistribution {};
            bool _isSetVehicleRoleDistribution = false;
            std::shared_ptr<IVehicleRoleDistributionWriter> _vehicleRoleDistribution {};
            bool _isSetControllerDistribution = false;
            std::shared_ptr<IControllerDistributionWriter> _controllerDistribution {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficDefinitionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistribution> GetVehicleCategoryDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleRoleDistribution> GetVehicleRoleDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistribution> GetControllerDistribution() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetVehicleCategoryDistribution(std::shared_ptr<IVehicleCategoryDistributionWriter> vehicleCategoryDistribution) override;

            OPENSCENARIOLIB_EXP void SetVehicleRoleDistribution(std::shared_ptr<IVehicleRoleDistributionWriter> vehicleRoleDistribution) override;

            OPENSCENARIOLIB_EXP void SetControllerDistribution(std::shared_ptr<IControllerDistributionWriter> controllerDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistributionWriter> GetWriterVehicleCategoryDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleRoleDistributionWriter> GetWriterVehicleRoleDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IControllerDistributionWriter> GetWriterControllerDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleCategoryDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVehicleRoleDistribution() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleRoleDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetControllerDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficDistributionImpl: public BaseImpl, public ITrafficDistributionWriter, public std::enable_shared_from_this<TrafficDistributionImpl> 
        {
        private:
            bool _isSetTrafficDistributionEntry = false;
            std::vector<std::shared_ptr<ITrafficDistributionEntryWriter>> _trafficDistributionEntry {};

        public:

            OPENSCENARIOLIB_EXP TrafficDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficDistributionEntry>> GetTrafficDistributionEntry() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ITrafficDistributionEntryWriter>> GetWriterTrafficDistributionEntry() const override;
            OPENSCENARIOLIB_EXP int GetTrafficDistributionEntrySize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistributionEntry> GetTrafficDistributionEntryAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetTrafficDistributionEntry(std::vector<std::shared_ptr<ITrafficDistributionEntryWriter>>& trafficDistributionEntry) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDistributionEntry() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficDistributionEntryImpl: public BaseImpl, public ITrafficDistributionEntryWriter, public std::enable_shared_from_this<TrafficDistributionEntryImpl> 
        {
        private:
            bool _isSetWeight = false;
            double _weight {};
            bool _isSetEntityDistribution = false;
            std::shared_ptr<IEntityDistributionWriter> _entityDistribution {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrafficDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetWeight() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityDistribution> GetEntityDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;


            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void SetEntityDistribution(std::shared_ptr<IEntityDistributionWriter> entityDistribution) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityDistributionWriter> GetWriterEntityDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalActionImpl: public BaseImpl, public ITrafficSignalActionWriter, public std::enable_shared_from_this<TrafficSignalActionImpl> 
        {
        private:
            bool _isSetTrafficSignalControllerAction = false;
            std::shared_ptr<ITrafficSignalControllerActionWriter> _trafficSignalControllerAction {};
            bool _isSetTrafficSignalStateAction = false;
            std::shared_ptr<ITrafficSignalStateActionWriter> _trafficSignalStateAction {};

        public:

            OPENSCENARIOLIB_EXP TrafficSignalActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerAction> GetTrafficSignalControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalStateAction> GetTrafficSignalStateAction() const override;


            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerAction(std::shared_ptr<ITrafficSignalControllerActionWriter> trafficSignalControllerAction) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalStateAction(std::shared_ptr<ITrafficSignalStateActionWriter> trafficSignalStateAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalControllerActionWriter> GetWriterTrafficSignalControllerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficSignalStateActionWriter> GetWriterTrafficSignalStateAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalControllerAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalStateAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalConditionImpl: public BaseImpl, public ITrafficSignalConditionWriter, public std::enable_shared_from_this<TrafficSignalConditionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetState = false;
            std::string _state {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetState() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetState(const std::string state) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalController. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalController)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerImpl: public BaseImpl, public ITrafficSignalControllerWriter, public std::enable_shared_from_this<TrafficSignalControllerImpl> 
        {
        private:
            bool _isSetDelay = false;
            double _delay {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetReference = false;
            std::string _reference {};
            bool _isSetPhases = false;
            std::vector<std::shared_ptr<IPhaseWriter>> _phases {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalControllerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDelay() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetReference() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhases() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhaseWriter>> GetWriterPhases() const override;
            OPENSCENARIOLIB_EXP int GetPhasesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhasesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetDelay(const double delay) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetReference(const std::string reference) override;

            OPENSCENARIOLIB_EXP void SetPhases(std::vector<std::shared_ptr<IPhaseWriter>>& phases) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDelay(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToReference(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDelay() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromReference() const override;

            OPENSCENARIOLIB_EXP bool IsDelayParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsReferenceParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetDelay() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDelay() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetReference() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetReference() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPhases() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPhases() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalControllerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalControllerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerActionImpl: public BaseImpl, public ITrafficSignalControllerActionWriter, public std::enable_shared_from_this<TrafficSignalControllerActionImpl> 
        {
        private:
            bool _isSetPhase = false;
            std::string _phase {};
            bool _isSetTrafficSignalControllerRef = false;
            std::shared_ptr<INamedReference<ITrafficSignalController>> _trafficSignalControllerRef  = nullptr;
            bool _isSetPhaseRef = false;
            std::vector<std::shared_ptr<IPhase>> _phaseRef {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalControllerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetPhase() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<ITrafficSignalController>> GetTrafficSignalControllerRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhaseRef() const override;

            OPENSCENARIOLIB_EXP int GetPhaseRefSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhaseRefAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetPhase(const std::string phase) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerRef(std::shared_ptr<INamedReference<ITrafficSignalController>> trafficSignalControllerRef) override;

            OPENSCENARIOLIB_EXP void SetPhaseRef(std::vector<std::shared_ptr<IPhase>>& phaseRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPhase(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalControllerRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPhase() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalControllerRef() const override;

            OPENSCENARIOLIB_EXP bool IsPhaseParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTrafficSignalControllerRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPhase() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalControllerRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPhaseRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPhaseRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalControllerCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalControllerCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalControllerConditionImpl: public BaseImpl, public ITrafficSignalControllerConditionWriter, public std::enable_shared_from_this<TrafficSignalControllerConditionImpl> 
        {
        private:
            bool _isSetPhase = false;
            std::string _phase {};
            bool _isSetTrafficSignalControllerRef = false;
            std::shared_ptr<INamedReference<ITrafficSignalController>> _trafficSignalControllerRef  = nullptr;
            bool _isSetPhaseRef = false;
            std::vector<std::shared_ptr<IPhase>> _phaseRef {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalControllerConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetPhase() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<ITrafficSignalController>> GetTrafficSignalControllerRef() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPhase>> GetPhaseRef() const override;

            OPENSCENARIOLIB_EXP int GetPhaseRefSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPhase> GetPhaseRefAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetPhase(const std::string phase) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalControllerRef(std::shared_ptr<INamedReference<ITrafficSignalController>> trafficSignalControllerRef) override;

            OPENSCENARIOLIB_EXP void SetPhaseRef(std::vector<std::shared_ptr<IPhase>>& phaseRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToPhase(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalControllerRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromPhase() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalControllerRef() const override;

            OPENSCENARIOLIB_EXP bool IsPhaseParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTrafficSignalControllerRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPhase() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalControllerRef() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPhaseRef() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPhaseRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalGroupState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalGroupState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalGroupStateImpl: public BaseImpl, public ITrafficSignalGroupStateWriter, public std::enable_shared_from_this<TrafficSignalGroupStateImpl> 
        {
        private:
            bool _isSetState = false;
            std::string _state {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalGroupStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetState() const override;


            OPENSCENARIOLIB_EXP void SetState(const std::string state) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalState. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalState)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalStateImpl: public BaseImpl, public ITrafficSignalStateWriter, public std::enable_shared_from_this<TrafficSignalStateImpl> 
        {
        private:
            bool _isSetState = false;
            std::string _state {};
            bool _isSetTrafficSignalId = false;
            std::string _trafficSignalId {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalStateImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetState() const override;
            OPENSCENARIOLIB_EXP std::string GetTrafficSignalId() const override;


            OPENSCENARIOLIB_EXP void SetState(const std::string state) override;

            OPENSCENARIOLIB_EXP void SetTrafficSignalId(const std::string trafficSignalId) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTrafficSignalId(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTrafficSignalId() const override;

            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTrafficSignalIdParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficSignalId() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSignalStateAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSignalStateAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSignalStateActionImpl: public BaseImpl, public ITrafficSignalStateActionWriter, public std::enable_shared_from_this<TrafficSignalStateActionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetState = false;
            std::string _state {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrafficSignalStateActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetState() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetState(const std::string state) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromState() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsStateParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetState() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSinkAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSinkAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSinkActionImpl: public BaseImpl, public ITrafficSinkActionWriter, public std::enable_shared_from_this<TrafficSinkActionImpl> 
        {
        private:
            bool _isSetRadius = false;
            double _radius {};
            bool _isSetRate = false;
            double _rate {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};
            bool _isSetTrafficDefinition = false;
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrafficSinkActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetRadius() const override;
            OPENSCENARIOLIB_EXP double GetRate() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;


            OPENSCENARIOLIB_EXP void SetRadius(const double radius) override;

            OPENSCENARIOLIB_EXP void SetRate(const double rate) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRadius(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRadius() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRate() const override;

            OPENSCENARIOLIB_EXP bool IsRadiusParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRateParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRadius() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRate() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRate() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficDefinition() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDefinition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSourceAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSourceAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSourceActionImpl: public BaseImpl, public ITrafficSourceActionWriter, public std::enable_shared_from_this<TrafficSourceActionImpl> 
        {
        private:
            bool _isSetRadius = false;
            double _radius {};
            bool _isSetRate = false;
            double _rate {};
            bool _isSetSpeed = false;
            double _speed {};
            bool _isSetVelocity = false;
            double _velocity {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};
            bool _isSetTrafficDefinition = false;
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};
            bool _isSetTrafficDistribution = false;
            std::shared_ptr<ITrafficDistributionWriter> _trafficDistribution {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrafficSourceActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetRadius() const override;
            OPENSCENARIOLIB_EXP double GetRate() const override;
            OPENSCENARIOLIB_EXP double GetSpeed() const override;
            OPENSCENARIOLIB_EXP double GetVelocity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistribution> GetTrafficDistribution() const override;


            OPENSCENARIOLIB_EXP void SetRadius(const double radius) override;

            OPENSCENARIOLIB_EXP void SetRate(const double rate) override;

            OPENSCENARIOLIB_EXP void SetSpeed(const double speed) override;

            OPENSCENARIOLIB_EXP void SetVelocity(const double velocity) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override;

            OPENSCENARIOLIB_EXP void SetTrafficDistribution(std::shared_ptr<ITrafficDistributionWriter> trafficDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRadius(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRate(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVelocity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRadius() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRate() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeed() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVelocity() const override;

            OPENSCENARIOLIB_EXP bool IsRadiusParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSpeedParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVelocityParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistributionWriter> GetWriterTrafficDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRadius() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRate() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSpeed() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeed() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVelocity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVelocity() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficDefinition() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDefinition() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficDistribution() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficStopAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficStopAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficStopActionImpl: public BaseImpl, public ITrafficStopActionWriter, public std::enable_shared_from_this<TrafficStopActionImpl> 
        {
        private:

        public:

            OPENSCENARIOLIB_EXP TrafficStopActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;



            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrafficSwarmAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrafficSwarmAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrafficSwarmActionImpl: public BaseImpl, public ITrafficSwarmActionWriter, public std::enable_shared_from_this<TrafficSwarmActionImpl> 
        {
        private:
            bool _isSetInnerRadius = false;
            double _innerRadius {};
            bool _isSetNumberOfVehicles = false;
            uint32_t _numberOfVehicles {};
            bool _isSetOffset = false;
            double _offset {};
            bool _isSetSemiMajorAxis = false;
            double _semiMajorAxis {};
            bool _isSetSemiMinorAxis = false;
            double _semiMinorAxis {};
            bool _isSetVelocity = false;
            double _velocity {};
            bool _isSetCentralObject = false;
            std::shared_ptr<ICentralSwarmObjectWriter> _centralObject {};
            bool _isSetTrafficDefinition = false;
            std::shared_ptr<ITrafficDefinitionWriter> _trafficDefinition {};
            bool _isSetTrafficDistribution = false;
            std::shared_ptr<ITrafficDistributionWriter> _trafficDistribution {};
            bool _isSetInitialSpeedRange = false;
            std::shared_ptr<IRangeWriter> _initialSpeedRange {};
            bool _isSetDirectionOfTravelDistribution = false;
            std::shared_ptr<IDirectionOfTravelDistributionWriter> _directionOfTravelDistribution {};

        public:

			virtual void ResolveUnsignedIntExpression(std::string& attributeKey, unsigned int& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrafficSwarmActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetInnerRadius() const override;
            OPENSCENARIOLIB_EXP uint32_t GetNumberOfVehicles() const override;
            OPENSCENARIOLIB_EXP double GetOffset() const override;
            OPENSCENARIOLIB_EXP double GetSemiMajorAxis() const override;
            OPENSCENARIOLIB_EXP double GetSemiMinorAxis() const override;
            OPENSCENARIOLIB_EXP double GetVelocity() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICentralSwarmObject> GetCentralObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinition> GetTrafficDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistribution> GetTrafficDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetInitialSpeedRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectionOfTravelDistribution> GetDirectionOfTravelDistribution() const override;


            OPENSCENARIOLIB_EXP void SetInnerRadius(const double innerRadius) override;

            OPENSCENARIOLIB_EXP void SetNumberOfVehicles(const uint32_t numberOfVehicles) override;

            OPENSCENARIOLIB_EXP void SetOffset(const double offset) override;

            OPENSCENARIOLIB_EXP void SetSemiMajorAxis(const double semiMajorAxis) override;

            OPENSCENARIOLIB_EXP void SetSemiMinorAxis(const double semiMinorAxis) override;

            OPENSCENARIOLIB_EXP void SetVelocity(const double velocity) override;

            OPENSCENARIOLIB_EXP void SetCentralObject(std::shared_ptr<ICentralSwarmObjectWriter> centralObject) override;

            OPENSCENARIOLIB_EXP void SetTrafficDefinition(std::shared_ptr<ITrafficDefinitionWriter> trafficDefinition) override;

            OPENSCENARIOLIB_EXP void SetTrafficDistribution(std::shared_ptr<ITrafficDistributionWriter> trafficDistribution) override;

            OPENSCENARIOLIB_EXP void SetInitialSpeedRange(std::shared_ptr<IRangeWriter> initialSpeedRange) override;

            OPENSCENARIOLIB_EXP void SetDirectionOfTravelDistribution(std::shared_ptr<IDirectionOfTravelDistributionWriter> directionOfTravelDistribution) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToInnerRadius(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToNumberOfVehicles(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToOffset(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSemiMajorAxis(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSemiMinorAxis(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVelocity(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromInnerRadius() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromNumberOfVehicles() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromOffset() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSemiMajorAxis() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSemiMinorAxis() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVelocity() const override;

            OPENSCENARIOLIB_EXP bool IsInnerRadiusParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNumberOfVehiclesParameterized() override;
            OPENSCENARIOLIB_EXP bool IsOffsetParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSemiMajorAxisParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSemiMinorAxisParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVelocityParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICentralSwarmObjectWriter> GetWriterCentralObject() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDefinitionWriter> GetWriterTrafficDefinition() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrafficDistributionWriter> GetWriterTrafficDistribution() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterInitialSpeedRange() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectionOfTravelDistributionWriter> GetWriterDirectionOfTravelDistribution() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetInnerRadius() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetNumberOfVehicles() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetOffset() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSemiMajorAxis() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSemiMinorAxis() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetVelocity() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVelocity() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCentralObject() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficDefinition() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDefinition() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrafficDistribution() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrafficDistribution() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetInitialSpeedRange() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetInitialSpeedRange() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDirectionOfTravelDistribution() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectionOfTravelDistribution() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrailer. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrailer)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrailerImpl: public BaseImpl, public ITrailerWriter, public std::enable_shared_from_this<TrailerImpl> 
        {
        private:
            bool _isSetTrailer = false;
            std::shared_ptr<IScenarioObjectWriter> _trailer {};
            bool _isSetTrailerRef = false;
            std::shared_ptr<IEntityRefWriter> _trailerRef {};

        public:

            OPENSCENARIOLIB_EXP TrailerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObject> GetTrailer() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetTrailerRef() const override;


            OPENSCENARIOLIB_EXP void SetTrailer(std::shared_ptr<IScenarioObjectWriter> trailer) override;

            OPENSCENARIOLIB_EXP void SetTrailerRef(std::shared_ptr<IEntityRefWriter> trailerRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IScenarioObjectWriter> GetWriterTrailer() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRefWriter> GetWriterTrailerRef() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailer() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailerRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrailerAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrailerAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrailerActionImpl: public BaseImpl, public ITrailerActionWriter, public std::enable_shared_from_this<TrailerActionImpl> 
        {
        private:
            bool _isSetConnectTrailerAction = false;
            std::shared_ptr<IConnectTrailerActionWriter> _connectTrailerAction {};
            bool _isSetDisconnectTrailerAction = false;
            std::shared_ptr<IDisconnectTrailerActionWriter> _disconnectTrailerAction {};

        public:

            OPENSCENARIOLIB_EXP TrailerActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IConnectTrailerAction> GetConnectTrailerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDisconnectTrailerAction> GetDisconnectTrailerAction() const override;


            OPENSCENARIOLIB_EXP void SetConnectTrailerAction(std::shared_ptr<IConnectTrailerActionWriter> connectTrailerAction) override;

            OPENSCENARIOLIB_EXP void SetDisconnectTrailerAction(std::shared_ptr<IDisconnectTrailerActionWriter> disconnectTrailerAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IConnectTrailerActionWriter> GetWriterConnectTrailerAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDisconnectTrailerActionWriter> GetWriterDisconnectTrailerAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetConnectTrailerAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDisconnectTrailerAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrailerCoupler. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrailerCoupler)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrailerCouplerImpl: public BaseImpl, public ITrailerCouplerWriter, public std::enable_shared_from_this<TrailerCouplerImpl> 
        {
        private:
            bool _isSetDx = false;
            double _dx {};
            bool _isSetDz = false;
            double _dz {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrailerCouplerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override;

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override;

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDzParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDx() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDz() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDz() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrailerHitch. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrailerHitch)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrailerHitchImpl: public BaseImpl, public ITrailerHitchWriter, public std::enable_shared_from_this<TrailerHitchImpl> 
        {
        private:
            bool _isSetDx = false;
            double _dx {};
            bool _isSetDz = false;
            double _dz {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrailerHitchImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDx() const override;
            OPENSCENARIOLIB_EXP double GetDz() const override;


            OPENSCENARIOLIB_EXP void SetDx(const double dx) override;

            OPENSCENARIOLIB_EXP void SetDz(const double dz) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDx(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDz(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDx() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDz() const override;

            OPENSCENARIOLIB_EXP bool IsDxParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDzParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDx() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDz() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDz() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrajectory. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectory)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryImpl: public BaseImpl, public ITrajectoryWriter, public std::enable_shared_from_this<TrajectoryImpl> 
        {
        private:
            bool _isSetClosed = false;
            bool _closed {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetShape = false;
            std::shared_ptr<IShapeWriter> _shape {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP TrajectoryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetClosed() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IShape> GetShape() const override;


            OPENSCENARIOLIB_EXP void SetClosed(const bool closed) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetShape(std::shared_ptr<IShapeWriter> shape) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToClosed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromClosed() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP bool IsClosedParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IShapeWriter> GetWriterShape() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetClosed() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetShape() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrajectoryCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryCatalogLocationImpl: public BaseImpl, public ITrajectoryCatalogLocationWriter, public std::enable_shared_from_this<TrajectoryCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP TrajectoryCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrajectoryFollowingMode. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryFollowingMode)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryFollowingModeImpl: public BaseImpl, public ITrajectoryFollowingModeWriter, public std::enable_shared_from_this<TrajectoryFollowingModeImpl> 
        {
        private:
            bool _isSetFollowingMode = false;
            FollowingMode _followingMode {};

        public:

            OPENSCENARIOLIB_EXP TrajectoryFollowingModeImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP FollowingMode GetFollowingMode() const override;


            OPENSCENARIOLIB_EXP void SetFollowingMode(const FollowingMode followingMode) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFollowingMode(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFollowingMode() const override;

            OPENSCENARIOLIB_EXP bool IsFollowingModeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetFollowingMode() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrajectoryPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryPositionImpl: public BaseImpl, public ITrajectoryPositionWriter, public std::enable_shared_from_this<TrajectoryPositionImpl> 
        {
        private:
            bool _isSetS = false;
            double _s {};
            bool _isSetT = false;
            double _t {0};
            bool _isSetOrientation = false;
            std::shared_ptr<IOrientationWriter> _orientation {};
            bool _isSetTrajectoryRef = false;
            std::shared_ptr<ITrajectoryRefWriter> _trajectoryRef {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TrajectoryPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetS() const override;
            OPENSCENARIOLIB_EXP double GetT() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientation> GetOrientation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryRef> GetTrajectoryRef() const override;


            OPENSCENARIOLIB_EXP void SetS(const double s) override;

            OPENSCENARIOLIB_EXP void SetT(const double t) override;

            OPENSCENARIOLIB_EXP void SetOrientation(std::shared_ptr<IOrientationWriter> orientation) override;

            OPENSCENARIOLIB_EXP void SetTrajectoryRef(std::shared_ptr<ITrajectoryRefWriter> trajectoryRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToS(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToT(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromS() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromT() const override;

            OPENSCENARIOLIB_EXP bool IsSParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IOrientationWriter> GetWriterOrientation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryRefWriter> GetWriterTrajectoryRef() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetS() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetT() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetT() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetOrientation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetOrientation() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectoryRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrajectoryRef. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrajectoryRef)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TrajectoryRefImpl: public BaseImpl, public ITrajectoryRefWriter, public std::enable_shared_from_this<TrajectoryRefImpl> 
        {
        private:
            bool _isSetTrajectory = false;
            std::shared_ptr<ITrajectoryWriter> _trajectory {};
            bool _isSetCatalogReference = false;
            std::shared_ptr<ICatalogReferenceWriter> _catalogReference {};

        public:

            OPENSCENARIOLIB_EXP TrajectoryRefImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectory> GetTrajectory() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReference> GetCatalogReference() const override;


            OPENSCENARIOLIB_EXP void SetTrajectory(std::shared_ptr<ITrajectoryWriter> trajectory) override;

            OPENSCENARIOLIB_EXP void SetCatalogReference(std::shared_ptr<ICatalogReferenceWriter> catalogReference) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrajectoryWriter> GetWriterTrajectory() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ICatalogReferenceWriter> GetWriterCatalogReference() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrajectory() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetCatalogReference() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITransitionDynamics. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITransitionDynamics)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TransitionDynamicsImpl: public BaseImpl, public ITransitionDynamicsWriter, public std::enable_shared_from_this<TransitionDynamicsImpl> 
        {
        private:
            bool _isSetDynamicsDimension = false;
            DynamicsDimension _dynamicsDimension {};
            bool _isSetDynamicsShape = false;
            DynamicsShape _dynamicsShape {};
            bool _isSetFollowingMode = false;
            FollowingMode _followingMode {FollowingMode::FollowingModeEnum::POSITION};
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TransitionDynamicsImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP DynamicsDimension GetDynamicsDimension() const override;
            OPENSCENARIOLIB_EXP DynamicsShape GetDynamicsShape() const override;
            OPENSCENARIOLIB_EXP FollowingMode GetFollowingMode() const override;
            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetDynamicsDimension(const DynamicsDimension dynamicsDimension) override;

            OPENSCENARIOLIB_EXP void SetDynamicsShape(const DynamicsShape dynamicsShape) override;

            OPENSCENARIOLIB_EXP void SetFollowingMode(const FollowingMode followingMode) override;

            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsDimension(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDynamicsShape(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFollowingMode(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsDimension() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDynamicsShape() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFollowingMode() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsDynamicsDimensionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsDynamicsShapeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFollowingModeParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicsDimension() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetDynamicsShape() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFollowingMode() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFollowingMode() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITraveledDistanceCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITraveledDistanceCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TraveledDistanceConditionImpl: public BaseImpl, public ITraveledDistanceConditionWriter, public std::enable_shared_from_this<TraveledDistanceConditionImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP TraveledDistanceConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITrigger. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITrigger)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TriggerImpl: public BaseImpl, public ITriggerWriter, public std::enable_shared_from_this<TriggerImpl> 
        {
        private:
            bool _isSetConditionGroups = false;
            std::vector<std::shared_ptr<IConditionGroupWriter>> _conditionGroups {};

        public:

            OPENSCENARIOLIB_EXP TriggerImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionGroup>> GetConditionGroups() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IConditionGroupWriter>> GetWriterConditionGroups() const override;
            OPENSCENARIOLIB_EXP int GetConditionGroupsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IConditionGroup> GetConditionGroupsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetConditionGroups(std::vector<std::shared_ptr<IConditionGroupWriter>>& conditionGroups) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual void ResetConditionGroups() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetConditionGroups() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements ITriggeringEntities. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of ITriggeringEntities)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class TriggeringEntitiesImpl: public BaseImpl, public ITriggeringEntitiesWriter, public std::enable_shared_from_this<TriggeringEntitiesImpl> 
        {
        private:
            bool _isSetTriggeringEntitiesRule = false;
            TriggeringEntitiesRule _triggeringEntitiesRule {};
            bool _isSetEntityRefs = false;
            std::vector<std::shared_ptr<IEntityRefWriter>> _entityRefs {};

        public:

            OPENSCENARIOLIB_EXP TriggeringEntitiesImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP TriggeringEntitiesRule GetTriggeringEntitiesRule() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRef>> GetEntityRefs() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IEntityRefWriter>> GetWriterEntityRefs() const override;
            OPENSCENARIOLIB_EXP int GetEntityRefsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IEntityRef> GetEntityRefsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetTriggeringEntitiesRule(const TriggeringEntitiesRule triggeringEntitiesRule) override;

            OPENSCENARIOLIB_EXP void SetEntityRefs(std::vector<std::shared_ptr<IEntityRefWriter>>& entityRefs) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTriggeringEntitiesRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTriggeringEntitiesRule() const override;

            OPENSCENARIOLIB_EXP bool IsTriggeringEntitiesRuleParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetTriggeringEntitiesRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetEntityRefs() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUniformDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUniformDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UniformDistributionImpl: public BaseImpl, public IUniformDistributionWriter, public std::enable_shared_from_this<UniformDistributionImpl> 
        {
        private:
            bool _isSetRange = false;
            std::shared_ptr<IRangeWriter> _range {};

        public:

            OPENSCENARIOLIB_EXP UniformDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IRange> GetRange() const override;


            OPENSCENARIOLIB_EXP void SetRange(std::shared_ptr<IRangeWriter> range) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IRangeWriter> GetWriterRange() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRange() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUsedArea. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUsedArea)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UsedAreaImpl: public BaseImpl, public IUsedAreaWriter, public std::enable_shared_from_this<UsedAreaImpl> 
        {
        private:
            bool _isSetPositions = false;
            std::vector<std::shared_ptr<IPositionWriter>> _positions {};

        public:

            OPENSCENARIOLIB_EXP UsedAreaImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPosition>> GetPositions() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IPositionWriter>> GetWriterPositions() const override;
            OPENSCENARIOLIB_EXP int GetPositionsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPositionsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetPositions(std::vector<std::shared_ptr<IPositionWriter>>& positions) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetPositions() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedActionImpl: public BaseImpl, public IUserDefinedActionWriter, public std::enable_shared_from_this<UserDefinedActionImpl> 
        {
        private:
            bool _isSetCustomCommandAction = false;
            std::shared_ptr<ICustomCommandActionWriter> _customCommandAction {};

        public:

            OPENSCENARIOLIB_EXP UserDefinedActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<ICustomCommandAction> GetCustomCommandAction() const override;


            OPENSCENARIOLIB_EXP void SetCustomCommandAction(std::shared_ptr<ICustomCommandActionWriter> customCommandAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ICustomCommandActionWriter> GetWriterCustomCommandAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCustomCommandAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedAnimation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedAnimation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedAnimationImpl: public BaseImpl, public IUserDefinedAnimationWriter, public std::enable_shared_from_this<UserDefinedAnimationImpl> 
        {
        private:
            bool _isSetUserDefinedAnimationType = false;
            std::string _userDefinedAnimationType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP UserDefinedAnimationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetUserDefinedAnimationType() const override;


            OPENSCENARIOLIB_EXP void SetUserDefinedAnimationType(const std::string userDefinedAnimationType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToUserDefinedAnimationType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromUserDefinedAnimationType() const override;

            OPENSCENARIOLIB_EXP bool IsUserDefinedAnimationTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedAnimationType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedComponent. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedComponent)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedComponentImpl: public BaseImpl, public IUserDefinedComponentWriter, public std::enable_shared_from_this<UserDefinedComponentImpl> 
        {
        private:
            bool _isSetUserDefinedComponentType = false;
            std::string _userDefinedComponentType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP UserDefinedComponentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetUserDefinedComponentType() const override;


            OPENSCENARIOLIB_EXP void SetUserDefinedComponentType(const std::string userDefinedComponentType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToUserDefinedComponentType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromUserDefinedComponentType() const override;

            OPENSCENARIOLIB_EXP bool IsUserDefinedComponentTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedComponentType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedDistributionImpl: public BaseImpl, public IUserDefinedDistributionWriter, public std::enable_shared_from_this<UserDefinedDistributionImpl> 
        {
        private:
            bool _isSetContent = false;
            std::string _content {};
            bool _isSetType = false;
            std::string _type {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP UserDefinedDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetContent() const override;
            OPENSCENARIOLIB_EXP std::string GetType() const override;


            OPENSCENARIOLIB_EXP void SetContent(const std::string content) override;

            OPENSCENARIOLIB_EXP void SetType(const std::string type) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToContent(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromContent() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromType() const override;

            OPENSCENARIOLIB_EXP bool IsContentParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetContent() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedLight. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedLight)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedLightImpl: public BaseImpl, public IUserDefinedLightWriter, public std::enable_shared_from_this<UserDefinedLightImpl> 
        {
        private:
            bool _isSetUserDefinedLightType = false;
            std::string _userDefinedLightType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP UserDefinedLightImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetUserDefinedLightType() const override;


            OPENSCENARIOLIB_EXP void SetUserDefinedLightType(const std::string userDefinedLightType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToUserDefinedLightType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromUserDefinedLightType() const override;

            OPENSCENARIOLIB_EXP bool IsUserDefinedLightTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetUserDefinedLightType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IUserDefinedValueCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IUserDefinedValueCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class UserDefinedValueConditionImpl: public BaseImpl, public IUserDefinedValueConditionWriter, public std::enable_shared_from_this<UserDefinedValueConditionImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP UserDefinedValueConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IValueConstraint. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IValueConstraint)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ValueConstraintImpl: public BaseImpl, public IValueConstraintWriter, public std::enable_shared_from_this<ValueConstraintImpl> 
        {
        private:
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual bool IsTypedStringAttribute(std::string& attributeKey) override;

            OPENSCENARIOLIB_EXP ValueConstraintImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IValueConstraintGroup. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IValueConstraintGroup)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ValueConstraintGroupImpl: public BaseImpl, public IValueConstraintGroupWriter, public std::enable_shared_from_this<ValueConstraintGroupImpl> 
        {
        private:
            bool _isSetConstraints = false;
            std::vector<std::shared_ptr<IValueConstraintWriter>> _constraints {};

        public:

            OPENSCENARIOLIB_EXP ValueConstraintGroupImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IValueConstraint>> GetConstraints() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IValueConstraintWriter>> GetWriterConstraints() const override;
            OPENSCENARIOLIB_EXP int GetConstraintsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IValueConstraint> GetConstraintsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetConstraints(std::vector<std::shared_ptr<IValueConstraintWriter>>& constraints) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetConstraints() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IValueSetDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IValueSetDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class ValueSetDistributionImpl: public BaseImpl, public IValueSetDistributionWriter, public std::enable_shared_from_this<ValueSetDistributionImpl> 
        {
        private:
            bool _isSetParameterValueSets = false;
            std::vector<std::shared_ptr<IParameterValueSetWriter>> _parameterValueSets {};

        public:

            OPENSCENARIOLIB_EXP ValueSetDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterValueSet>> GetParameterValueSets() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterValueSetWriter>> GetWriterParameterValueSets() const override;
            OPENSCENARIOLIB_EXP int GetParameterValueSetsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterValueSet> GetParameterValueSetsAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetParameterValueSets(std::vector<std::shared_ptr<IParameterValueSetWriter>>& parameterValueSets) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterValueSets() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableActionImpl: public BaseImpl, public IVariableActionWriter, public std::enable_shared_from_this<VariableActionImpl> 
        {
        private:
            bool _isSetVariableRef = false;
            std::shared_ptr<INamedReference<IVariableDeclaration>> _variableRef  = nullptr;
            bool _isSetSetAction = false;
            std::shared_ptr<IVariableSetActionWriter> _setAction {};
            bool _isSetModifyAction = false;
            std::shared_ptr<IVariableModifyActionWriter> _modifyAction {};

        public:

            OPENSCENARIOLIB_EXP VariableActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IVariableDeclaration>> GetVariableRef() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableSetAction> GetSetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableModifyAction> GetModifyAction() const override;


            OPENSCENARIOLIB_EXP void SetVariableRef(std::shared_ptr<INamedReference<IVariableDeclaration>> variableRef) override;

            OPENSCENARIOLIB_EXP void SetSetAction(std::shared_ptr<IVariableSetActionWriter> setAction) override;

            OPENSCENARIOLIB_EXP void SetModifyAction(std::shared_ptr<IVariableModifyActionWriter> modifyAction) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVariableRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVariableRef() const override;

            OPENSCENARIOLIB_EXP bool IsVariableRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableSetActionWriter> GetWriterSetAction() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableModifyActionWriter> GetWriterModifyAction() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableRef() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSetAction() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetModifyAction() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableAddValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableAddValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableAddValueRuleImpl: public BaseImpl, public IVariableAddValueRuleWriter, public std::enable_shared_from_this<VariableAddValueRuleImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VariableAddValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableCondition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableCondition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableConditionImpl: public BaseImpl, public IVariableConditionWriter, public std::enable_shared_from_this<VariableConditionImpl> 
        {
        private:
            bool _isSetRule = false;
            Rule _rule {};
            bool _isSetValue = false;
            std::string _value {};
            bool _isSetVariableRef = false;
            std::shared_ptr<INamedReference<IVariableDeclaration>> _variableRef  = nullptr;

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
            OPENSCENARIOLIB_EXP VariableConditionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP Rule GetRule() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<INamedReference<IVariableDeclaration>> GetVariableRef() const override;


            OPENSCENARIOLIB_EXP void SetRule(const Rule rule) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void SetVariableRef(std::shared_ptr<INamedReference<IVariableDeclaration>> variableRef) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRule(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVariableRef(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRule() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVariableRef() const override;

            OPENSCENARIOLIB_EXP bool IsRuleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVariableRefParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableRef() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableDeclaration. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableDeclaration)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableDeclarationImpl: public BaseImpl, public IVariableDeclarationWriter, public std::enable_shared_from_this<VariableDeclarationImpl> 
        {
        private:
            bool _isSetName = false;
            std::string _name {};
            bool _isSetValue = false;
            std::string _value {};
            bool _isSetVariableType = false;
            ParameterType _variableType {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual bool IsTypedStringAttribute(std::string& attributeKey) override;

            OPENSCENARIOLIB_EXP VariableDeclarationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP std::string GetValue() const override;
            OPENSCENARIOLIB_EXP ParameterType GetVariableType() const override;


            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void SetVariableType(const ParameterType variableType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVariableType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVariableType() const override;

            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVariableTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVariableType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableModifyAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableModifyAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableModifyActionImpl: public BaseImpl, public IVariableModifyActionWriter, public std::enable_shared_from_this<VariableModifyActionImpl> 
        {
        private:
            bool _isSetRule = false;
            std::shared_ptr<IVariableModifyRuleWriter> _rule {};

        public:

            OPENSCENARIOLIB_EXP VariableModifyActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableModifyRule> GetRule() const override;


            OPENSCENARIOLIB_EXP void SetRule(std::shared_ptr<IVariableModifyRuleWriter> rule) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableModifyRuleWriter> GetWriterRule() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRule() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableModifyRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableModifyRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableModifyRuleImpl: public BaseImpl, public IVariableModifyRuleWriter, public std::enable_shared_from_this<VariableModifyRuleImpl> 
        {
        private:
            bool _isSetAddValue = false;
            std::shared_ptr<IVariableAddValueRuleWriter> _addValue {};
            bool _isSetMultiplyByValue = false;
            std::shared_ptr<IVariableMultiplyByValueRuleWriter> _multiplyByValue {};

        public:

            OPENSCENARIOLIB_EXP VariableModifyRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableAddValueRule> GetAddValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableMultiplyByValueRule> GetMultiplyByValue() const override;


            OPENSCENARIOLIB_EXP void SetAddValue(std::shared_ptr<IVariableAddValueRuleWriter> addValue) override;

            OPENSCENARIOLIB_EXP void SetMultiplyByValue(std::shared_ptr<IVariableMultiplyByValueRuleWriter> multiplyByValue) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableAddValueRuleWriter> GetWriterAddValue() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVariableMultiplyByValueRuleWriter> GetWriterMultiplyByValue() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAddValue() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetMultiplyByValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableMultiplyByValueRule. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableMultiplyByValueRule)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableMultiplyByValueRuleImpl: public BaseImpl, public IVariableMultiplyByValueRuleWriter, public std::enable_shared_from_this<VariableMultiplyByValueRuleImpl> 
        {
        private:
            bool _isSetValue = false;
            double _value {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VariableMultiplyByValueRuleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const double value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVariableSetAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVariableSetAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VariableSetActionImpl: public BaseImpl, public IVariableSetActionWriter, public std::enable_shared_from_this<VariableSetActionImpl> 
        {
        private:
            bool _isSetValue = false;
            std::string _value {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual bool IsTypedStringAttribute(std::string& attributeKey) override;

            OPENSCENARIOLIB_EXP VariableSetActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::string GetValue() const override;


            OPENSCENARIOLIB_EXP void SetValue(const std::string value) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToValue(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromValue() const override;

            OPENSCENARIOLIB_EXP bool IsValueParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetValue() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicle. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicle)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleImpl: public BaseImpl, public IVehicleWriter, public std::enable_shared_from_this<VehicleImpl> 
        {
        private:
            bool _isSetMass = false;
            double _mass {};
            bool _isSetModel3d = false;
            std::string _model3d {};
            bool _isSetName = false;
            std::string _name {};
            bool _isSetRole = false;
            Role _role {Role::RoleEnum::NONE};
            bool _isSetVehicleCategory = false;
            VehicleCategory _vehicleCategory {};
            bool _isSetParameterDeclarations = false;
            std::vector<std::shared_ptr<IParameterDeclarationWriter>> _parameterDeclarations {};
            bool _isSetBoundingBox = false;
            std::shared_ptr<IBoundingBoxWriter> _boundingBox {};
            bool _isSetPerformance = false;
            std::shared_ptr<IPerformanceWriter> _performance {};
            bool _isSetAxles = false;
            std::shared_ptr<IAxlesWriter> _axles {};
            bool _isSetProperties = false;
            std::shared_ptr<IPropertiesWriter> _properties {};
            bool _isSetTrailerHitch = false;
            std::shared_ptr<ITrailerHitchWriter> _trailerHitch {};
            bool _isSetTrailerCoupler = false;
            std::shared_ptr<ITrailerCouplerWriter> _trailerCoupler {};
            bool _isSetTrailer = false;
            std::shared_ptr<ITrailerWriter> _trailer {};

        public:

			virtual void ResolveStringExpression(std::string& attributeKey, std::string& value) override;		
			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VehicleImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetMass() const override;
            OPENSCENARIOLIB_EXP std::string GetModel3d() const override;
            OPENSCENARIOLIB_EXP std::string GetName() const override;
            OPENSCENARIOLIB_EXP Role GetRole() const override;
            OPENSCENARIOLIB_EXP VehicleCategory GetVehicleCategory() const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclaration>> GetParameterDeclarations() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IParameterDeclarationWriter>> GetWriterParameterDeclarations() const override;
            OPENSCENARIOLIB_EXP int GetParameterDeclarationsSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IParameterDeclaration> GetParameterDeclarationsAtIndex(unsigned int index) const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBox> GetBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPerformance> GetPerformance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxles> GetAxles() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IProperties> GetProperties() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerHitch> GetTrailerHitch() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerCoupler> GetTrailerCoupler() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailer> GetTrailer() const override;


            OPENSCENARIOLIB_EXP void SetMass(const double mass) override;

            OPENSCENARIOLIB_EXP void SetModel3d(const std::string model3d) override;

            OPENSCENARIOLIB_EXP void SetName(const std::string name) override;

            OPENSCENARIOLIB_EXP void SetRole(const Role role) override;

            OPENSCENARIOLIB_EXP void SetVehicleCategory(const VehicleCategory vehicleCategory) override;

            OPENSCENARIOLIB_EXP void SetParameterDeclarations(std::vector<std::shared_ptr<IParameterDeclarationWriter>>& parameterDeclarations) override;

            OPENSCENARIOLIB_EXP void SetBoundingBox(std::shared_ptr<IBoundingBoxWriter> boundingBox) override;

            OPENSCENARIOLIB_EXP void SetPerformance(std::shared_ptr<IPerformanceWriter> performance) override;

            OPENSCENARIOLIB_EXP void SetAxles(std::shared_ptr<IAxlesWriter> axles) override;

            OPENSCENARIOLIB_EXP void SetProperties(std::shared_ptr<IPropertiesWriter> properties) override;

            OPENSCENARIOLIB_EXP void SetTrailerHitch(std::shared_ptr<ITrailerHitchWriter> trailerHitch) override;

            OPENSCENARIOLIB_EXP void SetTrailerCoupler(std::shared_ptr<ITrailerCouplerWriter> trailerCoupler) override;

            OPENSCENARIOLIB_EXP void SetTrailer(std::shared_ptr<ITrailerWriter> trailer) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;

            OPENSCENARIOLIB_EXP bool HasParameterDefinitions() override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<ParameterValue>> GetParameterDefinitions() const override; 

            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToMass(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToModel3d(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToName(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRole(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVehicleCategory(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromMass() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromModel3d() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromName() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRole() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVehicleCategory() const override;

            OPENSCENARIOLIB_EXP bool IsMassParameterized() override;
            OPENSCENARIOLIB_EXP bool IsModel3dParameterized() override;
            OPENSCENARIOLIB_EXP bool IsNameParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRoleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsVehicleCategoryParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IBoundingBoxWriter> GetWriterBoundingBox() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPerformanceWriter> GetWriterPerformance() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IAxlesWriter> GetWriterAxles() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPropertiesWriter> GetWriterProperties() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerHitchWriter> GetWriterTrailerHitch() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerCouplerWriter> GetWriterTrailerCoupler() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ITrailerWriter> GetWriterTrailer() const override;
            OPENSCENARIOLIB_EXP virtual void ResetMass() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetMass() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetModel3d() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetModel3d() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetName() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetRole() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRole() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleCategory() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetParameterDeclarations() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetParameterDeclarations() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetBoundingBox() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPerformance() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetAxles() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetProperties() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetProperties() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrailerHitch() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailerHitch() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrailerCoupler() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailerCoupler() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTrailer() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTrailer() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleCatalogLocation. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCatalogLocation)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCatalogLocationImpl: public BaseImpl, public IVehicleCatalogLocationWriter, public std::enable_shared_from_this<VehicleCatalogLocationImpl> 
        {
        private:
            bool _isSetDirectory = false;
            std::shared_ptr<IDirectoryWriter> _directory {};

        public:

            OPENSCENARIOLIB_EXP VehicleCatalogLocationImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectory> GetDirectory() const override;


            OPENSCENARIOLIB_EXP void SetDirectory(std::shared_ptr<IDirectoryWriter> directory) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IDirectoryWriter> GetWriterDirectory() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDirectory() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleCategoryDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCategoryDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCategoryDistributionImpl: public BaseImpl, public IVehicleCategoryDistributionWriter, public std::enable_shared_from_this<VehicleCategoryDistributionImpl> 
        {
        private:
            bool _isSetVehicleCategoryDistributionEntries = false;
            std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>> _vehicleCategoryDistributionEntries {};

        public:

            OPENSCENARIOLIB_EXP VehicleCategoryDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleCategoryDistributionEntry>> GetVehicleCategoryDistributionEntries() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>> GetWriterVehicleCategoryDistributionEntries() const override;
            OPENSCENARIOLIB_EXP int GetVehicleCategoryDistributionEntriesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleCategoryDistributionEntry> GetVehicleCategoryDistributionEntriesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetVehicleCategoryDistributionEntries(std::vector<std::shared_ptr<IVehicleCategoryDistributionEntryWriter>>& vehicleCategoryDistributionEntries) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleCategoryDistributionEntries() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleCategoryDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleCategoryDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleCategoryDistributionEntryImpl: public BaseImpl, public IVehicleCategoryDistributionEntryWriter, public std::enable_shared_from_this<VehicleCategoryDistributionEntryImpl> 
        {
        private:
            bool _isSetCategory = false;
            VehicleCategory _category {};
            bool _isSetWeight = false;
            double _weight {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VehicleCategoryDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP VehicleCategory GetCategory() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;


            OPENSCENARIOLIB_EXP void SetCategory(const VehicleCategory category) override;

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCategory(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCategory() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsCategoryParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetCategory() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleComponent. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleComponent)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleComponentImpl: public BaseImpl, public IVehicleComponentWriter, public std::enable_shared_from_this<VehicleComponentImpl> 
        {
        private:
            bool _isSetVehicleComponentType = false;
            VehicleComponentType _vehicleComponentType {};

        public:

            OPENSCENARIOLIB_EXP VehicleComponentImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP VehicleComponentType GetVehicleComponentType() const override;


            OPENSCENARIOLIB_EXP void SetVehicleComponentType(const VehicleComponentType vehicleComponentType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVehicleComponentType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVehicleComponentType() const override;

            OPENSCENARIOLIB_EXP bool IsVehicleComponentTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleComponentType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleLight. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleLight)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleLightImpl: public BaseImpl, public IVehicleLightWriter, public std::enable_shared_from_this<VehicleLightImpl> 
        {
        private:
            bool _isSetVehicleLightType = false;
            VehicleLightType _vehicleLightType {};

        public:

            OPENSCENARIOLIB_EXP VehicleLightImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP VehicleLightType GetVehicleLightType() const override;


            OPENSCENARIOLIB_EXP void SetVehicleLightType(const VehicleLightType vehicleLightType) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToVehicleLightType(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromVehicleLightType() const override;

            OPENSCENARIOLIB_EXP bool IsVehicleLightTypeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleLightType() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleRoleDistribution. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleRoleDistribution)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleRoleDistributionImpl: public BaseImpl, public IVehicleRoleDistributionWriter, public std::enable_shared_from_this<VehicleRoleDistributionImpl> 
        {
        private:
            bool _isSetVehicleRoleDistributionEntries = false;
            std::vector<std::shared_ptr<IVehicleRoleDistributionEntryWriter>> _vehicleRoleDistributionEntries {};

        public:

            OPENSCENARIOLIB_EXP VehicleRoleDistributionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleRoleDistributionEntry>> GetVehicleRoleDistributionEntries() const override;

            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IVehicleRoleDistributionEntryWriter>> GetWriterVehicleRoleDistributionEntries() const override;
            OPENSCENARIOLIB_EXP int GetVehicleRoleDistributionEntriesSize() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IVehicleRoleDistributionEntry> GetVehicleRoleDistributionEntriesAtIndex(unsigned int index) const override;


            OPENSCENARIOLIB_EXP void SetVehicleRoleDistributionEntries(std::vector<std::shared_ptr<IVehicleRoleDistributionEntryWriter>>& vehicleRoleDistributionEntries) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetVehicleRoleDistributionEntries() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVehicleRoleDistributionEntry. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVehicleRoleDistributionEntry)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VehicleRoleDistributionEntryImpl: public BaseImpl, public IVehicleRoleDistributionEntryWriter, public std::enable_shared_from_this<VehicleRoleDistributionEntryImpl> 
        {
        private:
            bool _isSetRole = false;
            Role _role {};
            bool _isSetWeight = false;
            double _weight {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VehicleRoleDistributionEntryImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP Role GetRole() const override;
            OPENSCENARIOLIB_EXP double GetWeight() const override;


            OPENSCENARIOLIB_EXP void SetRole(const Role role) override;

            OPENSCENARIOLIB_EXP void SetWeight(const double weight) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRole(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToWeight(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRole() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromWeight() const override;

            OPENSCENARIOLIB_EXP bool IsRoleParameterized() override;
            OPENSCENARIOLIB_EXP bool IsWeightParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetRole() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetWeight() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVertex. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVertex)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VertexImpl: public BaseImpl, public IVertexWriter, public std::enable_shared_from_this<VertexImpl> 
        {
        private:
            bool _isSetTime = false;
            double _time {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP VertexImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetTime() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetTime(const double time) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTime(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTime() const override;

            OPENSCENARIOLIB_EXP bool IsTimeParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual void ResetTime() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTime() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IVisibilityAction. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IVisibilityAction)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class VisibilityActionImpl: public BaseImpl, public IVisibilityActionWriter, public std::enable_shared_from_this<VisibilityActionImpl> 
        {
        private:
            bool _isSetGraphics = false;
            bool _graphics {};
            bool _isSetSensors = false;
            bool _sensors {};
            bool _isSetTraffic = false;
            bool _traffic {};
            bool _isSetSensorReferenceSet = false;
            std::shared_ptr<ISensorReferenceSetWriter> _sensorReferenceSet {};

        public:

			virtual void ResolveBooleanExpression(std::string& attributeKey, bool& value) override;		
            OPENSCENARIOLIB_EXP VisibilityActionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP bool GetGraphics() const override;
            OPENSCENARIOLIB_EXP bool GetSensors() const override;
            OPENSCENARIOLIB_EXP bool GetTraffic() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISensorReferenceSet> GetSensorReferenceSet() const override;


            OPENSCENARIOLIB_EXP void SetGraphics(const bool graphics) override;

            OPENSCENARIOLIB_EXP void SetSensors(const bool sensors) override;

            OPENSCENARIOLIB_EXP void SetTraffic(const bool traffic) override;

            OPENSCENARIOLIB_EXP void SetSensorReferenceSet(std::shared_ptr<ISensorReferenceSetWriter> sensorReferenceSet) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToGraphics(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSensors(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTraffic(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromGraphics() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSensors() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTraffic() const override;

            OPENSCENARIOLIB_EXP bool IsGraphicsParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSensorsParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTrafficParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISensorReferenceSetWriter> GetWriterSensorReferenceSet() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetGraphics() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSensors() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetTraffic() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSensorReferenceSet() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSensorReferenceSet() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IWaypoint. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWaypoint)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WaypointImpl: public BaseImpl, public IWaypointWriter, public std::enable_shared_from_this<WaypointImpl> 
        {
        private:
            bool _isSetRouteStrategy = false;
            RouteStrategy _routeStrategy {};
            bool _isSetPosition = false;
            std::shared_ptr<IPositionWriter> _position {};

        public:

            OPENSCENARIOLIB_EXP WaypointImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP RouteStrategy GetRouteStrategy() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPosition> GetPosition() const override;


            OPENSCENARIOLIB_EXP void SetRouteStrategy(const RouteStrategy routeStrategy) override;

            OPENSCENARIOLIB_EXP void SetPosition(std::shared_ptr<IPositionWriter> position) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToRouteStrategy(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromRouteStrategy() const override;

            OPENSCENARIOLIB_EXP bool IsRouteStrategyParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<IPositionWriter> GetWriterPosition() const override;
            OPENSCENARIOLIB_EXP virtual bool IsSetRouteStrategy() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetPosition() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IWeather. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWeather)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WeatherImpl: public BaseImpl, public IWeatherWriter, public std::enable_shared_from_this<WeatherImpl> 
        {
        private:
            bool _isSetAtmosphericPressure = false;
            double _atmosphericPressure {};
            bool _isSetCloudState = false;
            CloudState _cloudState {};
            bool _isSetFractionalCloudCover = false;
            FractionalCloudCover _fractionalCloudCover {};
            bool _isSetTemperature = false;
            double _temperature {};
            bool _isSetSun = false;
            std::shared_ptr<ISunWriter> _sun {};
            bool _isSetFog = false;
            std::shared_ptr<IFogWriter> _fog {};
            bool _isSetPrecipitation = false;
            std::shared_ptr<IPrecipitationWriter> _precipitation {};
            bool _isSetWind = false;
            std::shared_ptr<IWindWriter> _wind {};
            bool _isSetDomeImage = false;
            std::shared_ptr<IDomeImageWriter> _domeImage {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP WeatherImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetAtmosphericPressure() const override;
            OPENSCENARIOLIB_EXP CloudState GetCloudState() const override;
            OPENSCENARIOLIB_EXP FractionalCloudCover GetFractionalCloudCover() const override;
            OPENSCENARIOLIB_EXP double GetTemperature() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<ISun> GetSun() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFog> GetFog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrecipitation> GetPrecipitation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWind> GetWind() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDomeImage> GetDomeImage() const override;


            OPENSCENARIOLIB_EXP void SetAtmosphericPressure(const double atmosphericPressure) override;

            OPENSCENARIOLIB_EXP void SetCloudState(const CloudState cloudState) override;

            OPENSCENARIOLIB_EXP void SetFractionalCloudCover(const FractionalCloudCover fractionalCloudCover) override;

            OPENSCENARIOLIB_EXP void SetTemperature(const double temperature) override;

            OPENSCENARIOLIB_EXP void SetSun(std::shared_ptr<ISunWriter> sun) override;

            OPENSCENARIOLIB_EXP void SetFog(std::shared_ptr<IFogWriter> fog) override;

            OPENSCENARIOLIB_EXP void SetPrecipitation(std::shared_ptr<IPrecipitationWriter> precipitation) override;

            OPENSCENARIOLIB_EXP void SetWind(std::shared_ptr<IWindWriter> wind) override;

            OPENSCENARIOLIB_EXP void SetDomeImage(std::shared_ptr<IDomeImageWriter> domeImage) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToAtmosphericPressure(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToCloudState(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToFractionalCloudCover(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToTemperature(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromAtmosphericPressure() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromCloudState() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromFractionalCloudCover() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromTemperature() const override;

            OPENSCENARIOLIB_EXP bool IsAtmosphericPressureParameterized() override;
            OPENSCENARIOLIB_EXP bool IsCloudStateParameterized() override;
            OPENSCENARIOLIB_EXP bool IsFractionalCloudCoverParameterized() override;
            OPENSCENARIOLIB_EXP bool IsTemperatureParameterized() override;
            // children
            OPENSCENARIOLIB_EXP std::shared_ptr<ISunWriter> GetWriterSun() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IFogWriter> GetWriterFog() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IPrecipitationWriter> GetWriterPrecipitation() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IWindWriter> GetWriterWind() const override;
            OPENSCENARIOLIB_EXP std::shared_ptr<IDomeImageWriter> GetWriterDomeImage() const override;
            OPENSCENARIOLIB_EXP virtual void ResetAtmosphericPressure() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetAtmosphericPressure() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetCloudState() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetCloudState() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFractionalCloudCover() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFractionalCloudCover() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetTemperature() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetTemperature() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetSun() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetSun() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetFog() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetFog() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetPrecipitation() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetPrecipitation() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetWind() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetWind() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetDomeImage() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetDomeImage() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IWind. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWind)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WindImpl: public BaseImpl, public IWindWriter, public std::enable_shared_from_this<WindImpl> 
        {
        private:
            bool _isSetDirection = false;
            double _direction {};
            bool _isSetSpeed = false;
            double _speed {};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP WindImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetDirection() const override;
            OPENSCENARIOLIB_EXP double GetSpeed() const override;


            OPENSCENARIOLIB_EXP void SetDirection(const double direction) override;

            OPENSCENARIOLIB_EXP void SetSpeed(const double speed) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToDirection(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToSpeed(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromDirection() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromSpeed() const override;

            OPENSCENARIOLIB_EXP bool IsDirectionParameterized() override;
            OPENSCENARIOLIB_EXP bool IsSpeedParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual bool IsSetDirection() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetSpeed() const override;          
        };

        /**
         * This is a automatic generated file according to the OpenSCENARIO specification version 1.3
         * <p>
         * Value class that implements IWorldPosition. With setter methods to fill the properties.
         * <ul>
         * <li> getter methods for properties (implemented methods of IWorldPosition)
         * <li> setter methods for properties
         * <li> getChildren method to collect all children
         * <li> clone function to make a deep copy
         * <li> overrides from BaseImpl
         * </ul>
         * 
         * @author RA Consulting OpenSCENARIO generation facility
        */
        class WorldPositionImpl: public BaseImpl, public IWorldPositionWriter, public std::enable_shared_from_this<WorldPositionImpl> 
        {
        private:
            bool _isSetH = false;
            double _h {0};
            bool _isSetP = false;
            double _p {0};
            bool _isSetR = false;
            double _r {0};
            bool _isSetX = false;
            double _x {};
            bool _isSetY = false;
            double _y {};
            bool _isSetZ = false;
            double _z {0};

        public:

			virtual void ResolveDoubleExpression(std::string& attributeKey, double& value) override;		
            OPENSCENARIOLIB_EXP WorldPositionImpl();

            IOpenScenarioFlexElement* GetOpenScenarioFlexElement() override;

            OPENSCENARIOLIB_EXP double GetH() const override;
            OPENSCENARIOLIB_EXP double GetP() const override;
            OPENSCENARIOLIB_EXP double GetR() const override;
            OPENSCENARIOLIB_EXP double GetX() const override;
            OPENSCENARIOLIB_EXP double GetY() const override;
            OPENSCENARIOLIB_EXP double GetZ() const override;


            OPENSCENARIOLIB_EXP void SetH(const double h) override;

            OPENSCENARIOLIB_EXP void SetP(const double p) override;

            OPENSCENARIOLIB_EXP void SetR(const double r) override;

            OPENSCENARIOLIB_EXP void SetX(const double x) override;

            OPENSCENARIOLIB_EXP void SetY(const double y) override;

            OPENSCENARIOLIB_EXP void SetZ(const double z) override;

            OPENSCENARIOLIB_EXP void ResolveParameterInternal(IParserMessageLogger& logger, std::string& attributeKey, std::string& parameterLiteralValue) override;

            OPENSCENARIOLIB_EXP SimpleType GetTypeFromAttributeName(std::string& attributeKey) const override;


            /**
            * A list of all aggregated children (lists are flattened). This may be used for applying a specific 
            * method for any child.
            * @return a list with all children (as BaseImpl)
            */
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<BaseImpl>> GetChildren() const override;

            /**
            * Making a (deep) clone this object. This is useful and used for importing elements from catalogs.
            * @return a deep copy of the object.
            */
            OPENSCENARIOLIB_EXP std::shared_ptr<BaseImpl> Clone() override;

            std::shared_ptr<void> GetAdapter(const std::string classifier) override;

            std::weak_ptr<IOpenScenarioModelElement> GetParent() const override;

            // Implement the IOpenScenarioFlexElement interface

            OPENSCENARIOLIB_EXP std::string GetStringProperty(std::string key) const override;

            uint32_t GetUnsignedIntProperty(std::string key) const override;

            int GetIntProperty(std::string key) const override;

            double GetDoubleProperty(std::string key) const override;

            uint16_t GetUnsignedShortProperty(std::string key) const override;
 
            bool GetBooleanProperty(std::string key) const override;

            DateTime GetDateTimeProperty(std::string key) const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetChildElement(std::string key) const override;
            OPENSCENARIOLIB_EXP std::vector<std::shared_ptr<IOpenScenarioFlexElement>> GetListChildElement(std::string key) const override;

            std::weak_ptr<IOpenScenarioFlexElement> GetParentFlexElement() const override;

            OPENSCENARIOLIB_EXP std::shared_ptr<IOpenScenarioFlexElement> GetReferencedElement(std::string key, std::string name) const override;

            OPENSCENARIOLIB_EXP std::string GetEnumerationLiteral(std::string key) const override;

            std::string GetModelType() const override;

            OPENSCENARIOLIB_EXP  void WriteParameterToH(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToP(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToR(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToX(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToY(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP  void WriteParameterToZ(std::string& parameterName) override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromH() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromP() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromR() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromX() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromY() const override;

            OPENSCENARIOLIB_EXP std::string GetParameterFromZ() const override;

            OPENSCENARIOLIB_EXP bool IsHParameterized() override;
            OPENSCENARIOLIB_EXP bool IsPParameterized() override;
            OPENSCENARIOLIB_EXP bool IsRParameterized() override;
            OPENSCENARIOLIB_EXP bool IsXParameterized() override;
            OPENSCENARIOLIB_EXP bool IsYParameterized() override;
            OPENSCENARIOLIB_EXP bool IsZParameterized() override;
            // children
            OPENSCENARIOLIB_EXP virtual void ResetH() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetH() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetP() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetP() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetR() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetR() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetX() const override;          
            OPENSCENARIOLIB_EXP virtual bool IsSetY() const override;          
            OPENSCENARIOLIB_EXP virtual void ResetZ() override;
            OPENSCENARIOLIB_EXP virtual bool IsSetZ() const override;          
        };


    }
}

