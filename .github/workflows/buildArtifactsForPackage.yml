name: OpenScenarioCppArtifacts
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name: 
        description: 'Artifact name'
        default: 'OpenScenarioWindowsLinuxDevPackage'


jobs:
  CreatePackage:
    runs-on: ubuntu-20.04
    needs: [LinuxSharedReleaseBuild, LinuxStaticReleaseBuild, Win32SharedReleaseBuild, Win32StaticReleaseBuild, x64SharedReleaseBuild, x64StaticReleaseBuild]

    steps:
    - uses: actions/checkout@v3

    - name: update system
      run:  sudo apt-get update


    # Linux builds
    # - name: get artifacts LinuxSharedDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: LinuxSharedDebug
    #     path: ./cpp/build
    # - name: unzip output
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts LinuxSharedRelease
      uses: actions/download-artifact@v3
      with:
        name: LinuxSharedRelease
        path: ./cpp/build
    - name: unzip output LinuxSharedDebug
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz

    # - name: get artifacts LinuxStaticDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: LinuxStaticDebug
    #     path: ./cpp/build
    # - name: unzip output LinuxStaticDebug
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts LinuxStaticRelease
      uses: actions/download-artifact@v3
      with:
        name: LinuxStaticRelease
        path: ./cpp/build
    - name: unzip output LinuxStaticRelease
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz

    # Win32 builds
    # - name: get artifacts Win32SharedDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: Win32SharedDebug
    #     path: ./cpp/build
    # - name: unzip output Win32SharedDebug
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts Win32SharedRelease
      uses: actions/download-artifact@v3
      with:
        name: Win32SharedRelease
        path: ./cpp/build
    - name: unzip output Win32SharedRelease
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz

    # - name: get artifacts Win32StaticDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: Win32StaticDebug
    #     path: ./cpp/build
    # - name: unzip output Win32StaticDebug
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts Win32StaticRelease
      uses: actions/download-artifact@v3
      with:
        name: Win32StaticRelease
        path: ./cpp/build
    - name: unzip output Win32StaticRelease
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz

    # x64 builds
    # - name: get artifacts x64SharedDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: x64SharedDebug
    #     path: ./cpp/build
    # - name: unzip output x64SharedDebug
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts x64SharedRelease
      uses: actions/download-artifact@v3
      with:
        name: x64SharedRelease
        path: ./cpp/build
    - name: unzip output x64SharedRelease
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz

    # - name: get artifacts x64StaticDebug
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: x64StaticDebug
    #     path: ./cpp/build
    # - name: unzip output x64StaticDebug
    #   shell: bash
    #   run: |
    #     cd ./cpp/build
    #     tar -zxf out.tgz
    #     rm out.tgz

    - name: get artifacts x64StaticRelease
      uses: actions/download-artifact@v3
      with:
        name: x64StaticRelease
        path: ./cpp/build
    - name: unzip output x64StaticRelease
      shell: bash
      run: |
        cd ./cpp/build
        tar -zxf out.tgz
        rm out.tgz
        ls -l .


    # Create the devel packages
    - name: create package Linux shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared
    - name: create package Linux static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static
    - name: create package Win32 shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared Win32
    - name: create package Win32 static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static Win32
    - name: create package x64 shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared x64
    - name: create package x64 static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static x64

    # Check packages
    - name: check packages
      run: ls ./cpp/buildArtifact/OpenSCENARIO*

    - name: publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.name }}
        path: ./cpp/buildArtifact/OpenSCENARIO*


  # Linux Shared
  # LinuxSharedDebugBuild:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: update system
  #     run:  sudo apt-get update

  #   - name: install uuid-dev package
  #     run:  sudo apt-get install uuid-dev
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="Linux-shared-debug"
      
  #   - name: build solution Debug
  #     shell: bash
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-Linux-shared-debug"

  #  - name: tar and zip output
  #     shell: bash
  #    run: |
  #      cd ./cpp/build
  #      tar -zcf out.tgz cg*

  #   - name: publish artifact
  #     uses: actions/upload-artifact@v4
  #     with: 
  #       name: LinuxSharedDebug
  #       path: ./cpp/build/out.tgz


  LinuxSharedReleaseBuild:
    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v3

    - name: update system
      run:  sudo apt-get update

    - name: install uuid-dev package
      run:  sudo apt-get install uuid-dev
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="Linux-shared-release"
      
    - name: build solution Release
      shell: bash
      run: |
        cd cpp
        cmake --build --preset="Build-Linux-shared-release"

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with: 
        name: LinuxSharedRelease
        path: ./cpp/build/out.tgz


  # Linux Static
  # LinuxStaticDebugBuild:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: update system
  #     run:  sudo apt-get update

  #   - name: install uuid-dev package
  #     run:  sudo apt-get install uuid-dev
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="Linux-static-debug"
      
  #   - name: build solution Debug
  #     shell: bash
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-Linux-static-debug"

  #   - name: tar and zip output
  #     shell: bash
  #     run: |
  #       cd ./cpp/build
  #       tar -zcf out.tgz cg*

  #     - name: publish artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: LinuxStaticDebug
  #         path: ./cpp/build/out.tgz


  LinuxStaticReleaseBuild:
    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v3

    - name: update system
      run:  sudo apt-get update

    - name: install uuid-dev package
      run:  sudo apt-get install uuid-dev
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="Linux-static-release"
      
    - name: build solution Release
      shell: bash
      run: |
        cd cpp
        cmake --build --preset="Build-Linux-static-release"

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: LinuxStaticRelease
        path: ./cpp/build/out.tgz


  # Win32 Shared
  # Win32SharedDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2022-Win32-shared"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2022-Win32-shared" --config Debug

  #   - name: tar and zip output
  #     shell: bash
  #     run: |
  #       cd ./cpp/build
  #       tar -zcf out.tgz cg*

  #     - name: publish artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Win32SharedDebug
  #         path: ./cpp/build/out.tgz


  Win32SharedReleaseBuild:
    runs-on: windows-2022
    
    steps:
    - uses: actions/checkout@v3
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2022-Win32-shared"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2022-Win32-shared" --config Release

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: Win32SharedRelease
        path: ./cpp/build/out.tgz


  # Win32 Static
  # Win32StaticDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2022-Win32-static"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2022-Win32-static" --config Debug

  #   - name: tar and zip output
  #     shell: bash
  #     run: |
  #       cd ./cpp/build
  #       tar -zcf out.tgz cg*

  #     - name: publish artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Win32StaticDebug
  #         path: ./cpp/build/out.tgz


  Win32StaticReleaseBuild:
    runs-on: windows-2022
    
    steps:
    - uses: actions/checkout@v3
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2022-Win32-static"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2022-Win32-static" --config Release

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: Win32StaticRelease
        path: ./cpp/build/out.tgz


  # x64 Shared
  # x64SharedDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2022-x64-shared"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2022-x64-shared" --config Debug
    
  #   - name: tar and zip output
  #     shell: bash
  #     run: |
  #       cd ./cpp/build
  #       tar -zcf out.tgz cg*

  #     - name: publish artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: x64SharedDebug
  #         path: ./cpp/build/out.tgz


  x64SharedReleaseBuild:
    runs-on: windows-2022
    
    steps:
    - uses: actions/checkout@v3
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2022-x64-shared"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2022-x64-shared" --config Release

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: x64SharedRelease
        path: ./cpp/build/out.tgz


  # x64 Static
  # x64StaticDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2022-x64-static"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2022-x64-static" --config Debug

  #   - name: tar and zip output
  #     shell: bash
  #     run: |
  #       cd ./cpp/build
  #       tar -zcf out.tgz cg*

  #     - name: publish artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: x64StaticDebug
  #         path: ./cpp/build/out.tgz


  x64StaticReleaseBuild:
    runs-on: windows-2022
    
    steps:
    - uses: actions/checkout@v3
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2022-x64-static"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2022-x64-static" --config Release

    - name: tar and zip output
      shell: bash
      run: |
        cd ./cpp/build
        tar -zcf out.tgz cg*

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: x64StaticRelease
        path: ./cpp/build/out.tgz
