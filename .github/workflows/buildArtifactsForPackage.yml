name: OpenScenarioV1_1CppArtifacts
on:
  workflow_dispatch:
    name:
    description: 'Artifact name'
    default: 'OpenScenarioWindowsLinuxDevPackage'


jobs:
  CreatePackage:
    runs-on: ubuntu-latest
    needs: [LinuxSharedReleaseBuild, LinuxStaticReleaseBuild, Win32SharedReleaseBuild, Win32StaticReleaseBuild, x64SharedReleaseBuild, x64StaticReleaseBuild]

    steps:
    - uses: actions/checkout@v2

    - name: update system
      run:  sudo apt-get update


    # Linux builds
    # - name: get artifacts LinuxSharedDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: LinuxSharedDebug
    #     path: ./cpp/build/output/Linux_shared/Debug

    # - name: unzip artifacts LinuxSharedDebug libs.tgz
    #   shell: bash
    #   run: |
    #     cd ./cpp/build/output/Linux_shared/Debug
    #     tar -zxf libsd.tgz
    #     rm -f libsd.tgz

    - name: get artifacts LinuxSharedRelease
      uses: actions/download-artifact@v2
      with:
        name: LinuxSharedRelease
        path: ./cpp/build/output/Linux_shared/Release

    - name: unzip artifacts LinuxSharedRelease libs.tgz
      shell: bash
      run: |
        cd ./cpp/build/output/Linux_shared/Release
        tar -zxf libsr.tgz
        rm -f libsr.tgz
        ls -lah

    # - name: get artifacts LinuxStaticDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: LinuxStaticDebug
    #     path: ./cpp/build/output/Linux_static/Debug

    - name: get artifacts LinuxStaticRelease
      uses: actions/download-artifact@v2
      with:
        name: LinuxStaticRelease
        path: ./cpp/build/output/Linux_static/Release

    # Win32 builds
    # - name: get artifacts Win32SharedDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: Win32SharedDebug
    #     path: ./cpp/build/output/Win32_shared/Debug

    - name: get artifacts Win32SharedRelease
      uses: actions/download-artifact@v2
      with:
        name: Win32SharedRelease
        path: ./cpp/build/output/Win32_shared/Release

    # - name: get artifacts Win32StaticDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: Win32StaticDebug
    #     path: ./cpp/build/output/Win32_static/Debug

    - name: get artifacts Win32StaticRelease
      uses: actions/download-artifact@v2
      with:
        name: Win32StaticRelease
        path: ./cpp/build/output/Win32_static/Release

    # x64 builds
    # - name: get artifacts x64SharedDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: x64SharedDebug
    #     path: ./cpp/build/output/x64_shared/Debug

    - name: get artifacts x64SharedRelease
      uses: actions/download-artifact@v2
      with:
        name: x64SharedRelease
        path: ./cpp/build/output/x64_shared/Release

    # - name: get artifacts x64StaticDebug
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: x64StaticDebug
    #     path: ./cpp/build/output/x64_static/Debug

    - name: get artifacts x64StaticRelease
      uses: actions/download-artifact@v2
      with:
        name: x64StaticRelease
        path: ./cpp/build/output/x64_static/Release

    # Create the devel packages
    - name: create package Linux shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared

    - name: create package Linux static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static

    - name: create package Win32 shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared Win32

    - name: create package Win32 static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static Win32

    - name: create package x64 shared
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh shared x64

    - name: create package x64 static
      run: |
        chmod a+x ./cpp/buildArtifact/*.sh
        ./cpp/buildArtifact/createLinuxWindowsBinPackage.sh static x64

    # Check packages
    - name: check packages
      run: ls ./cpp/buildArtifact/OpenSCENARIO*

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.inputs.name }}
        path: ./cpp/buildArtifact/OpenSCENARIO*


  # Linux Shared
  # LinuxSharedDebugBuild:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: update system
  #     run:  sudo apt-get update

  #   - name: install uuid-dev package
  #     run:  sudo apt-get install uuid-dev
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="Linux-shared-debug"
      
  #   - name: build solution Debug
  #     shell: bash
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-Linux-shared-debug"

  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgDebugMakeShared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/* ./cpp/build/output/Linux_shared/Release/

  #   - name: tar and zip shared libs
  #     shell: bash
  #     run: |
  #       cd ./cpp/build/output/Linux_shared/Debug
  #       tar -zcf ../libsd.tgz *.so*
  #       rm -rf *
  #       mv ../libsd.tgz .

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: LinuxSharedDebug
  #       path: ./cpp/build/output/Linux_shared/Debug/*


  LinuxSharedReleaseBuild:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: update system
      run:  sudo apt-get update

    - name: install uuid-dev package
      run:  sudo apt-get install uuid-dev
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="Linux-shared-release"
      
    - name: build solution Release
      shell: bash
      run: |
        cd cpp
        cmake --build --preset="Build-Linux-shared-release"

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgReleaseMakeShared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/* ./cpp/build/output/Linux_shared/Release/

    - name: tar and zip shared libs
      shell: bash
      run: |
        cd ./cpp/build/output/Linux_shared/Release
        ls -lah
        tar -zcf ../libsr.tgz *.so*
        rm -rf *
        mv ../libsr.tgz .
        ls -lah

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: LinuxSharedRelease
        path: ./cpp/build/output/Linux_shared/Release/*


  # Linux Static
  # LinuxStaticDebugBuild:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: update system
  #     run:  sudo apt-get update

  #   - name: install uuid-dev package
  #     run:  sudo apt-get install uuid-dev
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="Linux-static-debug"
      
  #   - name: build solution Debug
  #     shell: bash
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-Linux-static-debug"

  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgDebugMakeStatic/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/* ./cpp/build/output/Linux_static/Release/

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: LinuxStaticDebug
  #       path: ./cpp/build/output/Linux_static/Debug/*


  LinuxStaticReleaseBuild:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: update system
      run:  sudo apt-get update

    - name: install uuid-dev package
      run:  sudo apt-get install uuid-dev
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="Linux-static-release"
      
    - name: build solution Release
      shell: bash
      run: |
        cd cpp
        cmake --build --preset="Build-Linux-static-release"

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgReleaseMakeStatic/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/* ./cpp/build/output/Linux_static/Release/

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: LinuxStaticRelease
        path: ./cpp/build/output/Linux_static/Release/*


  # Win32 Shared
  # Win32SharedDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2019-Win32-shared"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2019-Win32-shared" --config Debug

  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgMultiVS2019Win32Shared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Debug/* ./cpp/build/output/Win32_shared/Debug/

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: Win32SharedDebug
  #       path: ./cpp/build/output/Win32_shared/Debug/*


  Win32SharedReleaseBuild:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2019-Win32-shared"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2019-Win32-shared" --config Release

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgMultiVS2019Win32Shared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Release/* ./cpp/build/output/Win32_shared/Release/

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: Win32SharedRelease
        path: ./cpp/build/output/Win32_shared/Release/*


  # Win32 Static
  # Win32StaticDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2019-Win32-static"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2019-Win32-static" --config Debug

  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgMultiVS2019Win32Static/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Debug/* ./cpp/build/output/Win32_static/Debug/

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: Win32StaticDebug
  #       path: ./cpp/build/output/Win32_static/Debug/*


  Win32StaticReleaseBuild:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2019-Win32-static"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2019-Win32-static" --config Release

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgMultiVS2019Win32Static/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Release/* ./cpp/build/output/Win32_static/Release/

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: Win32StaticRelease
        path: ./cpp/build/output/Win32_static/Release/*


  # x64 Shared
  # x64SharedDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2019-x64-shared"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2019-x64-shared" --config Debug
    
  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgMultiVS2019x64Shared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Debug/* ./cpp/build/output/x64_shared/Debug/

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: x64SharedDebug
  #       path: ./cpp/build/output/x64_shared/Debug/*


  x64SharedReleaseBuild:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2019-x64-shared"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2019-x64-shared" --config Release

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgMultiVS2019x64Shared/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Release/* ./cpp/build/output/x64_shared/Release/

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: x64SharedRelease
        path: ./cpp/build/output/x64_shared/Release/*


  # x64 Static
  # x64StaticDebugBuild:
  #   runs-on: windows-latest
    
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: cmake generate solution Debug
  #     run: cmake -S ./cpp --preset="VS2019-x64-static"
      
  #   - name: build solution Debug
  #     run: |
  #       cd cpp
  #       cmake --build --preset="Build-VS2019-x64-static" --config Debug

  #   - name: copy antlr
  #     shell: bash
  #     run:  cp ./cpp/build/cgMultiVS2019x64Static/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Debug/* ./cpp/build/output/x64_static/Debug/

  #   - name: publish artifacts
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: x64StaticDebug
  #       path: ./cpp/build/output/x64_static/Debug/*


  x64StaticReleaseBuild:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: cmake generate solution Release
      run: cmake -S ./cpp --preset="VS2019-x64-static"
      
    - name: build solution Release
      run: |
        cd cpp
        cmake --build --preset="Build-VS2019-x64-static" --config Release

    - name: copy antlr
      shell: bash
      run:  cp ./cpp/build/cgMultiVS2019x64Static/antlr4_runtime/src/antlr4_runtime/runtime/Cpp/dist/Release/* ./cpp/build/output/x64_static/Release/

    - name: publish artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: x64StaticRelease
        path: ./cpp/build/output/x64_static/Release/*


